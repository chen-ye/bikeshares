// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
/* eslint-disable max-len */

// Lib
export { Layer, CompositeLayer, LayerManager, AttributeManager } from './lib';
export { COORDINATE_SYSTEM } from './lib';
// Viewports
export { default as Viewport } from './lib/viewports/viewport';
export { default as PerspectiveViewport } from './lib/viewports/perspective-viewport';
export { default as OrthographicViewport } from './lib/viewports/orthographic-viewport';
export { default as WebMercatorViewport } from './lib/viewports/web-mercator-viewport';

// Core Layers
export { default as ArcLayer } from './layers/core/arc-layer/arc-layer';
export { default as IconLayer } from './layers/core/icon-layer/icon-layer';
export { default as LineLayer } from './layers/core/line-layer/line-layer';
export { default as PointCloudLayer } from './layers/core/point-cloud-layer/point-cloud-layer';
export { default as ScatterplotLayer } from './layers/core/scatterplot-layer/scatterplot-layer';

export { default as ScreenGridLayer } from './layers/core/screen-grid-layer/screen-grid-layer';
export { default as GridLayer } from './layers/core/grid-layer/grid-layer';
export { default as GridCellLayer } from './layers/core/grid-cell-layer/grid-cell-layer';

export { default as HexagonLayer } from './layers/core/hexagon-layer/hexagon-layer';
export { default as HexagonCellLayer } from './layers/core/hexagon-cell-layer/hexagon-cell-layer';

export { default as PathLayer } from './layers/core/path-layer/path-layer';
export { default as PolygonLayer } from './layers/core/polygon-layer/polygon-layer';
export { default as GeoJsonLayer } from './layers/core/geojson-layer/geojson-layer';

// React exports
export { default as DeckGL } from './react/deckgl';
export { default } from './react/deckgl';

// Experimental Features (May change in minor version bumps, use at your own risk)
import { get } from './lib/utils/get';
import { count } from './lib/utils/count';
import { EffectManager, Effect } from './experimental/lib';
import { default as ReflectionEffect } from './experimental/effects/reflection-effect';

export var experimental = {
  get: get,
  count: count,
  EffectManager: EffectManager,
  Effect: Effect,
  ReflectionEffect: ReflectionEffect
};

// Deprecated Layers
export { default as ChoroplethLayer } from './layers/deprecated/choropleth-layer/choropleth-layer';
export { default as ChoroplethLayer64 } from './layers/deprecated/choropleth-layer-64/choropleth-layer-64';
export { default as ExtrudedChoroplethLayer64 } from './layers/deprecated/extruded-choropleth-layer-64/extruded-choropleth-layer-64';

// Deprecated Exports
export { assembleShaders } from 'luma.gl'; // Just a forward for the luma.gl version (integrated with Model class)
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJMYXllciIsIkNvbXBvc2l0ZUxheWVyIiwiTGF5ZXJNYW5hZ2VyIiwiQXR0cmlidXRlTWFuYWdlciIsIkNPT1JESU5BVEVfU1lTVEVNIiwiZGVmYXVsdCIsIlZpZXdwb3J0IiwiUGVyc3BlY3RpdmVWaWV3cG9ydCIsIk9ydGhvZ3JhcGhpY1ZpZXdwb3J0IiwiV2ViTWVyY2F0b3JWaWV3cG9ydCIsIkFyY0xheWVyIiwiSWNvbkxheWVyIiwiTGluZUxheWVyIiwiUG9pbnRDbG91ZExheWVyIiwiU2NhdHRlcnBsb3RMYXllciIsIlNjcmVlbkdyaWRMYXllciIsIkdyaWRMYXllciIsIkdyaWRDZWxsTGF5ZXIiLCJIZXhhZ29uTGF5ZXIiLCJIZXhhZ29uQ2VsbExheWVyIiwiUGF0aExheWVyIiwiUG9seWdvbkxheWVyIiwiR2VvSnNvbkxheWVyIiwiRGVja0dMIiwiZ2V0IiwiY291bnQiLCJFZmZlY3RNYW5hZ2VyIiwiRWZmZWN0IiwiUmVmbGVjdGlvbkVmZmVjdCIsImV4cGVyaW1lbnRhbCIsIkNob3JvcGxldGhMYXllciIsIkNob3JvcGxldGhMYXllcjY0IiwiRXh0cnVkZWRDaG9yb3BsZXRoTGF5ZXI2NCIsImFzc2VtYmxlU2hhZGVycyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFNBQVFBLEtBQVIsRUFBZUMsY0FBZixFQUErQkMsWUFBL0IsRUFBNkNDLGdCQUE3QyxRQUFvRSxPQUFwRTtBQUNBLFNBQVFDLGlCQUFSLFFBQWdDLE9BQWhDO0FBQ0E7QUFDQSxTQUFRQyxXQUFXQyxRQUFuQixRQUFrQywwQkFBbEM7QUFDQSxTQUFRRCxXQUFXRSxtQkFBbkIsUUFBNkMsc0NBQTdDO0FBQ0EsU0FBUUYsV0FBV0csb0JBQW5CLFFBQThDLHVDQUE5QztBQUNBLFNBQVFILFdBQVdJLG1CQUFuQixRQUE2Qyx1Q0FBN0M7O0FBRUE7QUFDQSxTQUFRSixXQUFXSyxRQUFuQixRQUFrQyxtQ0FBbEM7QUFDQSxTQUFRTCxXQUFXTSxTQUFuQixRQUFtQyxxQ0FBbkM7QUFDQSxTQUFRTixXQUFXTyxTQUFuQixRQUFtQyxxQ0FBbkM7QUFDQSxTQUFRUCxXQUFXUSxlQUFuQixRQUF5QyxtREFBekM7QUFDQSxTQUFRUixXQUFXUyxnQkFBbkIsUUFBMEMsbURBQTFDOztBQUVBLFNBQVFULFdBQVdVLGVBQW5CLFFBQXlDLG1EQUF6QztBQUNBLFNBQVFWLFdBQVdXLFNBQW5CLFFBQW1DLHFDQUFuQztBQUNBLFNBQVFYLFdBQVdZLGFBQW5CLFFBQXVDLCtDQUF2Qzs7QUFFQSxTQUFRWixXQUFXYSxZQUFuQixRQUFzQywyQ0FBdEM7QUFDQSxTQUFRYixXQUFXYyxnQkFBbkIsUUFBMEMscURBQTFDOztBQUVBLFNBQVFkLFdBQVdlLFNBQW5CLFFBQW1DLHFDQUFuQztBQUNBLFNBQVFmLFdBQVdnQixZQUFuQixRQUFzQywyQ0FBdEM7QUFDQSxTQUFRaEIsV0FBV2lCLFlBQW5CLFFBQXNDLDJDQUF0Qzs7QUFFQTtBQUNBLFNBQVFqQixXQUFXa0IsTUFBbkIsUUFBZ0MsZ0JBQWhDO0FBQ0EsU0FBUWxCLE9BQVIsUUFBaUMsZ0JBQWpDOztBQUVBO0FBQ0EsU0FBUW1CLEdBQVIsUUFBa0IsaUJBQWxCO0FBQ0EsU0FBUUMsS0FBUixRQUFvQixtQkFBcEI7QUFDQSxTQUFRQyxhQUFSLEVBQXVCQyxNQUF2QixRQUFvQyxvQkFBcEM7QUFDQSxTQUFRdEIsV0FBV3VCLGdCQUFuQixRQUEwQywwQ0FBMUM7O0FBRUEsT0FBTyxJQUFNQyxlQUFlO0FBQzFCTCxVQUQwQjtBQUUxQkMsY0FGMEI7QUFHMUJDLDhCQUgwQjtBQUkxQkMsZ0JBSjBCO0FBSzFCQztBQUwwQixDQUFyQjs7QUFRUDtBQUNBLFNBQVF2QixXQUFXeUIsZUFBbkIsUUFBeUMsdURBQXpDO0FBQ0EsU0FBUXpCLFdBQVcwQixpQkFBbkIsUUFBMkMsNkRBQTNDO0FBQ0EsU0FBUTFCLFdBQVcyQix5QkFBbkIsUUFBbUQsK0VBQW5EOztBQUVBO0FBQ0EsU0FBUUMsZUFBUixRQUE4QixTQUE5QixDLENBQXlDIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDE1IC0gMjAxNyBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG4vKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG5cbi8vIExpYlxuZXhwb3J0IHtMYXllciwgQ29tcG9zaXRlTGF5ZXIsIExheWVyTWFuYWdlciwgQXR0cmlidXRlTWFuYWdlcn0gZnJvbSAnLi9saWInO1xuZXhwb3J0IHtDT09SRElOQVRFX1NZU1RFTX0gZnJvbSAnLi9saWInO1xuLy8gVmlld3BvcnRzXG5leHBvcnQge2RlZmF1bHQgYXMgVmlld3BvcnR9IGZyb20gJy4vbGliL3ZpZXdwb3J0cy92aWV3cG9ydCc7XG5leHBvcnQge2RlZmF1bHQgYXMgUGVyc3BlY3RpdmVWaWV3cG9ydH0gZnJvbSAnLi9saWIvdmlld3BvcnRzL3BlcnNwZWN0aXZlLXZpZXdwb3J0JztcbmV4cG9ydCB7ZGVmYXVsdCBhcyBPcnRob2dyYXBoaWNWaWV3cG9ydH0gZnJvbSAnLi9saWIvdmlld3BvcnRzL29ydGhvZ3JhcGhpYy12aWV3cG9ydCc7XG5leHBvcnQge2RlZmF1bHQgYXMgV2ViTWVyY2F0b3JWaWV3cG9ydH0gZnJvbSAnLi9saWIvdmlld3BvcnRzL3dlYi1tZXJjYXRvci12aWV3cG9ydCc7XG5cbi8vIENvcmUgTGF5ZXJzXG5leHBvcnQge2RlZmF1bHQgYXMgQXJjTGF5ZXJ9IGZyb20gJy4vbGF5ZXJzL2NvcmUvYXJjLWxheWVyL2FyYy1sYXllcic7XG5leHBvcnQge2RlZmF1bHQgYXMgSWNvbkxheWVyfSBmcm9tICcuL2xheWVycy9jb3JlL2ljb24tbGF5ZXIvaWNvbi1sYXllcic7XG5leHBvcnQge2RlZmF1bHQgYXMgTGluZUxheWVyfSBmcm9tICcuL2xheWVycy9jb3JlL2xpbmUtbGF5ZXIvbGluZS1sYXllcic7XG5leHBvcnQge2RlZmF1bHQgYXMgUG9pbnRDbG91ZExheWVyfSBmcm9tICcuL2xheWVycy9jb3JlL3BvaW50LWNsb3VkLWxheWVyL3BvaW50LWNsb3VkLWxheWVyJztcbmV4cG9ydCB7ZGVmYXVsdCBhcyBTY2F0dGVycGxvdExheWVyfSBmcm9tICcuL2xheWVycy9jb3JlL3NjYXR0ZXJwbG90LWxheWVyL3NjYXR0ZXJwbG90LWxheWVyJztcblxuZXhwb3J0IHtkZWZhdWx0IGFzIFNjcmVlbkdyaWRMYXllcn0gZnJvbSAnLi9sYXllcnMvY29yZS9zY3JlZW4tZ3JpZC1sYXllci9zY3JlZW4tZ3JpZC1sYXllcic7XG5leHBvcnQge2RlZmF1bHQgYXMgR3JpZExheWVyfSBmcm9tICcuL2xheWVycy9jb3JlL2dyaWQtbGF5ZXIvZ3JpZC1sYXllcic7XG5leHBvcnQge2RlZmF1bHQgYXMgR3JpZENlbGxMYXllcn0gZnJvbSAnLi9sYXllcnMvY29yZS9ncmlkLWNlbGwtbGF5ZXIvZ3JpZC1jZWxsLWxheWVyJztcblxuZXhwb3J0IHtkZWZhdWx0IGFzIEhleGFnb25MYXllcn0gZnJvbSAnLi9sYXllcnMvY29yZS9oZXhhZ29uLWxheWVyL2hleGFnb24tbGF5ZXInO1xuZXhwb3J0IHtkZWZhdWx0IGFzIEhleGFnb25DZWxsTGF5ZXJ9IGZyb20gJy4vbGF5ZXJzL2NvcmUvaGV4YWdvbi1jZWxsLWxheWVyL2hleGFnb24tY2VsbC1sYXllcic7XG5cbmV4cG9ydCB7ZGVmYXVsdCBhcyBQYXRoTGF5ZXJ9IGZyb20gJy4vbGF5ZXJzL2NvcmUvcGF0aC1sYXllci9wYXRoLWxheWVyJztcbmV4cG9ydCB7ZGVmYXVsdCBhcyBQb2x5Z29uTGF5ZXJ9IGZyb20gJy4vbGF5ZXJzL2NvcmUvcG9seWdvbi1sYXllci9wb2x5Z29uLWxheWVyJztcbmV4cG9ydCB7ZGVmYXVsdCBhcyBHZW9Kc29uTGF5ZXJ9IGZyb20gJy4vbGF5ZXJzL2NvcmUvZ2VvanNvbi1sYXllci9nZW9qc29uLWxheWVyJztcblxuLy8gUmVhY3QgZXhwb3J0c1xuZXhwb3J0IHtkZWZhdWx0IGFzIERlY2tHTH0gZnJvbSAnLi9yZWFjdC9kZWNrZ2wnO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGRlZmF1bHR9IGZyb20gJy4vcmVhY3QvZGVja2dsJztcblxuLy8gRXhwZXJpbWVudGFsIEZlYXR1cmVzIChNYXkgY2hhbmdlIGluIG1pbm9yIHZlcnNpb24gYnVtcHMsIHVzZSBhdCB5b3VyIG93biByaXNrKVxuaW1wb3J0IHtnZXR9IGZyb20gJy4vbGliL3V0aWxzL2dldCc7XG5pbXBvcnQge2NvdW50fSBmcm9tICcuL2xpYi91dGlscy9jb3VudCc7XG5pbXBvcnQge0VmZmVjdE1hbmFnZXIsIEVmZmVjdH0gZnJvbSAnLi9leHBlcmltZW50YWwvbGliJztcbmltcG9ydCB7ZGVmYXVsdCBhcyBSZWZsZWN0aW9uRWZmZWN0fSBmcm9tICcuL2V4cGVyaW1lbnRhbC9lZmZlY3RzL3JlZmxlY3Rpb24tZWZmZWN0JztcblxuZXhwb3J0IGNvbnN0IGV4cGVyaW1lbnRhbCA9IHtcbiAgZ2V0LFxuICBjb3VudCxcbiAgRWZmZWN0TWFuYWdlcixcbiAgRWZmZWN0LFxuICBSZWZsZWN0aW9uRWZmZWN0XG59O1xuXG4vLyBEZXByZWNhdGVkIExheWVyc1xuZXhwb3J0IHtkZWZhdWx0IGFzIENob3JvcGxldGhMYXllcn0gZnJvbSAnLi9sYXllcnMvZGVwcmVjYXRlZC9jaG9yb3BsZXRoLWxheWVyL2Nob3JvcGxldGgtbGF5ZXInO1xuZXhwb3J0IHtkZWZhdWx0IGFzIENob3JvcGxldGhMYXllcjY0fSBmcm9tICcuL2xheWVycy9kZXByZWNhdGVkL2Nob3JvcGxldGgtbGF5ZXItNjQvY2hvcm9wbGV0aC1sYXllci02NCc7XG5leHBvcnQge2RlZmF1bHQgYXMgRXh0cnVkZWRDaG9yb3BsZXRoTGF5ZXI2NH0gZnJvbSAnLi9sYXllcnMvZGVwcmVjYXRlZC9leHRydWRlZC1jaG9yb3BsZXRoLWxheWVyLTY0L2V4dHJ1ZGVkLWNob3JvcGxldGgtbGF5ZXItNjQnO1xuXG4vLyBEZXByZWNhdGVkIEV4cG9ydHNcbmV4cG9ydCB7YXNzZW1ibGVTaGFkZXJzfSBmcm9tICdsdW1hLmdsJzsgLy8gSnVzdCBhIGZvcndhcmQgZm9yIHRoZSBsdW1hLmdsIHZlcnNpb24gKGludGVncmF0ZWQgd2l0aCBNb2RlbCBjbGFzcylcbiJdfQ==