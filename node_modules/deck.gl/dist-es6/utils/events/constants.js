import { Tap, Press, Pinch, Rotate, Pan, Swipe } from 'hammerjs';

/**
 * Only one set of basic input events will be fired by Hammer.js:
 * either pointer, touch, or mouse, depending on system support.
 * In order to enable an application to be agnostic of system support,
 * alias basic input events into "classes" of events: down, move, and up.
 * See `_onBasicInput()` for usage of these aliases.
 */
export var BASIC_EVENT_ALIASES = {
  pointerdown: 'pointerdown',
  pointermove: 'pointermove',
  pointerup: 'pointerup',
  touchstart: 'pointerdown',
  touchmove: 'pointermove',
  touchend: 'pointerup',
  mousedown: 'pointerdown',
  mousemove: 'pointermove',
  mouseup: 'pointerup'
};

/**
 * "Gestural" events are those that have semantic meaning beyond the basic input event,
 * e.g. a click or tap is a sequence of `down` and `up` events with no `move` event in between.
 * Hammer.js handles these with its Recognizer system;
 * this block maps event names to the Recognizers required to detect the events.
 */
export var EVENT_RECOGNIZER_MAP = {
  tap: 'tap',
  doubletap: 'doubletap',
  press: 'press',
  pinch: 'pinch',
  pinchin: 'pinch',
  pinchout: 'pinch',
  pinchstart: 'pinch',
  pinchmove: 'pinch',
  pinchend: 'pinch',
  pinchcancel: 'pinch',
  rotate: 'rotate',
  rotatestart: 'rotate',
  rotatemove: 'rotate',
  rotateend: 'rotate',
  rotatecancel: 'rotate',
  pan: 'pan',
  panstart: 'pan',
  panmove: 'pan',
  panup: 'pan',
  pandown: 'pan',
  panleft: 'pan',
  panright: 'pan',
  panend: 'pan',
  pancancel: 'pan',
  swipe: 'swipe',
  swipeleft: 'swipe',
  swiperight: 'swipe',
  swipeup: 'swipe',
  swipedown: 'swipe'
};

export var RECOGNIZERS = [[Rotate, { enable: false }], [Pinch, { enable: false }, ['rotate']], [Pan, { threshold: 10, enable: false }], [Swipe, { enable: false }], [Press, { enable: false }], [Tap, { event: 'doubletap', taps: 2, enable: false }], [Tap, { enable: false }]];

/**
 * Map gestural events typically provided by browsers
 * that are not reported in 'hammer.input' events
 * to corresponding Hammer.js gestures.
 */
export var GESTURE_EVENT_ALIASES = {
  click: 'tap',
  mousedown: 'pointerdown',
  mousemove: 'pointermove',
  mouseup: 'pointerup'
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy9ldmVudHMvY29uc3RhbnRzLmpzIl0sIm5hbWVzIjpbIlRhcCIsIlByZXNzIiwiUGluY2giLCJSb3RhdGUiLCJQYW4iLCJTd2lwZSIsIkJBU0lDX0VWRU5UX0FMSUFTRVMiLCJwb2ludGVyZG93biIsInBvaW50ZXJtb3ZlIiwicG9pbnRlcnVwIiwidG91Y2hzdGFydCIsInRvdWNobW92ZSIsInRvdWNoZW5kIiwibW91c2Vkb3duIiwibW91c2Vtb3ZlIiwibW91c2V1cCIsIkVWRU5UX1JFQ09HTklaRVJfTUFQIiwidGFwIiwiZG91YmxldGFwIiwicHJlc3MiLCJwaW5jaCIsInBpbmNoaW4iLCJwaW5jaG91dCIsInBpbmNoc3RhcnQiLCJwaW5jaG1vdmUiLCJwaW5jaGVuZCIsInBpbmNoY2FuY2VsIiwicm90YXRlIiwicm90YXRlc3RhcnQiLCJyb3RhdGVtb3ZlIiwicm90YXRlZW5kIiwicm90YXRlY2FuY2VsIiwicGFuIiwicGFuc3RhcnQiLCJwYW5tb3ZlIiwicGFudXAiLCJwYW5kb3duIiwicGFubGVmdCIsInBhbnJpZ2h0IiwicGFuZW5kIiwicGFuY2FuY2VsIiwic3dpcGUiLCJzd2lwZWxlZnQiLCJzd2lwZXJpZ2h0Iiwic3dpcGV1cCIsInN3aXBlZG93biIsIlJFQ09HTklaRVJTIiwiZW5hYmxlIiwidGhyZXNob2xkIiwiZXZlbnQiLCJ0YXBzIiwiR0VTVFVSRV9FVkVOVF9BTElBU0VTIiwiY2xpY2siXSwibWFwcGluZ3MiOiJBQUFBLFNBQ0VBLEdBREYsRUFFRUMsS0FGRixFQUdFQyxLQUhGLEVBSUVDLE1BSkYsRUFLRUMsR0FMRixFQU1FQyxLQU5GLFFBT08sVUFQUDs7QUFTQTs7Ozs7OztBQU9BLE9BQU8sSUFBTUMsc0JBQXNCO0FBQ2pDQyxlQUFhLGFBRG9CO0FBRWpDQyxlQUFhLGFBRm9CO0FBR2pDQyxhQUFXLFdBSHNCO0FBSWpDQyxjQUFZLGFBSnFCO0FBS2pDQyxhQUFXLGFBTHNCO0FBTWpDQyxZQUFVLFdBTnVCO0FBT2pDQyxhQUFXLGFBUHNCO0FBUWpDQyxhQUFXLGFBUnNCO0FBU2pDQyxXQUFTO0FBVHdCLENBQTVCOztBQVlQOzs7Ozs7QUFNQSxPQUFPLElBQU1DLHVCQUF1QjtBQUNsQ0MsT0FBSyxLQUQ2QjtBQUVsQ0MsYUFBVyxXQUZ1QjtBQUdsQ0MsU0FBTyxPQUgyQjtBQUlsQ0MsU0FBTyxPQUoyQjtBQUtsQ0MsV0FBUyxPQUx5QjtBQU1sQ0MsWUFBVSxPQU53QjtBQU9sQ0MsY0FBWSxPQVBzQjtBQVFsQ0MsYUFBVyxPQVJ1QjtBQVNsQ0MsWUFBVSxPQVR3QjtBQVVsQ0MsZUFBYSxPQVZxQjtBQVdsQ0MsVUFBUSxRQVgwQjtBQVlsQ0MsZUFBYSxRQVpxQjtBQWFsQ0MsY0FBWSxRQWJzQjtBQWNsQ0MsYUFBVyxRQWR1QjtBQWVsQ0MsZ0JBQWMsUUFmb0I7QUFnQmxDQyxPQUFLLEtBaEI2QjtBQWlCbENDLFlBQVUsS0FqQndCO0FBa0JsQ0MsV0FBUyxLQWxCeUI7QUFtQmxDQyxTQUFPLEtBbkIyQjtBQW9CbENDLFdBQVMsS0FwQnlCO0FBcUJsQ0MsV0FBUyxLQXJCeUI7QUFzQmxDQyxZQUFVLEtBdEJ3QjtBQXVCbENDLFVBQVEsS0F2QjBCO0FBd0JsQ0MsYUFBVyxLQXhCdUI7QUF5QmxDQyxTQUFPLE9BekIyQjtBQTBCbENDLGFBQVcsT0ExQnVCO0FBMkJsQ0MsY0FBWSxPQTNCc0I7QUE0QmxDQyxXQUFTLE9BNUJ5QjtBQTZCbENDLGFBQVc7QUE3QnVCLENBQTdCOztBQWdDUCxPQUFPLElBQU1DLGNBQWMsQ0FDekIsQ0FBQzNDLE1BQUQsRUFBUyxFQUFDNEMsUUFBUSxLQUFULEVBQVQsQ0FEeUIsRUFFekIsQ0FBQzdDLEtBQUQsRUFBUSxFQUFDNkMsUUFBUSxLQUFULEVBQVIsRUFBeUIsQ0FBQyxRQUFELENBQXpCLENBRnlCLEVBR3pCLENBQUMzQyxHQUFELEVBQU0sRUFBQzRDLFdBQVcsRUFBWixFQUFnQkQsUUFBUSxLQUF4QixFQUFOLENBSHlCLEVBSXpCLENBQUMxQyxLQUFELEVBQVEsRUFBQzBDLFFBQVEsS0FBVCxFQUFSLENBSnlCLEVBS3pCLENBQUM5QyxLQUFELEVBQVEsRUFBQzhDLFFBQVEsS0FBVCxFQUFSLENBTHlCLEVBTXpCLENBQUMvQyxHQUFELEVBQU0sRUFBQ2lELE9BQU8sV0FBUixFQUFxQkMsTUFBTSxDQUEzQixFQUE4QkgsUUFBUSxLQUF0QyxFQUFOLENBTnlCLEVBT3pCLENBQUMvQyxHQUFELEVBQU0sRUFBQytDLFFBQVEsS0FBVCxFQUFOLENBUHlCLENBQXBCOztBQVVQOzs7OztBQUtBLE9BQU8sSUFBTUksd0JBQXdCO0FBQ25DQyxTQUFPLEtBRDRCO0FBRW5DdkMsYUFBVyxhQUZ3QjtBQUduQ0MsYUFBVyxhQUh3QjtBQUluQ0MsV0FBUztBQUowQixDQUE5QiIsImZpbGUiOiJjb25zdGFudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBUYXAsXG4gIFByZXNzLFxuICBQaW5jaCxcbiAgUm90YXRlLFxuICBQYW4sXG4gIFN3aXBlXG59IGZyb20gJ2hhbW1lcmpzJztcblxuLyoqXG4gKiBPbmx5IG9uZSBzZXQgb2YgYmFzaWMgaW5wdXQgZXZlbnRzIHdpbGwgYmUgZmlyZWQgYnkgSGFtbWVyLmpzOlxuICogZWl0aGVyIHBvaW50ZXIsIHRvdWNoLCBvciBtb3VzZSwgZGVwZW5kaW5nIG9uIHN5c3RlbSBzdXBwb3J0LlxuICogSW4gb3JkZXIgdG8gZW5hYmxlIGFuIGFwcGxpY2F0aW9uIHRvIGJlIGFnbm9zdGljIG9mIHN5c3RlbSBzdXBwb3J0LFxuICogYWxpYXMgYmFzaWMgaW5wdXQgZXZlbnRzIGludG8gXCJjbGFzc2VzXCIgb2YgZXZlbnRzOiBkb3duLCBtb3ZlLCBhbmQgdXAuXG4gKiBTZWUgYF9vbkJhc2ljSW5wdXQoKWAgZm9yIHVzYWdlIG9mIHRoZXNlIGFsaWFzZXMuXG4gKi9cbmV4cG9ydCBjb25zdCBCQVNJQ19FVkVOVF9BTElBU0VTID0ge1xuICBwb2ludGVyZG93bjogJ3BvaW50ZXJkb3duJyxcbiAgcG9pbnRlcm1vdmU6ICdwb2ludGVybW92ZScsXG4gIHBvaW50ZXJ1cDogJ3BvaW50ZXJ1cCcsXG4gIHRvdWNoc3RhcnQ6ICdwb2ludGVyZG93bicsXG4gIHRvdWNobW92ZTogJ3BvaW50ZXJtb3ZlJyxcbiAgdG91Y2hlbmQ6ICdwb2ludGVydXAnLFxuICBtb3VzZWRvd246ICdwb2ludGVyZG93bicsXG4gIG1vdXNlbW92ZTogJ3BvaW50ZXJtb3ZlJyxcbiAgbW91c2V1cDogJ3BvaW50ZXJ1cCdcbn07XG5cbi8qKlxuICogXCJHZXN0dXJhbFwiIGV2ZW50cyBhcmUgdGhvc2UgdGhhdCBoYXZlIHNlbWFudGljIG1lYW5pbmcgYmV5b25kIHRoZSBiYXNpYyBpbnB1dCBldmVudCxcbiAqIGUuZy4gYSBjbGljayBvciB0YXAgaXMgYSBzZXF1ZW5jZSBvZiBgZG93bmAgYW5kIGB1cGAgZXZlbnRzIHdpdGggbm8gYG1vdmVgIGV2ZW50IGluIGJldHdlZW4uXG4gKiBIYW1tZXIuanMgaGFuZGxlcyB0aGVzZSB3aXRoIGl0cyBSZWNvZ25pemVyIHN5c3RlbTtcbiAqIHRoaXMgYmxvY2sgbWFwcyBldmVudCBuYW1lcyB0byB0aGUgUmVjb2duaXplcnMgcmVxdWlyZWQgdG8gZGV0ZWN0IHRoZSBldmVudHMuXG4gKi9cbmV4cG9ydCBjb25zdCBFVkVOVF9SRUNPR05JWkVSX01BUCA9IHtcbiAgdGFwOiAndGFwJyxcbiAgZG91YmxldGFwOiAnZG91YmxldGFwJyxcbiAgcHJlc3M6ICdwcmVzcycsXG4gIHBpbmNoOiAncGluY2gnLFxuICBwaW5jaGluOiAncGluY2gnLFxuICBwaW5jaG91dDogJ3BpbmNoJyxcbiAgcGluY2hzdGFydDogJ3BpbmNoJyxcbiAgcGluY2htb3ZlOiAncGluY2gnLFxuICBwaW5jaGVuZDogJ3BpbmNoJyxcbiAgcGluY2hjYW5jZWw6ICdwaW5jaCcsXG4gIHJvdGF0ZTogJ3JvdGF0ZScsXG4gIHJvdGF0ZXN0YXJ0OiAncm90YXRlJyxcbiAgcm90YXRlbW92ZTogJ3JvdGF0ZScsXG4gIHJvdGF0ZWVuZDogJ3JvdGF0ZScsXG4gIHJvdGF0ZWNhbmNlbDogJ3JvdGF0ZScsXG4gIHBhbjogJ3BhbicsXG4gIHBhbnN0YXJ0OiAncGFuJyxcbiAgcGFubW92ZTogJ3BhbicsXG4gIHBhbnVwOiAncGFuJyxcbiAgcGFuZG93bjogJ3BhbicsXG4gIHBhbmxlZnQ6ICdwYW4nLFxuICBwYW5yaWdodDogJ3BhbicsXG4gIHBhbmVuZDogJ3BhbicsXG4gIHBhbmNhbmNlbDogJ3BhbicsXG4gIHN3aXBlOiAnc3dpcGUnLFxuICBzd2lwZWxlZnQ6ICdzd2lwZScsXG4gIHN3aXBlcmlnaHQ6ICdzd2lwZScsXG4gIHN3aXBldXA6ICdzd2lwZScsXG4gIHN3aXBlZG93bjogJ3N3aXBlJ1xufTtcblxuZXhwb3J0IGNvbnN0IFJFQ09HTklaRVJTID0gW1xuICBbUm90YXRlLCB7ZW5hYmxlOiBmYWxzZX1dLFxuICBbUGluY2gsIHtlbmFibGU6IGZhbHNlfSwgWydyb3RhdGUnXV0sXG4gIFtQYW4sIHt0aHJlc2hvbGQ6IDEwLCBlbmFibGU6IGZhbHNlfV0sXG4gIFtTd2lwZSwge2VuYWJsZTogZmFsc2V9XSxcbiAgW1ByZXNzLCB7ZW5hYmxlOiBmYWxzZX1dLFxuICBbVGFwLCB7ZXZlbnQ6ICdkb3VibGV0YXAnLCB0YXBzOiAyLCBlbmFibGU6IGZhbHNlfV0sXG4gIFtUYXAsIHtlbmFibGU6IGZhbHNlfV1cbl07XG5cbi8qKlxuICogTWFwIGdlc3R1cmFsIGV2ZW50cyB0eXBpY2FsbHkgcHJvdmlkZWQgYnkgYnJvd3NlcnNcbiAqIHRoYXQgYXJlIG5vdCByZXBvcnRlZCBpbiAnaGFtbWVyLmlucHV0JyBldmVudHNcbiAqIHRvIGNvcnJlc3BvbmRpbmcgSGFtbWVyLmpzIGdlc3R1cmVzLlxuICovXG5leHBvcnQgY29uc3QgR0VTVFVSRV9FVkVOVF9BTElBU0VTID0ge1xuICBjbGljazogJ3RhcCcsXG4gIG1vdXNlZG93bjogJ3BvaW50ZXJkb3duJyxcbiAgbW91c2Vtb3ZlOiAncG9pbnRlcm1vdmUnLFxuICBtb3VzZXVwOiAncG9pbnRlcnVwJ1xufTtcbiJdfQ==