// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

export default "const float TILE_SIZE = 512.0;\nconst float PI = 3.1415926536;\nconst float WORLD_SCALE = TILE_SIZE / (PI * 2.0);\n\n// ref: lib/constants.js\nconst float PROJECT_IDENTITY = 0.;\nconst float PROJECT_MERCATOR = 1.;\nconst float PROJECT_MERCATOR_OFFSETS = 2.;\n\nuniform float projectionMode;\nuniform float projectionScale;\nuniform vec4 projectionCenter;\nuniform vec3 projectionPixelsPerUnit;\n\nuniform mat4 modelMatrix;\nuniform mat4 projectionMatrix;\n\n//\n// Scaling offsets\n//\n\n// the scalar version of project_scale is for scaling the z component only\nfloat project_scale(float meters) {\n  return meters * projectionPixelsPerUnit.z;\n}\n\nvec2 project_scale(vec2 meters) {\n  return meters * projectionPixelsPerUnit.xy;\n}\n\nvec3 project_scale(vec3 meters) {\n  return vec3(\n    project_scale(meters.xy),\n    project_scale(meters.z)\n  );\n}\n\nvec4 project_scale(vec4 meters) {\n  return vec4(\n    project_scale(meters.xyz),\n    meters.w\n  );\n}\n\n//\n// Projecting positions\n//\n\n// non-linear projection: lnglats => unit tile [0-1, 0-1]\nvec2 project_mercator_(vec2 lnglat) {\n  return vec2(\n    radians(lnglat.x) + PI,\n    PI - log(tan_fp32(PI * 0.25 + radians(lnglat.y) * 0.5))\n  );\n}\n\nvec4 project_position(vec4 position) {\n\n  if (projectionMode == PROJECT_MERCATOR) {\n    return vec4(\n      project_mercator_(position.xy) * WORLD_SCALE * projectionScale,\n      project_scale(position.z),\n      position.w\n    );\n  }\n\n  // Apply model matrix\n  vec4 position_modelspace = modelMatrix * position;\n  return project_scale(position_modelspace);\n}\n\nvec3 project_position(vec3 position) {\n  vec4 projected_position = project_position(vec4(position, 1.0));\n  return projected_position.xyz;\n}\n\nvec2 project_position(vec2 position) {\n  vec4 projected_position = project_position(vec4(position, 0.0, 1.0));\n  return projected_position.xy;\n}\n\nvec4 project_to_clipspace(vec4 position) {\n  if (projectionMode == PROJECT_MERCATOR_OFFSETS) {\n    position.w *= projectionPixelsPerUnit.z;\n  }\n  return projectionMatrix * position + projectionCenter;\n}\n\n// Backwards compatibility\n\nfloat scale(float position) {\n  return project_scale(position);\n}\n\nvec2 scale(vec2 position) {\n  return project_scale(position);\n}\n\nvec3 scale(vec3 position) {\n  return project_scale(position);\n}\n\nvec4 scale(vec4 position) {\n  return project_scale(position);\n}\n\nvec2 preproject(vec2 position) {\n  return project_position(position);\n}\n\nvec3 preproject(vec3 position) {\n  return project_position(position);\n}\n\nvec4 preproject(vec4 position) {\n  return project_position(position);\n}\n\nvec4 project(vec4 position) {\n  return project_to_clipspace(position);\n}\n";
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zaGFkZXJsaWIvcHJvamVjdC9wcm9qZWN0Lmdsc2wuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoicHJvamVjdC5nbHNsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDE1IC0gMjAxNyBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG5cbmV4cG9ydCBkZWZhdWx0IGBcXFxuY29uc3QgZmxvYXQgVElMRV9TSVpFID0gNTEyLjA7XG5jb25zdCBmbG9hdCBQSSA9IDMuMTQxNTkyNjUzNjtcbmNvbnN0IGZsb2F0IFdPUkxEX1NDQUxFID0gVElMRV9TSVpFIC8gKFBJICogMi4wKTtcblxuLy8gcmVmOiBsaWIvY29uc3RhbnRzLmpzXG5jb25zdCBmbG9hdCBQUk9KRUNUX0lERU5USVRZID0gMC47XG5jb25zdCBmbG9hdCBQUk9KRUNUX01FUkNBVE9SID0gMS47XG5jb25zdCBmbG9hdCBQUk9KRUNUX01FUkNBVE9SX09GRlNFVFMgPSAyLjtcblxudW5pZm9ybSBmbG9hdCBwcm9qZWN0aW9uTW9kZTtcbnVuaWZvcm0gZmxvYXQgcHJvamVjdGlvblNjYWxlO1xudW5pZm9ybSB2ZWM0IHByb2plY3Rpb25DZW50ZXI7XG51bmlmb3JtIHZlYzMgcHJvamVjdGlvblBpeGVsc1BlclVuaXQ7XG5cbnVuaWZvcm0gbWF0NCBtb2RlbE1hdHJpeDtcbnVuaWZvcm0gbWF0NCBwcm9qZWN0aW9uTWF0cml4O1xuXG4vL1xuLy8gU2NhbGluZyBvZmZzZXRzXG4vL1xuXG4vLyB0aGUgc2NhbGFyIHZlcnNpb24gb2YgcHJvamVjdF9zY2FsZSBpcyBmb3Igc2NhbGluZyB0aGUgeiBjb21wb25lbnQgb25seVxuZmxvYXQgcHJvamVjdF9zY2FsZShmbG9hdCBtZXRlcnMpIHtcbiAgcmV0dXJuIG1ldGVycyAqIHByb2plY3Rpb25QaXhlbHNQZXJVbml0Lno7XG59XG5cbnZlYzIgcHJvamVjdF9zY2FsZSh2ZWMyIG1ldGVycykge1xuICByZXR1cm4gbWV0ZXJzICogcHJvamVjdGlvblBpeGVsc1BlclVuaXQueHk7XG59XG5cbnZlYzMgcHJvamVjdF9zY2FsZSh2ZWMzIG1ldGVycykge1xuICByZXR1cm4gdmVjMyhcbiAgICBwcm9qZWN0X3NjYWxlKG1ldGVycy54eSksXG4gICAgcHJvamVjdF9zY2FsZShtZXRlcnMueilcbiAgKTtcbn1cblxudmVjNCBwcm9qZWN0X3NjYWxlKHZlYzQgbWV0ZXJzKSB7XG4gIHJldHVybiB2ZWM0KFxuICAgIHByb2plY3Rfc2NhbGUobWV0ZXJzLnh5eiksXG4gICAgbWV0ZXJzLndcbiAgKTtcbn1cblxuLy9cbi8vIFByb2plY3RpbmcgcG9zaXRpb25zXG4vL1xuXG4vLyBub24tbGluZWFyIHByb2plY3Rpb246IGxuZ2xhdHMgPT4gdW5pdCB0aWxlIFswLTEsIDAtMV1cbnZlYzIgcHJvamVjdF9tZXJjYXRvcl8odmVjMiBsbmdsYXQpIHtcbiAgcmV0dXJuIHZlYzIoXG4gICAgcmFkaWFucyhsbmdsYXQueCkgKyBQSSxcbiAgICBQSSAtIGxvZyh0YW5fZnAzMihQSSAqIDAuMjUgKyByYWRpYW5zKGxuZ2xhdC55KSAqIDAuNSkpXG4gICk7XG59XG5cbnZlYzQgcHJvamVjdF9wb3NpdGlvbih2ZWM0IHBvc2l0aW9uKSB7XG5cbiAgaWYgKHByb2plY3Rpb25Nb2RlID09IFBST0pFQ1RfTUVSQ0FUT1IpIHtcbiAgICByZXR1cm4gdmVjNChcbiAgICAgIHByb2plY3RfbWVyY2F0b3JfKHBvc2l0aW9uLnh5KSAqIFdPUkxEX1NDQUxFICogcHJvamVjdGlvblNjYWxlLFxuICAgICAgcHJvamVjdF9zY2FsZShwb3NpdGlvbi56KSxcbiAgICAgIHBvc2l0aW9uLndcbiAgICApO1xuICB9XG5cbiAgLy8gQXBwbHkgbW9kZWwgbWF0cml4XG4gIHZlYzQgcG9zaXRpb25fbW9kZWxzcGFjZSA9IG1vZGVsTWF0cml4ICogcG9zaXRpb247XG4gIHJldHVybiBwcm9qZWN0X3NjYWxlKHBvc2l0aW9uX21vZGVsc3BhY2UpO1xufVxuXG52ZWMzIHByb2plY3RfcG9zaXRpb24odmVjMyBwb3NpdGlvbikge1xuICB2ZWM0IHByb2plY3RlZF9wb3NpdGlvbiA9IHByb2plY3RfcG9zaXRpb24odmVjNChwb3NpdGlvbiwgMS4wKSk7XG4gIHJldHVybiBwcm9qZWN0ZWRfcG9zaXRpb24ueHl6O1xufVxuXG52ZWMyIHByb2plY3RfcG9zaXRpb24odmVjMiBwb3NpdGlvbikge1xuICB2ZWM0IHByb2plY3RlZF9wb3NpdGlvbiA9IHByb2plY3RfcG9zaXRpb24odmVjNChwb3NpdGlvbiwgMC4wLCAxLjApKTtcbiAgcmV0dXJuIHByb2plY3RlZF9wb3NpdGlvbi54eTtcbn1cblxudmVjNCBwcm9qZWN0X3RvX2NsaXBzcGFjZSh2ZWM0IHBvc2l0aW9uKSB7XG4gIGlmIChwcm9qZWN0aW9uTW9kZSA9PSBQUk9KRUNUX01FUkNBVE9SX09GRlNFVFMpIHtcbiAgICBwb3NpdGlvbi53ICo9IHByb2plY3Rpb25QaXhlbHNQZXJVbml0Lno7XG4gIH1cbiAgcmV0dXJuIHByb2plY3Rpb25NYXRyaXggKiBwb3NpdGlvbiArIHByb2plY3Rpb25DZW50ZXI7XG59XG5cbi8vIEJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG5cbmZsb2F0IHNjYWxlKGZsb2F0IHBvc2l0aW9uKSB7XG4gIHJldHVybiBwcm9qZWN0X3NjYWxlKHBvc2l0aW9uKTtcbn1cblxudmVjMiBzY2FsZSh2ZWMyIHBvc2l0aW9uKSB7XG4gIHJldHVybiBwcm9qZWN0X3NjYWxlKHBvc2l0aW9uKTtcbn1cblxudmVjMyBzY2FsZSh2ZWMzIHBvc2l0aW9uKSB7XG4gIHJldHVybiBwcm9qZWN0X3NjYWxlKHBvc2l0aW9uKTtcbn1cblxudmVjNCBzY2FsZSh2ZWM0IHBvc2l0aW9uKSB7XG4gIHJldHVybiBwcm9qZWN0X3NjYWxlKHBvc2l0aW9uKTtcbn1cblxudmVjMiBwcmVwcm9qZWN0KHZlYzIgcG9zaXRpb24pIHtcbiAgcmV0dXJuIHByb2plY3RfcG9zaXRpb24ocG9zaXRpb24pO1xufVxuXG52ZWMzIHByZXByb2plY3QodmVjMyBwb3NpdGlvbikge1xuICByZXR1cm4gcHJvamVjdF9wb3NpdGlvbihwb3NpdGlvbik7XG59XG5cbnZlYzQgcHJlcHJvamVjdCh2ZWM0IHBvc2l0aW9uKSB7XG4gIHJldHVybiBwcm9qZWN0X3Bvc2l0aW9uKHBvc2l0aW9uKTtcbn1cblxudmVjNCBwcm9qZWN0KHZlYzQgcG9zaXRpb24pIHtcbiAgcmV0dXJuIHByb2plY3RfdG9fY2xpcHNwYWNlKHBvc2l0aW9uKTtcbn1cbmA7XG4iXX0=