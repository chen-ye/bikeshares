'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } // Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/* eslint-disable no-console */
/* global console */


var cache = {};

function formatArgs(firstArg) {
  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  if (typeof firstArg === 'string') {
    args.unshift('deck.gl ' + firstArg);
  } else {
    args.unshift(firstArg);
    args.unshift('deck.gl');
  }
  return args;
}

function log(priority, arg) {
  for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
    args[_key2 - 2] = arguments[_key2];
  }

  (0, _assert2.default)(Number.isFinite(priority), 'log priority must be a number');
  if (priority <= log.priority) {
    // Node doesn't have console.debug, but using it looks better in browser consoles
    args = formatArgs.apply(undefined, [arg].concat(_toConsumableArray(args)));
    if (console.debug) {
      var _console;

      (_console = console).debug.apply(_console, _toConsumableArray(args));
    } else {
      var _console2;

      (_console2 = console).info.apply(_console2, _toConsumableArray(args));
    }
  }
}

function once(priority, arg) {
  if (!cache[arg] && priority <= log.priority) {
    var _console3;

    for (var _len3 = arguments.length, args = Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
      args[_key3 - 2] = arguments[_key3];
    }

    (_console3 = console).warn.apply(_console3, _toConsumableArray(formatArgs.apply(undefined, [arg].concat(args))));
    cache[arg] = true;
  }
}

// Logs a message with a time
function time(priority, label) {
  (0, _assert2.default)(Number.isFinite(priority), 'log priority must be a number');
  if (priority <= log.priority) {
    // In case the platform doesn't have console.time
    if (console.time) {
      console.time(label);
    } else {
      console.info(label);
    }
  }
}

function timeEnd(priority, label) {
  (0, _assert2.default)(Number.isFinite(priority), 'log priority must be a number');
  if (priority <= log.priority) {
    // In case the platform doesn't have console.timeEnd
    if (console.timeEnd) {
      console.timeEnd(label);
    } else {
      console.info(label);
    }
  }
}

log.priority = 0;
log.log = log;
log.once = once;
log.time = time;
log.timeEnd = timeEnd;

exports.default = log;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvdXRpbHMvbG9nLmpzIl0sIm5hbWVzIjpbImNhY2hlIiwiZm9ybWF0QXJncyIsImZpcnN0QXJnIiwiYXJncyIsInVuc2hpZnQiLCJsb2ciLCJwcmlvcml0eSIsImFyZyIsIk51bWJlciIsImlzRmluaXRlIiwiY29uc29sZSIsImRlYnVnIiwiaW5mbyIsIm9uY2UiLCJ3YXJuIiwidGltZSIsImxhYmVsIiwidGltZUVuZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBc0JBOzs7Ozs7b01BdEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7OztBQUdBLElBQU1BLFFBQVEsRUFBZDs7QUFFQSxTQUFTQyxVQUFULENBQW9CQyxRQUFwQixFQUF1QztBQUFBLG9DQUFOQyxJQUFNO0FBQU5BLFFBQU07QUFBQTs7QUFDckMsTUFBSSxPQUFPRCxRQUFQLEtBQW9CLFFBQXhCLEVBQWtDO0FBQ2hDQyxTQUFLQyxPQUFMLGNBQXdCRixRQUF4QjtBQUNELEdBRkQsTUFFTztBQUNMQyxTQUFLQyxPQUFMLENBQWFGLFFBQWI7QUFDQUMsU0FBS0MsT0FBTCxDQUFhLFNBQWI7QUFDRDtBQUNELFNBQU9ELElBQVA7QUFDRDs7QUFFRCxTQUFTRSxHQUFULENBQWFDLFFBQWIsRUFBdUJDLEdBQXZCLEVBQXFDO0FBQUEscUNBQU5KLElBQU07QUFBTkEsUUFBTTtBQUFBOztBQUNuQyx3QkFBT0ssT0FBT0MsUUFBUCxDQUFnQkgsUUFBaEIsQ0FBUCxFQUFrQywrQkFBbEM7QUFDQSxNQUFJQSxZQUFZRCxJQUFJQyxRQUFwQixFQUE4QjtBQUM1QjtBQUNBSCxXQUFPRiw2QkFBV00sR0FBWCw0QkFBbUJKLElBQW5CLEdBQVA7QUFDQSxRQUFJTyxRQUFRQyxLQUFaLEVBQW1CO0FBQUE7O0FBQ2pCLDJCQUFRQSxLQUFSLG9DQUFpQlIsSUFBakI7QUFDRCxLQUZELE1BRU87QUFBQTs7QUFDTCw0QkFBUVMsSUFBUixxQ0FBZ0JULElBQWhCO0FBQ0Q7QUFDRjtBQUNGOztBQUVELFNBQVNVLElBQVQsQ0FBY1AsUUFBZCxFQUF3QkMsR0FBeEIsRUFBc0M7QUFDcEMsTUFBSSxDQUFDUCxNQUFNTyxHQUFOLENBQUQsSUFBZUQsWUFBWUQsSUFBSUMsUUFBbkMsRUFBNkM7QUFBQTs7QUFBQSx1Q0FEZkgsSUFDZTtBQURmQSxVQUNlO0FBQUE7O0FBQzNDLDBCQUFRVyxJQUFSLHFDQUFnQmIsNkJBQVdNLEdBQVgsU0FBbUJKLElBQW5CLEVBQWhCO0FBQ0FILFVBQU1PLEdBQU4sSUFBYSxJQUFiO0FBQ0Q7QUFDRjs7QUFFRDtBQUNBLFNBQVNRLElBQVQsQ0FBY1QsUUFBZCxFQUF3QlUsS0FBeEIsRUFBK0I7QUFDN0Isd0JBQU9SLE9BQU9DLFFBQVAsQ0FBZ0JILFFBQWhCLENBQVAsRUFBa0MsK0JBQWxDO0FBQ0EsTUFBSUEsWUFBWUQsSUFBSUMsUUFBcEIsRUFBOEI7QUFDNUI7QUFDQSxRQUFJSSxRQUFRSyxJQUFaLEVBQWtCO0FBQ2hCTCxjQUFRSyxJQUFSLENBQWFDLEtBQWI7QUFDRCxLQUZELE1BRU87QUFDTE4sY0FBUUUsSUFBUixDQUFhSSxLQUFiO0FBQ0Q7QUFDRjtBQUNGOztBQUVELFNBQVNDLE9BQVQsQ0FBaUJYLFFBQWpCLEVBQTJCVSxLQUEzQixFQUFrQztBQUNoQyx3QkFBT1IsT0FBT0MsUUFBUCxDQUFnQkgsUUFBaEIsQ0FBUCxFQUFrQywrQkFBbEM7QUFDQSxNQUFJQSxZQUFZRCxJQUFJQyxRQUFwQixFQUE4QjtBQUM1QjtBQUNBLFFBQUlJLFFBQVFPLE9BQVosRUFBcUI7QUFDbkJQLGNBQVFPLE9BQVIsQ0FBZ0JELEtBQWhCO0FBQ0QsS0FGRCxNQUVPO0FBQ0xOLGNBQVFFLElBQVIsQ0FBYUksS0FBYjtBQUNEO0FBQ0Y7QUFDRjs7QUFFRFgsSUFBSUMsUUFBSixHQUFlLENBQWY7QUFDQUQsSUFBSUEsR0FBSixHQUFVQSxHQUFWO0FBQ0FBLElBQUlRLElBQUosR0FBV0EsSUFBWDtBQUNBUixJQUFJVSxJQUFKLEdBQVdBLElBQVg7QUFDQVYsSUFBSVksT0FBSixHQUFjQSxPQUFkOztrQkFFZVosRyIsImZpbGUiOiJsb2cuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMTUgLSAyMDE3IFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cblxuLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuLyogZ2xvYmFsIGNvbnNvbGUgKi9cbmltcG9ydCBhc3NlcnQgZnJvbSAnYXNzZXJ0JztcblxuY29uc3QgY2FjaGUgPSB7fTtcblxuZnVuY3Rpb24gZm9ybWF0QXJncyhmaXJzdEFyZywgLi4uYXJncykge1xuICBpZiAodHlwZW9mIGZpcnN0QXJnID09PSAnc3RyaW5nJykge1xuICAgIGFyZ3MudW5zaGlmdChgZGVjay5nbCAke2ZpcnN0QXJnfWApO1xuICB9IGVsc2Uge1xuICAgIGFyZ3MudW5zaGlmdChmaXJzdEFyZyk7XG4gICAgYXJncy51bnNoaWZ0KCdkZWNrLmdsJyk7XG4gIH1cbiAgcmV0dXJuIGFyZ3M7XG59XG5cbmZ1bmN0aW9uIGxvZyhwcmlvcml0eSwgYXJnLCAuLi5hcmdzKSB7XG4gIGFzc2VydChOdW1iZXIuaXNGaW5pdGUocHJpb3JpdHkpLCAnbG9nIHByaW9yaXR5IG11c3QgYmUgYSBudW1iZXInKTtcbiAgaWYgKHByaW9yaXR5IDw9IGxvZy5wcmlvcml0eSkge1xuICAgIC8vIE5vZGUgZG9lc24ndCBoYXZlIGNvbnNvbGUuZGVidWcsIGJ1dCB1c2luZyBpdCBsb29rcyBiZXR0ZXIgaW4gYnJvd3NlciBjb25zb2xlc1xuICAgIGFyZ3MgPSBmb3JtYXRBcmdzKGFyZywgLi4uYXJncyk7XG4gICAgaWYgKGNvbnNvbGUuZGVidWcpIHtcbiAgICAgIGNvbnNvbGUuZGVidWcoLi4uYXJncyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUuaW5mbyguLi5hcmdzKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gb25jZShwcmlvcml0eSwgYXJnLCAuLi5hcmdzKSB7XG4gIGlmICghY2FjaGVbYXJnXSAmJiBwcmlvcml0eSA8PSBsb2cucHJpb3JpdHkpIHtcbiAgICBjb25zb2xlLndhcm4oLi4uZm9ybWF0QXJncyhhcmcsIC4uLmFyZ3MpKTtcbiAgICBjYWNoZVthcmddID0gdHJ1ZTtcbiAgfVxufVxuXG4vLyBMb2dzIGEgbWVzc2FnZSB3aXRoIGEgdGltZVxuZnVuY3Rpb24gdGltZShwcmlvcml0eSwgbGFiZWwpIHtcbiAgYXNzZXJ0KE51bWJlci5pc0Zpbml0ZShwcmlvcml0eSksICdsb2cgcHJpb3JpdHkgbXVzdCBiZSBhIG51bWJlcicpO1xuICBpZiAocHJpb3JpdHkgPD0gbG9nLnByaW9yaXR5KSB7XG4gICAgLy8gSW4gY2FzZSB0aGUgcGxhdGZvcm0gZG9lc24ndCBoYXZlIGNvbnNvbGUudGltZVxuICAgIGlmIChjb25zb2xlLnRpbWUpIHtcbiAgICAgIGNvbnNvbGUudGltZShsYWJlbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUuaW5mbyhsYWJlbCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHRpbWVFbmQocHJpb3JpdHksIGxhYmVsKSB7XG4gIGFzc2VydChOdW1iZXIuaXNGaW5pdGUocHJpb3JpdHkpLCAnbG9nIHByaW9yaXR5IG11c3QgYmUgYSBudW1iZXInKTtcbiAgaWYgKHByaW9yaXR5IDw9IGxvZy5wcmlvcml0eSkge1xuICAgIC8vIEluIGNhc2UgdGhlIHBsYXRmb3JtIGRvZXNuJ3QgaGF2ZSBjb25zb2xlLnRpbWVFbmRcbiAgICBpZiAoY29uc29sZS50aW1lRW5kKSB7XG4gICAgICBjb25zb2xlLnRpbWVFbmQobGFiZWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmluZm8obGFiZWwpO1xuICAgIH1cbiAgfVxufVxuXG5sb2cucHJpb3JpdHkgPSAwO1xubG9nLmxvZyA9IGxvZztcbmxvZy5vbmNlID0gb25jZTtcbmxvZy50aW1lID0gdGltZTtcbmxvZy50aW1lRW5kID0gdGltZUVuZDtcblxuZXhwb3J0IGRlZmF1bHQgbG9nO1xuIl19