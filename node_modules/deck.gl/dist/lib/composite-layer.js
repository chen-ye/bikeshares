'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _layer = require('./layer');

var _layer2 = _interopRequireDefault(_layer);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

var CompositeLayer = function (_Layer) {
  _inherits(CompositeLayer, _Layer);

  function CompositeLayer(props) {
    _classCallCheck(this, CompositeLayer);

    return _possibleConstructorReturn(this, (CompositeLayer.__proto__ || Object.getPrototypeOf(CompositeLayer)).call(this, props));
  }

  _createClass(CompositeLayer, [{
    key: 'initializeState',


    // initializeState is usually not needed for composite layers
    // Provide empty definition to disable check for missing definition
    value: function initializeState() {}

    // No-op for the invalidateAttribute function as the composite
    // layer has no AttributeManager

  }, {
    key: 'invalidateAttribute',
    value: function invalidateAttribute() {}

    // called to augment the info object that is bubbled up from a sublayer
    // override Layer.getPickingInfo() because decoding / setting uniform do
    // not apply to a composite layer.
    // @return null to cancel event

  }, {
    key: 'getPickingInfo',
    value: function getPickingInfo(_ref) {
      var info = _ref.info;

      return info;
    }

    // Implement to generate sublayers

  }, {
    key: 'renderLayers',
    value: function renderLayers() {
      return null;
    }

    // Returns props that should be forwarded to children
    // TODO - implement autoforwarding?

  }, {
    key: 'getForwardProps',
    value: function getForwardProps() {
      var _props = this.props,
          opacity = _props.opacity,
          pickable = _props.pickable,
          visible = _props.visible,
          parameters = _props.parameters,
          getPolygonOffset = _props.getPolygonOffset,
          highlightedObjectIndex = _props.highlightedObjectIndex,
          autoHighlight = _props.autoHighlight,
          highlightColor = _props.highlightColor,
          coordinateSystem = _props.coordinateSystem,
          coordinateOrigin = _props.coordinateOrigin,
          modelMatrix = _props.modelMatrix;


      return {
        // Forward layer props
        opacity: opacity, pickable: pickable, visible: visible, parameters: parameters, getPolygonOffset: getPolygonOffset,
        highlightedObjectIndex: highlightedObjectIndex, autoHighlight: autoHighlight, highlightColor: highlightColor,
        coordinateSystem: coordinateSystem, coordinateOrigin: coordinateOrigin, modelMatrix: modelMatrix
      };
    }
  }, {
    key: '_renderLayers',
    value: function _renderLayers(updateParams) {
      if (!this.shouldUpdateState(updateParams)) {
        _utils.log.log(2, 'Composite layer reusing sublayers', this.state.oldSubLayers);
        return this.state.oldSubLayers;
      }
      var subLayers = this.renderLayers();
      this.state.oldSubLayers = subLayers;
      _utils.log.log(2, 'Composite layer saving sublayers', this.state.oldSubLayers);
      return subLayers;
    }
  }, {
    key: 'isComposite',
    get: function get() {
      return true;
    }
  }]);

  return CompositeLayer;
}(_layer2.default);

exports.default = CompositeLayer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvY29tcG9zaXRlLWxheWVyLmpzIl0sIm5hbWVzIjpbIkNvbXBvc2l0ZUxheWVyIiwicHJvcHMiLCJpbmZvIiwib3BhY2l0eSIsInBpY2thYmxlIiwidmlzaWJsZSIsInBhcmFtZXRlcnMiLCJnZXRQb2x5Z29uT2Zmc2V0IiwiaGlnaGxpZ2h0ZWRPYmplY3RJbmRleCIsImF1dG9IaWdobGlnaHQiLCJoaWdobGlnaHRDb2xvciIsImNvb3JkaW5hdGVTeXN0ZW0iLCJjb29yZGluYXRlT3JpZ2luIiwibW9kZWxNYXRyaXgiLCJ1cGRhdGVQYXJhbXMiLCJzaG91bGRVcGRhdGVTdGF0ZSIsImxvZyIsInN0YXRlIiwib2xkU3ViTGF5ZXJzIiwic3ViTGF5ZXJzIiwicmVuZGVyTGF5ZXJzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQW9CQTs7OztBQUNBOzs7Ozs7OzsrZUFyQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0lBS3FCQSxjOzs7QUFDbkIsMEJBQVlDLEtBQVosRUFBbUI7QUFBQTs7QUFBQSwySEFDWEEsS0FEVztBQUVsQjs7Ozs7O0FBTUQ7QUFDQTtzQ0FDa0IsQ0FDakI7O0FBRUQ7QUFDQTs7OzswQ0FDc0IsQ0FDckI7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7Ozs7eUNBQ3VCO0FBQUEsVUFBUEMsSUFBTyxRQUFQQSxJQUFPOztBQUNyQixhQUFPQSxJQUFQO0FBQ0Q7O0FBRUQ7Ozs7bUNBQ2U7QUFDYixhQUFPLElBQVA7QUFDRDs7QUFFRDtBQUNBOzs7O3NDQUNrQjtBQUFBLG1CQU9aLEtBQUtELEtBUE87QUFBQSxVQUdkRSxPQUhjLFVBR2RBLE9BSGM7QUFBQSxVQUdMQyxRQUhLLFVBR0xBLFFBSEs7QUFBQSxVQUdLQyxPQUhMLFVBR0tBLE9BSEw7QUFBQSxVQUdjQyxVQUhkLFVBR2NBLFVBSGQ7QUFBQSxVQUcwQkMsZ0JBSDFCLFVBRzBCQSxnQkFIMUI7QUFBQSxVQUlkQyxzQkFKYyxVQUlkQSxzQkFKYztBQUFBLFVBSVVDLGFBSlYsVUFJVUEsYUFKVjtBQUFBLFVBSXlCQyxjQUp6QixVQUl5QkEsY0FKekI7QUFBQSxVQU1kQyxnQkFOYyxVQU1kQSxnQkFOYztBQUFBLFVBTUlDLGdCQU5KLFVBTUlBLGdCQU5KO0FBQUEsVUFNc0JDLFdBTnRCLFVBTXNCQSxXQU50Qjs7O0FBU2hCLGFBQU87QUFDTDtBQUNBVix3QkFGSyxFQUVJQyxrQkFGSixFQUVjQyxnQkFGZCxFQUV1QkMsc0JBRnZCLEVBRW1DQyxrQ0FGbkM7QUFHTEMsc0RBSEssRUFHbUJDLDRCQUhuQixFQUdrQ0MsOEJBSGxDO0FBSUxDLDBDQUpLLEVBSWFDLGtDQUpiLEVBSStCQztBQUovQixPQUFQO0FBTUQ7OztrQ0FFYUMsWSxFQUFjO0FBQzFCLFVBQUksQ0FBQyxLQUFLQyxpQkFBTCxDQUF1QkQsWUFBdkIsQ0FBTCxFQUEyQztBQUN6QyxtQkFBSUUsR0FBSixDQUFRLENBQVIsRUFBVyxtQ0FBWCxFQUFnRCxLQUFLQyxLQUFMLENBQVdDLFlBQTNEO0FBQ0EsZUFBTyxLQUFLRCxLQUFMLENBQVdDLFlBQWxCO0FBQ0Q7QUFDRCxVQUFNQyxZQUFZLEtBQUtDLFlBQUwsRUFBbEI7QUFDQSxXQUFLSCxLQUFMLENBQVdDLFlBQVgsR0FBMEJDLFNBQTFCO0FBQ0EsaUJBQUlILEdBQUosQ0FBUSxDQUFSLEVBQVcsa0NBQVgsRUFBK0MsS0FBS0MsS0FBTCxDQUFXQyxZQUExRDtBQUNBLGFBQU9DLFNBQVA7QUFDRDs7O3dCQXZEaUI7QUFDaEIsYUFBTyxJQUFQO0FBQ0Q7Ozs7OztrQkFQa0JuQixjIiwiZmlsZSI6ImNvbXBvc2l0ZS1sYXllci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgMjAxNSAtIDIwMTcgVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuXG5pbXBvcnQgTGF5ZXIgZnJvbSAnLi9sYXllcic7XG5pbXBvcnQge2xvZ30gZnJvbSAnLi91dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbXBvc2l0ZUxheWVyIGV4dGVuZHMgTGF5ZXIge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgfVxuXG4gIGdldCBpc0NvbXBvc2l0ZSgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIGluaXRpYWxpemVTdGF0ZSBpcyB1c3VhbGx5IG5vdCBuZWVkZWQgZm9yIGNvbXBvc2l0ZSBsYXllcnNcbiAgLy8gUHJvdmlkZSBlbXB0eSBkZWZpbml0aW9uIHRvIGRpc2FibGUgY2hlY2sgZm9yIG1pc3NpbmcgZGVmaW5pdGlvblxuICBpbml0aWFsaXplU3RhdGUoKSB7XG4gIH1cblxuICAvLyBOby1vcCBmb3IgdGhlIGludmFsaWRhdGVBdHRyaWJ1dGUgZnVuY3Rpb24gYXMgdGhlIGNvbXBvc2l0ZVxuICAvLyBsYXllciBoYXMgbm8gQXR0cmlidXRlTWFuYWdlclxuICBpbnZhbGlkYXRlQXR0cmlidXRlKCkge1xuICB9XG5cbiAgLy8gY2FsbGVkIHRvIGF1Z21lbnQgdGhlIGluZm8gb2JqZWN0IHRoYXQgaXMgYnViYmxlZCB1cCBmcm9tIGEgc3VibGF5ZXJcbiAgLy8gb3ZlcnJpZGUgTGF5ZXIuZ2V0UGlja2luZ0luZm8oKSBiZWNhdXNlIGRlY29kaW5nIC8gc2V0dGluZyB1bmlmb3JtIGRvXG4gIC8vIG5vdCBhcHBseSB0byBhIGNvbXBvc2l0ZSBsYXllci5cbiAgLy8gQHJldHVybiBudWxsIHRvIGNhbmNlbCBldmVudFxuICBnZXRQaWNraW5nSW5mbyh7aW5mb30pIHtcbiAgICByZXR1cm4gaW5mbztcbiAgfVxuXG4gIC8vIEltcGxlbWVudCB0byBnZW5lcmF0ZSBzdWJsYXllcnNcbiAgcmVuZGVyTGF5ZXJzKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLy8gUmV0dXJucyBwcm9wcyB0aGF0IHNob3VsZCBiZSBmb3J3YXJkZWQgdG8gY2hpbGRyZW5cbiAgLy8gVE9ETyAtIGltcGxlbWVudCBhdXRvZm9yd2FyZGluZz9cbiAgZ2V0Rm9yd2FyZFByb3BzKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIC8vIGJhc2UgbGF5ZXIgcHJvcHNcbiAgICAgIG9wYWNpdHksIHBpY2thYmxlLCB2aXNpYmxlLCBwYXJhbWV0ZXJzLCBnZXRQb2x5Z29uT2Zmc2V0LFxuICAgICAgaGlnaGxpZ2h0ZWRPYmplY3RJbmRleCwgYXV0b0hpZ2hsaWdodCwgaGlnaGxpZ2h0Q29sb3IsXG4gICAgICAvLyB2aWV3cG9ydCBwcm9wc1xuICAgICAgY29vcmRpbmF0ZVN5c3RlbSwgY29vcmRpbmF0ZU9yaWdpbiwgbW9kZWxNYXRyaXhcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIHJldHVybiB7XG4gICAgICAvLyBGb3J3YXJkIGxheWVyIHByb3BzXG4gICAgICBvcGFjaXR5LCBwaWNrYWJsZSwgdmlzaWJsZSwgcGFyYW1ldGVycywgZ2V0UG9seWdvbk9mZnNldCxcbiAgICAgIGhpZ2hsaWdodGVkT2JqZWN0SW5kZXgsIGF1dG9IaWdobGlnaHQsIGhpZ2hsaWdodENvbG9yLFxuICAgICAgY29vcmRpbmF0ZVN5c3RlbSwgY29vcmRpbmF0ZU9yaWdpbiwgbW9kZWxNYXRyaXhcbiAgICB9O1xuICB9XG5cbiAgX3JlbmRlckxheWVycyh1cGRhdGVQYXJhbXMpIHtcbiAgICBpZiAoIXRoaXMuc2hvdWxkVXBkYXRlU3RhdGUodXBkYXRlUGFyYW1zKSkge1xuICAgICAgbG9nLmxvZygyLCAnQ29tcG9zaXRlIGxheWVyIHJldXNpbmcgc3VibGF5ZXJzJywgdGhpcy5zdGF0ZS5vbGRTdWJMYXllcnMpO1xuICAgICAgcmV0dXJuIHRoaXMuc3RhdGUub2xkU3ViTGF5ZXJzO1xuICAgIH1cbiAgICBjb25zdCBzdWJMYXllcnMgPSB0aGlzLnJlbmRlckxheWVycygpO1xuICAgIHRoaXMuc3RhdGUub2xkU3ViTGF5ZXJzID0gc3ViTGF5ZXJzO1xuICAgIGxvZy5sb2coMiwgJ0NvbXBvc2l0ZSBsYXllciBzYXZpbmcgc3VibGF5ZXJzJywgdGhpcy5zdGF0ZS5vbGRTdWJMYXllcnMpO1xuICAgIHJldHVybiBzdWJMYXllcnM7XG4gIH1cbn1cbiJdfQ==