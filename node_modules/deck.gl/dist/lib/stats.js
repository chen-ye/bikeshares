"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.formatTime = formatTime;
exports.leftPad = leftPad;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Stats = function () {
  function Stats(_ref) {
    var id = _ref.id;

    _classCallCheck(this, Stats);

    this.id = id;
    this.time = 0;
    this.total = 0;
    this.average = 0;
    this.count = 0;

    this._time = 0;
  }

  _createClass(Stats, [{
    key: "timeStart",
    value: function timeStart() {
      this._time = this.timestampMs();
    }
  }, {
    key: "timeEnd",
    value: function timeEnd() {
      this.time = this.timestampMs() - this._time;
      this.total += this.time;
      this.count++;
      this.average = this.total / this.count;
    }
  }, {
    key: "timestampMs",
    value: function timestampMs() {
      /* global window */
      return (typeof window === "undefined" ? "undefined" : _typeof(window)) !== undefined && window.performance ? window.performance.now() : Date.now();
    }
  }, {
    key: "getTimeString",
    value: function getTimeString() {
      return this.id + ":" + formatTime(this.time) + "(" + this.count + ")";
    }
  }]);

  return Stats;
}();

// TODO: Currently unused, keeping in case we want it later for log formatting


exports.default = Stats;
function formatTime(ms) {
  var formatted = void 0;
  if (ms < 10) {
    formatted = ms.toFixed(2) + "ms";
  } else if (ms < 100) {
    formatted = ms.toFixed(1) + "ms";
  } else if (ms < 1000) {
    formatted = ms.toFixed(0) + "ms";
  } else {
    formatted = (ms / 1000).toFixed(2) + "s";
  }
  return formatted;
}

function leftPad(string) {
  var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;

  while (string.length < length) {
    string = " " + string;
  }
  return string;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvc3RhdHMuanMiXSwibmFtZXMiOlsiZm9ybWF0VGltZSIsImxlZnRQYWQiLCJTdGF0cyIsImlkIiwidGltZSIsInRvdGFsIiwiYXZlcmFnZSIsImNvdW50IiwiX3RpbWUiLCJ0aW1lc3RhbXBNcyIsIndpbmRvdyIsInVuZGVmaW5lZCIsInBlcmZvcm1hbmNlIiwibm93IiwiRGF0ZSIsIm1zIiwiZm9ybWF0dGVkIiwidG9GaXhlZCIsInN0cmluZyIsImxlbmd0aCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztRQW9DZ0JBLFUsR0FBQUEsVTtRQWNBQyxPLEdBQUFBLE87Ozs7SUFqREtDLEs7QUFDbkIsdUJBQWtCO0FBQUEsUUFBTEMsRUFBSyxRQUFMQSxFQUFLOztBQUFBOztBQUNoQixTQUFLQSxFQUFMLEdBQVVBLEVBQVY7QUFDQSxTQUFLQyxJQUFMLEdBQVksQ0FBWjtBQUNBLFNBQUtDLEtBQUwsR0FBYSxDQUFiO0FBQ0EsU0FBS0MsT0FBTCxHQUFlLENBQWY7QUFDQSxTQUFLQyxLQUFMLEdBQWEsQ0FBYjs7QUFFQSxTQUFLQyxLQUFMLEdBQWEsQ0FBYjtBQUNEOzs7O2dDQUVXO0FBQ1YsV0FBS0EsS0FBTCxHQUFhLEtBQUtDLFdBQUwsRUFBYjtBQUNEOzs7OEJBRVM7QUFDUixXQUFLTCxJQUFMLEdBQVksS0FBS0ssV0FBTCxLQUFxQixLQUFLRCxLQUF0QztBQUNBLFdBQUtILEtBQUwsSUFBYyxLQUFLRCxJQUFuQjtBQUNBLFdBQUtHLEtBQUw7QUFDQSxXQUFLRCxPQUFMLEdBQWUsS0FBS0QsS0FBTCxHQUFhLEtBQUtFLEtBQWpDO0FBQ0Q7OztrQ0FFYTtBQUNaO0FBQ0EsYUFBTyxRQUFPRyxNQUFQLHlDQUFPQSxNQUFQLE9BQWtCQyxTQUFsQixJQUErQkQsT0FBT0UsV0FBdEMsR0FDTEYsT0FBT0UsV0FBUCxDQUFtQkMsR0FBbkIsRUFESyxHQUVMQyxLQUFLRCxHQUFMLEVBRkY7QUFHRDs7O29DQUVlO0FBQ2QsYUFBVSxLQUFLVixFQUFmLFNBQXFCSCxXQUFXLEtBQUtJLElBQWhCLENBQXJCLFNBQThDLEtBQUtHLEtBQW5EO0FBQ0Q7Ozs7OztBQUdIOzs7a0JBbENxQkwsSztBQW1DZCxTQUFTRixVQUFULENBQW9CZSxFQUFwQixFQUF3QjtBQUM3QixNQUFJQyxrQkFBSjtBQUNBLE1BQUlELEtBQUssRUFBVCxFQUFhO0FBQ1hDLGdCQUFlRCxHQUFHRSxPQUFILENBQVcsQ0FBWCxDQUFmO0FBQ0QsR0FGRCxNQUVPLElBQUlGLEtBQUssR0FBVCxFQUFjO0FBQ25CQyxnQkFBZUQsR0FBR0UsT0FBSCxDQUFXLENBQVgsQ0FBZjtBQUNELEdBRk0sTUFFQSxJQUFJRixLQUFLLElBQVQsRUFBZTtBQUNwQkMsZ0JBQWVELEdBQUdFLE9BQUgsQ0FBVyxDQUFYLENBQWY7QUFDRCxHQUZNLE1BRUE7QUFDTEQsZ0JBQWUsQ0FBQ0QsS0FBSyxJQUFOLEVBQVlFLE9BQVosQ0FBb0IsQ0FBcEIsQ0FBZjtBQUNEO0FBQ0QsU0FBT0QsU0FBUDtBQUNEOztBQUVNLFNBQVNmLE9BQVQsQ0FBaUJpQixNQUFqQixFQUFxQztBQUFBLE1BQVpDLE1BQVksdUVBQUgsQ0FBRzs7QUFDMUMsU0FBT0QsT0FBT0MsTUFBUCxHQUFnQkEsTUFBdkIsRUFBK0I7QUFDN0JELG1CQUFhQSxNQUFiO0FBQ0Q7QUFDRCxTQUFPQSxNQUFQO0FBQ0QiLCJmaWxlIjoic3RhdHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN0YXRzIHtcbiAgY29uc3RydWN0b3Ioe2lkfSkge1xuICAgIHRoaXMuaWQgPSBpZDtcbiAgICB0aGlzLnRpbWUgPSAwO1xuICAgIHRoaXMudG90YWwgPSAwO1xuICAgIHRoaXMuYXZlcmFnZSA9IDA7XG4gICAgdGhpcy5jb3VudCA9IDA7XG5cbiAgICB0aGlzLl90aW1lID0gMDtcbiAgfVxuXG4gIHRpbWVTdGFydCgpIHtcbiAgICB0aGlzLl90aW1lID0gdGhpcy50aW1lc3RhbXBNcygpO1xuICB9XG5cbiAgdGltZUVuZCgpIHtcbiAgICB0aGlzLnRpbWUgPSB0aGlzLnRpbWVzdGFtcE1zKCkgLSB0aGlzLl90aW1lO1xuICAgIHRoaXMudG90YWwgKz0gdGhpcy50aW1lO1xuICAgIHRoaXMuY291bnQrKztcbiAgICB0aGlzLmF2ZXJhZ2UgPSB0aGlzLnRvdGFsIC8gdGhpcy5jb3VudDtcbiAgfVxuXG4gIHRpbWVzdGFtcE1zKCkge1xuICAgIC8qIGdsb2JhbCB3aW5kb3cgKi9cbiAgICByZXR1cm4gdHlwZW9mIHdpbmRvdyAhPT0gdW5kZWZpbmVkICYmIHdpbmRvdy5wZXJmb3JtYW5jZSA/XG4gICAgICB3aW5kb3cucGVyZm9ybWFuY2Uubm93KCkgOlxuICAgICAgRGF0ZS5ub3coKTtcbiAgfVxuXG4gIGdldFRpbWVTdHJpbmcoKSB7XG4gICAgcmV0dXJuIGAke3RoaXMuaWR9OiR7Zm9ybWF0VGltZSh0aGlzLnRpbWUpfSgke3RoaXMuY291bnR9KWA7XG4gIH1cbn1cblxuLy8gVE9ETzogQ3VycmVudGx5IHVudXNlZCwga2VlcGluZyBpbiBjYXNlIHdlIHdhbnQgaXQgbGF0ZXIgZm9yIGxvZyBmb3JtYXR0aW5nXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0VGltZShtcykge1xuICBsZXQgZm9ybWF0dGVkO1xuICBpZiAobXMgPCAxMCkge1xuICAgIGZvcm1hdHRlZCA9IGAke21zLnRvRml4ZWQoMil9bXNgO1xuICB9IGVsc2UgaWYgKG1zIDwgMTAwKSB7XG4gICAgZm9ybWF0dGVkID0gYCR7bXMudG9GaXhlZCgxKX1tc2A7XG4gIH0gZWxzZSBpZiAobXMgPCAxMDAwKSB7XG4gICAgZm9ybWF0dGVkID0gYCR7bXMudG9GaXhlZCgwKX1tc2A7XG4gIH0gZWxzZSB7XG4gICAgZm9ybWF0dGVkID0gYCR7KG1zIC8gMTAwMCkudG9GaXhlZCgyKX1zYDtcbiAgfVxuICByZXR1cm4gZm9ybWF0dGVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbGVmdFBhZChzdHJpbmcsIGxlbmd0aCA9IDgpIHtcbiAgd2hpbGUgKHN0cmluZy5sZW5ndGggPCBsZW5ndGgpIHtcbiAgICBzdHJpbmcgPSBgICR7c3RyaW5nfWA7XG4gIH1cbiAgcmV0dXJuIHN0cmluZztcbn1cbiJdfQ==