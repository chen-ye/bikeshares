'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _viewport = require('./viewport');

var _viewport2 = _interopRequireDefault(_viewport);

var _lookAt = require('gl-mat4/lookAt');

var _lookAt2 = _interopRequireDefault(_lookAt);

var _perspective = require('gl-mat4/perspective');

var _perspective2 = _interopRequireDefault(_perspective);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

var DEGREES_TO_RADIANS = Math.PI / 180;

var PerspectiveViewport = function (_Viewport) {
  _inherits(PerspectiveViewport, _Viewport);

  function PerspectiveViewport(_ref) {
    var width = _ref.width,
        height = _ref.height,
        eye = _ref.eye,
        _ref$lookAt = _ref.lookAt,
        lookAt = _ref$lookAt === undefined ? [0, 0, 0] : _ref$lookAt,
        _ref$up = _ref.up,
        up = _ref$up === undefined ? [0, 1, 0] : _ref$up,
        _ref$fovy = _ref.fovy,
        fovy = _ref$fovy === undefined ? 75 : _ref$fovy,
        _ref$near = _ref.near,
        near = _ref$near === undefined ? 1 : _ref$near,
        _ref$far = _ref.far,
        far = _ref$far === undefined ? 100 : _ref$far,
        _ref$aspect = _ref.aspect,
        aspect = _ref$aspect === undefined ? null : _ref$aspect;

    _classCallCheck(this, PerspectiveViewport);

    var fovyRadians = fovy * DEGREES_TO_RADIANS;
    aspect = Number.isFinite(aspect) ? aspect : width / height;
    return _possibleConstructorReturn(this, (PerspectiveViewport.__proto__ || Object.getPrototypeOf(PerspectiveViewport)).call(this, {
      viewMatrix: (0, _lookAt2.default)([], eye, lookAt, up),
      projectionMatrix: (0, _perspective2.default)([], fovyRadians, aspect, near, far),
      width: width,
      height: height
    }));
  }

  return PerspectiveViewport;
}(_viewport2.default);

exports.default = PerspectiveViewport;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvdmlld3BvcnRzL3BlcnNwZWN0aXZlLXZpZXdwb3J0LmpzIl0sIm5hbWVzIjpbIkRFR1JFRVNfVE9fUkFESUFOUyIsIk1hdGgiLCJQSSIsIlBlcnNwZWN0aXZlVmlld3BvcnQiLCJ3aWR0aCIsImhlaWdodCIsImV5ZSIsImxvb2tBdCIsInVwIiwiZm92eSIsIm5lYXIiLCJmYXIiLCJhc3BlY3QiLCJmb3Z5UmFkaWFucyIsIk51bWJlciIsImlzRmluaXRlIiwidmlld01hdHJpeCIsInByb2plY3Rpb25NYXRyaXgiXSwibWFwcGluZ3MiOiI7Ozs7OztBQW9CQTs7OztBQUNBOzs7O0FBQ0E7Ozs7Ozs7Ozs7K2VBdEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQU1BLElBQU1BLHFCQUFxQkMsS0FBS0MsRUFBTCxHQUFVLEdBQXJDOztJQUVxQkMsbUI7OztBQUNuQixxQ0FjRztBQUFBLFFBWkRDLEtBWUMsUUFaREEsS0FZQztBQUFBLFFBWERDLE1BV0MsUUFYREEsTUFXQztBQUFBLFFBVERDLEdBU0MsUUFUREEsR0FTQztBQUFBLDJCQVJEQyxNQVFDO0FBQUEsUUFSREEsTUFRQywrQkFSUSxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxDQVFSO0FBQUEsdUJBUERDLEVBT0M7QUFBQSxRQVBEQSxFQU9DLDJCQVBJLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLENBT0o7QUFBQSx5QkFMREMsSUFLQztBQUFBLFFBTERBLElBS0MsNkJBTE0sRUFLTjtBQUFBLHlCQUpEQyxJQUlDO0FBQUEsUUFKREEsSUFJQyw2QkFKTSxDQUlOO0FBQUEsd0JBSERDLEdBR0M7QUFBQSxRQUhEQSxHQUdDLDRCQUhLLEdBR0w7QUFBQSwyQkFEREMsTUFDQztBQUFBLFFBRERBLE1BQ0MsK0JBRFEsSUFDUjs7QUFBQTs7QUFDRCxRQUFNQyxjQUFjSixPQUFPVCxrQkFBM0I7QUFDQVksYUFBU0UsT0FBT0MsUUFBUCxDQUFnQkgsTUFBaEIsSUFBMEJBLE1BQTFCLEdBQW1DUixRQUFRQyxNQUFwRDtBQUZDLHFJQUdLO0FBQ0pXLGtCQUFZLHNCQUFZLEVBQVosRUFBZ0JWLEdBQWhCLEVBQXFCQyxNQUFyQixFQUE2QkMsRUFBN0IsQ0FEUjtBQUVKUyx3QkFBa0IsMkJBQWlCLEVBQWpCLEVBQXFCSixXQUFyQixFQUFrQ0QsTUFBbEMsRUFBMENGLElBQTFDLEVBQWdEQyxHQUFoRCxDQUZkO0FBR0pQLGtCQUhJO0FBSUpDO0FBSkksS0FITDtBQVNGOzs7OztrQkF4QmtCRixtQiIsImZpbGUiOiJwZXJzcGVjdGl2ZS12aWV3cG9ydC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgMjAxNSAtIDIwMTcgVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuXG5pbXBvcnQgVmlld3BvcnQgZnJvbSAnLi92aWV3cG9ydCc7XG5pbXBvcnQgbWF0NF9sb29rQXQgZnJvbSAnZ2wtbWF0NC9sb29rQXQnO1xuaW1wb3J0IG1hdDRfcGVyc3BlY3RpdmUgZnJvbSAnZ2wtbWF0NC9wZXJzcGVjdGl2ZSc7XG5cbmNvbnN0IERFR1JFRVNfVE9fUkFESUFOUyA9IE1hdGguUEkgLyAxODA7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBlcnNwZWN0aXZlVmlld3BvcnQgZXh0ZW5kcyBWaWV3cG9ydCB7XG4gIGNvbnN0cnVjdG9yKHtcbiAgICAvLyB2aWV3cG9ydCBhcmd1bWVudHNcbiAgICB3aWR0aCwgLy8gV2lkdGggb2Ygdmlld3BvcnRcbiAgICBoZWlnaHQsIC8vIEhlaWdodCBvZiB2aWV3cG9ydFxuICAgIC8vIHZpZXcgbWF0cml4IGFyZ3VtZW50c1xuICAgIGV5ZSwgLy8gRGVmaW5lcyBleWUgcG9zaXRpb25cbiAgICBsb29rQXQgPSBbMCwgMCwgMF0sIC8vIFdoaWNoIHBvaW50IGlzIGNhbWVyYSBsb29raW5nIGF0LCBkZWZhdWx0IG9yaWdpblxuICAgIHVwID0gWzAsIDEsIDBdLCAvLyBEZWZpbmVzIHVwIGRpcmVjdGlvbiwgZGVmYXVsdCBwb3NpdGl2ZSB5IGF4aXNcbiAgICAvLyBwcm9qZWN0aW9uIG1hdHJpeCBhcmd1bWVudHNcbiAgICBmb3Z5ID0gNzUsIC8vIEZpZWxkIG9mIHZpZXcgY292ZXJlZCBieSBjYW1lcmFcbiAgICBuZWFyID0gMSwgLy8gRGlzdGFuY2Ugb2YgbmVhciBjbGlwcGluZyBwbGFuZVxuICAgIGZhciA9IDEwMCwgLy8gRGlzdGFuY2Ugb2YgZmFyIGNsaXBwaW5nIHBsYW5lXG4gICAgLy8gYXV0b21hdGljYWxseSBjYWxjdWxhdGVkXG4gICAgYXNwZWN0ID0gbnVsbCAvLyBBc3BlY3QgcmF0aW8gKHNldCB0byB2aWV3cG9ydCB3aWRodC9oZWlnaHQpXG4gIH0pIHtcbiAgICBjb25zdCBmb3Z5UmFkaWFucyA9IGZvdnkgKiBERUdSRUVTX1RPX1JBRElBTlM7XG4gICAgYXNwZWN0ID0gTnVtYmVyLmlzRmluaXRlKGFzcGVjdCkgPyBhc3BlY3QgOiB3aWR0aCAvIGhlaWdodDtcbiAgICBzdXBlcih7XG4gICAgICB2aWV3TWF0cml4OiBtYXQ0X2xvb2tBdChbXSwgZXllLCBsb29rQXQsIHVwKSxcbiAgICAgIHByb2plY3Rpb25NYXRyaXg6IG1hdDRfcGVyc3BlY3RpdmUoW10sIGZvdnlSYWRpYW5zLCBhc3BlY3QsIG5lYXIsIGZhciksXG4gICAgICB3aWR0aCxcbiAgICAgIGhlaWdodFxuICAgIH0pO1xuICB9XG59XG4iXX0=