'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateLayerInSeer = exports.initLayerInSeer = exports.logPayload = exports.removeLayerInSeer = exports.seerInitListener = exports.layerEditListener = exports.applyPropOverrides = exports.setPropOverrides = undefined;

var _seer = require('seer');

var _seer2 = _interopRequireDefault(_seer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/**
 * Recursively set a nested property of an object given a properties array and a value
 */
var recursiveSet = function recursiveSet(obj, path, value) {
  if (!obj) {
    return;
  }

  if (path.length > 1) {
    recursiveSet(obj[path[0]], path.slice(1), value);
  } else {
    obj[path[0]] = value;
  }
};

var overrides = new Map();

/**
 * Create an override on the specify layer, indexed by a valuePath array.
 * Do nothing in case Seer as not been initialized to prevent any preformance drawback.
 */
var setPropOverrides = exports.setPropOverrides = function setPropOverrides(id, valuePath, value) {
  if (!_seer2.default.isReady()) {
    return;
  }

  if (!overrides.has(id)) {
    overrides.set(id, new Map());
  }

  var props = overrides.get(id);
  props.set(valuePath, value);
};

/**
 * Get the props overrides of a specific layer if Seer as been initialized
 * Invalidates the data to be sure new ones are always picked up.
 */
var applyPropOverrides = exports.applyPropOverrides = function applyPropOverrides(props) {
  if (!_seer2.default.isReady() || !props.id) {
    return;
  }

  var overs = overrides.get(props.id);
  if (!overs) {
    return;
  }

  overs.forEach(function (value, valuePath) {
    recursiveSet(props, valuePath, value);
    // Invalidate data array if we have a data override
    if (valuePath[0] === 'data') {
      props.data = [].concat(_toConsumableArray(props.data));
    }
  });
};

/**
 * Listen for deck.gl edit events
 */
var layerEditListener = exports.layerEditListener = function layerEditListener(cb) {
  if (!_seer2.default.isReady()) {
    return;
  }

  _seer2.default.listenFor('deck.gl', cb);
};

/**
 * Listen for seer init events to resend data
 */
var seerInitListener = exports.seerInitListener = function seerInitListener(cb) {
  if (!_seer2.default.isReady()) {
    return;
  }

  _seer2.default.listenFor('init', cb);
};

/**
 * On finalyze of a specify layer, remove it from seer
 */
var removeLayerInSeer = exports.removeLayerInSeer = function removeLayerInSeer(id) {
  if (!_seer2.default.isReady() || !id) {
    return;
  }

  _seer2.default.deleteItem('deck.gl', id);
};

var logPayload = exports.logPayload = function logPayload(layer) {
  var data = [{ path: 'objects.props', data: layer.props }];

  var badges = [layer.constructor.layerName];

  if (layer.state) {
    if (layer.state.attributeManager) {
      var attrs = layer.state.attributeManager.getAttributes();
      data.push({ path: 'objects.attributes', data: attrs });
      badges.push(layer.state.attributeManager.stats.getTimeString());
    }
    if (layer.state.model) {
      layer.state.model.timerQueryEnabled = true;
      var lastFrameTime = layer.state.model.stats.lastFrameTime;

      if (lastFrameTime) {
        badges.push((lastFrameTime * 1000).toFixed(0) + '\u03BCs');
      }
    }
  }

  data.push({ path: 'badges', data: badges });

  return data;
};

var initLayerInSeer = exports.initLayerInSeer = function initLayerInSeer(layer) {
  if (!_seer2.default.isReady() || !layer) {
    return;
  }

  var badges = [layer.constructor.layerName];

  _seer2.default.listItem('deck.gl', layer.id, {
    badges: badges,
    links: layer.state && layer.state.model ? ['luma.gl:' + layer.state.model.id] : undefined,
    parent: layer.parentLayer ? layer.parentLayer.id : undefined
  });
};

/**
 * Log layer's properties to Seer
 */
var updateLayerInSeer = exports.updateLayerInSeer = function updateLayerInSeer(layer) {
  if (!_seer2.default.isReady() || _seer2.default.throttle('deck.gl:' + layer.id, 1E3)) {
    return;
  }

  var data = logPayload(layer);
  _seer2.default.multiUpdate('deck.gl', layer.id, data);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,