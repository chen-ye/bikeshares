'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GESTURE_EVENT_ALIASES = exports.RECOGNIZERS = exports.EVENT_RECOGNIZER_MAP = exports.BASIC_EVENT_ALIASES = undefined;

var _hammerjs = require('hammerjs');

/**
 * Only one set of basic input events will be fired by Hammer.js:
 * either pointer, touch, or mouse, depending on system support.
 * In order to enable an application to be agnostic of system support,
 * alias basic input events into "classes" of events: down, move, and up.
 * See `_onBasicInput()` for usage of these aliases.
 */
var BASIC_EVENT_ALIASES = exports.BASIC_EVENT_ALIASES = {
  pointerdown: 'pointerdown',
  pointermove: 'pointermove',
  pointerup: 'pointerup',
  touchstart: 'pointerdown',
  touchmove: 'pointermove',
  touchend: 'pointerup',
  mousedown: 'pointerdown',
  mousemove: 'pointermove',
  mouseup: 'pointerup'
};

/**
 * "Gestural" events are those that have semantic meaning beyond the basic input event,
 * e.g. a click or tap is a sequence of `down` and `up` events with no `move` event in between.
 * Hammer.js handles these with its Recognizer system;
 * this block maps event names to the Recognizers required to detect the events.
 */
var EVENT_RECOGNIZER_MAP = exports.EVENT_RECOGNIZER_MAP = {
  tap: 'tap',
  doubletap: 'doubletap',
  press: 'press',
  pinch: 'pinch',
  pinchin: 'pinch',
  pinchout: 'pinch',
  pinchstart: 'pinch',
  pinchmove: 'pinch',
  pinchend: 'pinch',
  pinchcancel: 'pinch',
  rotate: 'rotate',
  rotatestart: 'rotate',
  rotatemove: 'rotate',
  rotateend: 'rotate',
  rotatecancel: 'rotate',
  pan: 'pan',
  panstart: 'pan',
  panmove: 'pan',
  panup: 'pan',
  pandown: 'pan',
  panleft: 'pan',
  panright: 'pan',
  panend: 'pan',
  pancancel: 'pan',
  swipe: 'swipe',
  swipeleft: 'swipe',
  swiperight: 'swipe',
  swipeup: 'swipe',
  swipedown: 'swipe'
};

var RECOGNIZERS = exports.RECOGNIZERS = [[_hammerjs.Rotate, { enable: false }], [_hammerjs.Pinch, { enable: false }, ['rotate']], [_hammerjs.Pan, { threshold: 10, enable: false }], [_hammerjs.Swipe, { enable: false }], [_hammerjs.Press, { enable: false }], [_hammerjs.Tap, { event: 'doubletap', taps: 2, enable: false }], [_hammerjs.Tap, { enable: false }]];

/**
 * Map gestural events typically provided by browsers
 * that are not reported in 'hammer.input' events
 * to corresponding Hammer.js gestures.
 */
var GESTURE_EVENT_ALIASES = exports.GESTURE_EVENT_ALIASES = {
  click: 'tap',
  mousedown: 'pointerdown',
  mousemove: 'pointermove',
  mouseup: 'pointerup'
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy9ldmVudHMvY29uc3RhbnRzLmpzIl0sIm5hbWVzIjpbIkJBU0lDX0VWRU5UX0FMSUFTRVMiLCJwb2ludGVyZG93biIsInBvaW50ZXJtb3ZlIiwicG9pbnRlcnVwIiwidG91Y2hzdGFydCIsInRvdWNobW92ZSIsInRvdWNoZW5kIiwibW91c2Vkb3duIiwibW91c2Vtb3ZlIiwibW91c2V1cCIsIkVWRU5UX1JFQ09HTklaRVJfTUFQIiwidGFwIiwiZG91YmxldGFwIiwicHJlc3MiLCJwaW5jaCIsInBpbmNoaW4iLCJwaW5jaG91dCIsInBpbmNoc3RhcnQiLCJwaW5jaG1vdmUiLCJwaW5jaGVuZCIsInBpbmNoY2FuY2VsIiwicm90YXRlIiwicm90YXRlc3RhcnQiLCJyb3RhdGVtb3ZlIiwicm90YXRlZW5kIiwicm90YXRlY2FuY2VsIiwicGFuIiwicGFuc3RhcnQiLCJwYW5tb3ZlIiwicGFudXAiLCJwYW5kb3duIiwicGFubGVmdCIsInBhbnJpZ2h0IiwicGFuZW5kIiwicGFuY2FuY2VsIiwic3dpcGUiLCJzd2lwZWxlZnQiLCJzd2lwZXJpZ2h0Iiwic3dpcGV1cCIsInN3aXBlZG93biIsIlJFQ09HTklaRVJTIiwiZW5hYmxlIiwidGhyZXNob2xkIiwiZXZlbnQiLCJ0YXBzIiwiR0VTVFVSRV9FVkVOVF9BTElBU0VTIiwiY2xpY2siXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFTQTs7Ozs7OztBQU9PLElBQU1BLG9EQUFzQjtBQUNqQ0MsZUFBYSxhQURvQjtBQUVqQ0MsZUFBYSxhQUZvQjtBQUdqQ0MsYUFBVyxXQUhzQjtBQUlqQ0MsY0FBWSxhQUpxQjtBQUtqQ0MsYUFBVyxhQUxzQjtBQU1qQ0MsWUFBVSxXQU51QjtBQU9qQ0MsYUFBVyxhQVBzQjtBQVFqQ0MsYUFBVyxhQVJzQjtBQVNqQ0MsV0FBUztBQVR3QixDQUE1Qjs7QUFZUDs7Ozs7O0FBTU8sSUFBTUMsc0RBQXVCO0FBQ2xDQyxPQUFLLEtBRDZCO0FBRWxDQyxhQUFXLFdBRnVCO0FBR2xDQyxTQUFPLE9BSDJCO0FBSWxDQyxTQUFPLE9BSjJCO0FBS2xDQyxXQUFTLE9BTHlCO0FBTWxDQyxZQUFVLE9BTndCO0FBT2xDQyxjQUFZLE9BUHNCO0FBUWxDQyxhQUFXLE9BUnVCO0FBU2xDQyxZQUFVLE9BVHdCO0FBVWxDQyxlQUFhLE9BVnFCO0FBV2xDQyxVQUFRLFFBWDBCO0FBWWxDQyxlQUFhLFFBWnFCO0FBYWxDQyxjQUFZLFFBYnNCO0FBY2xDQyxhQUFXLFFBZHVCO0FBZWxDQyxnQkFBYyxRQWZvQjtBQWdCbENDLE9BQUssS0FoQjZCO0FBaUJsQ0MsWUFBVSxLQWpCd0I7QUFrQmxDQyxXQUFTLEtBbEJ5QjtBQW1CbENDLFNBQU8sS0FuQjJCO0FBb0JsQ0MsV0FBUyxLQXBCeUI7QUFxQmxDQyxXQUFTLEtBckJ5QjtBQXNCbENDLFlBQVUsS0F0QndCO0FBdUJsQ0MsVUFBUSxLQXZCMEI7QUF3QmxDQyxhQUFXLEtBeEJ1QjtBQXlCbENDLFNBQU8sT0F6QjJCO0FBMEJsQ0MsYUFBVyxPQTFCdUI7QUEyQmxDQyxjQUFZLE9BM0JzQjtBQTRCbENDLFdBQVMsT0E1QnlCO0FBNkJsQ0MsYUFBVztBQTdCdUIsQ0FBN0I7O0FBZ0NBLElBQU1DLG9DQUFjLENBQ3pCLG1CQUFTLEVBQUNDLFFBQVEsS0FBVCxFQUFULENBRHlCLEVBRXpCLGtCQUFRLEVBQUNBLFFBQVEsS0FBVCxFQUFSLEVBQXlCLENBQUMsUUFBRCxDQUF6QixDQUZ5QixFQUd6QixnQkFBTSxFQUFDQyxXQUFXLEVBQVosRUFBZ0JELFFBQVEsS0FBeEIsRUFBTixDQUh5QixFQUl6QixrQkFBUSxFQUFDQSxRQUFRLEtBQVQsRUFBUixDQUp5QixFQUt6QixrQkFBUSxFQUFDQSxRQUFRLEtBQVQsRUFBUixDQUx5QixFQU16QixnQkFBTSxFQUFDRSxPQUFPLFdBQVIsRUFBcUJDLE1BQU0sQ0FBM0IsRUFBOEJILFFBQVEsS0FBdEMsRUFBTixDQU55QixFQU96QixnQkFBTSxFQUFDQSxRQUFRLEtBQVQsRUFBTixDQVB5QixDQUFwQjs7QUFVUDs7Ozs7QUFLTyxJQUFNSSx3REFBd0I7QUFDbkNDLFNBQU8sS0FENEI7QUFFbkN2QyxhQUFXLGFBRndCO0FBR25DQyxhQUFXLGFBSHdCO0FBSW5DQyxXQUFTO0FBSjBCLENBQTlCIiwiZmlsZSI6ImNvbnN0YW50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIFRhcCxcbiAgUHJlc3MsXG4gIFBpbmNoLFxuICBSb3RhdGUsXG4gIFBhbixcbiAgU3dpcGVcbn0gZnJvbSAnaGFtbWVyanMnO1xuXG4vKipcbiAqIE9ubHkgb25lIHNldCBvZiBiYXNpYyBpbnB1dCBldmVudHMgd2lsbCBiZSBmaXJlZCBieSBIYW1tZXIuanM6XG4gKiBlaXRoZXIgcG9pbnRlciwgdG91Y2gsIG9yIG1vdXNlLCBkZXBlbmRpbmcgb24gc3lzdGVtIHN1cHBvcnQuXG4gKiBJbiBvcmRlciB0byBlbmFibGUgYW4gYXBwbGljYXRpb24gdG8gYmUgYWdub3N0aWMgb2Ygc3lzdGVtIHN1cHBvcnQsXG4gKiBhbGlhcyBiYXNpYyBpbnB1dCBldmVudHMgaW50byBcImNsYXNzZXNcIiBvZiBldmVudHM6IGRvd24sIG1vdmUsIGFuZCB1cC5cbiAqIFNlZSBgX29uQmFzaWNJbnB1dCgpYCBmb3IgdXNhZ2Ugb2YgdGhlc2UgYWxpYXNlcy5cbiAqL1xuZXhwb3J0IGNvbnN0IEJBU0lDX0VWRU5UX0FMSUFTRVMgPSB7XG4gIHBvaW50ZXJkb3duOiAncG9pbnRlcmRvd24nLFxuICBwb2ludGVybW92ZTogJ3BvaW50ZXJtb3ZlJyxcbiAgcG9pbnRlcnVwOiAncG9pbnRlcnVwJyxcbiAgdG91Y2hzdGFydDogJ3BvaW50ZXJkb3duJyxcbiAgdG91Y2htb3ZlOiAncG9pbnRlcm1vdmUnLFxuICB0b3VjaGVuZDogJ3BvaW50ZXJ1cCcsXG4gIG1vdXNlZG93bjogJ3BvaW50ZXJkb3duJyxcbiAgbW91c2Vtb3ZlOiAncG9pbnRlcm1vdmUnLFxuICBtb3VzZXVwOiAncG9pbnRlcnVwJ1xufTtcblxuLyoqXG4gKiBcIkdlc3R1cmFsXCIgZXZlbnRzIGFyZSB0aG9zZSB0aGF0IGhhdmUgc2VtYW50aWMgbWVhbmluZyBiZXlvbmQgdGhlIGJhc2ljIGlucHV0IGV2ZW50LFxuICogZS5nLiBhIGNsaWNrIG9yIHRhcCBpcyBhIHNlcXVlbmNlIG9mIGBkb3duYCBhbmQgYHVwYCBldmVudHMgd2l0aCBubyBgbW92ZWAgZXZlbnQgaW4gYmV0d2Vlbi5cbiAqIEhhbW1lci5qcyBoYW5kbGVzIHRoZXNlIHdpdGggaXRzIFJlY29nbml6ZXIgc3lzdGVtO1xuICogdGhpcyBibG9jayBtYXBzIGV2ZW50IG5hbWVzIHRvIHRoZSBSZWNvZ25pemVycyByZXF1aXJlZCB0byBkZXRlY3QgdGhlIGV2ZW50cy5cbiAqL1xuZXhwb3J0IGNvbnN0IEVWRU5UX1JFQ09HTklaRVJfTUFQID0ge1xuICB0YXA6ICd0YXAnLFxuICBkb3VibGV0YXA6ICdkb3VibGV0YXAnLFxuICBwcmVzczogJ3ByZXNzJyxcbiAgcGluY2g6ICdwaW5jaCcsXG4gIHBpbmNoaW46ICdwaW5jaCcsXG4gIHBpbmNob3V0OiAncGluY2gnLFxuICBwaW5jaHN0YXJ0OiAncGluY2gnLFxuICBwaW5jaG1vdmU6ICdwaW5jaCcsXG4gIHBpbmNoZW5kOiAncGluY2gnLFxuICBwaW5jaGNhbmNlbDogJ3BpbmNoJyxcbiAgcm90YXRlOiAncm90YXRlJyxcbiAgcm90YXRlc3RhcnQ6ICdyb3RhdGUnLFxuICByb3RhdGVtb3ZlOiAncm90YXRlJyxcbiAgcm90YXRlZW5kOiAncm90YXRlJyxcbiAgcm90YXRlY2FuY2VsOiAncm90YXRlJyxcbiAgcGFuOiAncGFuJyxcbiAgcGFuc3RhcnQ6ICdwYW4nLFxuICBwYW5tb3ZlOiAncGFuJyxcbiAgcGFudXA6ICdwYW4nLFxuICBwYW5kb3duOiAncGFuJyxcbiAgcGFubGVmdDogJ3BhbicsXG4gIHBhbnJpZ2h0OiAncGFuJyxcbiAgcGFuZW5kOiAncGFuJyxcbiAgcGFuY2FuY2VsOiAncGFuJyxcbiAgc3dpcGU6ICdzd2lwZScsXG4gIHN3aXBlbGVmdDogJ3N3aXBlJyxcbiAgc3dpcGVyaWdodDogJ3N3aXBlJyxcbiAgc3dpcGV1cDogJ3N3aXBlJyxcbiAgc3dpcGVkb3duOiAnc3dpcGUnXG59O1xuXG5leHBvcnQgY29uc3QgUkVDT0dOSVpFUlMgPSBbXG4gIFtSb3RhdGUsIHtlbmFibGU6IGZhbHNlfV0sXG4gIFtQaW5jaCwge2VuYWJsZTogZmFsc2V9LCBbJ3JvdGF0ZSddXSxcbiAgW1Bhbiwge3RocmVzaG9sZDogMTAsIGVuYWJsZTogZmFsc2V9XSxcbiAgW1N3aXBlLCB7ZW5hYmxlOiBmYWxzZX1dLFxuICBbUHJlc3MsIHtlbmFibGU6IGZhbHNlfV0sXG4gIFtUYXAsIHtldmVudDogJ2RvdWJsZXRhcCcsIHRhcHM6IDIsIGVuYWJsZTogZmFsc2V9XSxcbiAgW1RhcCwge2VuYWJsZTogZmFsc2V9XVxuXTtcblxuLyoqXG4gKiBNYXAgZ2VzdHVyYWwgZXZlbnRzIHR5cGljYWxseSBwcm92aWRlZCBieSBicm93c2Vyc1xuICogdGhhdCBhcmUgbm90IHJlcG9ydGVkIGluICdoYW1tZXIuaW5wdXQnIGV2ZW50c1xuICogdG8gY29ycmVzcG9uZGluZyBIYW1tZXIuanMgZ2VzdHVyZXMuXG4gKi9cbmV4cG9ydCBjb25zdCBHRVNUVVJFX0VWRU5UX0FMSUFTRVMgPSB7XG4gIGNsaWNrOiAndGFwJyxcbiAgbW91c2Vkb3duOiAncG9pbnRlcmRvd24nLFxuICBtb3VzZW1vdmU6ICdwb2ludGVybW92ZScsXG4gIG1vdXNldXA6ICdwb2ludGVydXAnXG59O1xuIl19