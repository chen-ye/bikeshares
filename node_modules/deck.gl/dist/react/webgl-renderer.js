'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _autobind = require('./autobind');

var _autobind2 = _interopRequireDefault(_autobind);

var _luma = require('luma.gl');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/* global window */


/* global requestAnimationFrame, cancelAnimationFrame */

var propTypes = {
  id: _propTypes2.default.string.isRequired,

  width: _propTypes2.default.number.isRequired,
  height: _propTypes2.default.number.isRequired,
  useDevicePixelRatio: _propTypes2.default.bool.isRequired,
  style: _propTypes2.default.object,

  events: _propTypes2.default.object,
  gl: _propTypes2.default.object,
  glOptions: _propTypes2.default.object,
  debug: _propTypes2.default.bool,

  onInitializationFailed: _propTypes2.default.func,
  onRendererInitialized: _propTypes2.default.func.isRequired,
  onRenderFrame: _propTypes2.default.func
};

var defaultProps = {
  style: {},
  gl: null,
  glOptions: { preserveDrawingBuffer: true },
  debug: false,

  onInitializationFailed: function onInitializationFailed(error) {
    throw error;
  },
  onRendererInitialized: function onRendererInitialized() {},
  onRenderFrame: function onRenderFrame() {}
};

var WebGLRenderer = function (_React$Component) {
  _inherits(WebGLRenderer, _React$Component);

  /**
   * @classdesc
   * Small react component that uses Luma.GL to initialize a WebGL context.
   *
   * Returns a canvas, creates a basic WebGL context
   * sets up a renderloop, and registers some basic event handlers
   *
   * @class
   * @param {Object} props - see propTypes documentation
   */
  function WebGLRenderer(props) {
    _classCallCheck(this, WebGLRenderer);

    var _this = _possibleConstructorReturn(this, (WebGLRenderer.__proto__ || Object.getPrototypeOf(WebGLRenderer)).call(this, props));

    _this.state = {};
    _this._animationFrame = null;
    _this.gl = null;
    (0, _autobind2.default)(_this);
    return _this;
  }

  _createClass(WebGLRenderer, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var canvas = this.refs.overlay;
      this._initWebGL(canvas);
      this._animationLoop();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this._cancelAnimationLoop();
    }

    /**
     * Initialize LumaGL library and through it WebGL
     * @param {string} canvas
     */

  }, {
    key: '_initWebGL',
    value: function _initWebGL(canvas) {
      var _props = this.props,
          debug = _props.debug,
          glOptions = _props.glOptions;

      // Create context if not supplied

      var gl = this.props.gl;
      if (!gl) {
        try {
          gl = (0, _luma.createGLContext)(Object.assign({ canvas: canvas, debug: debug }, glOptions));
        } catch (error) {
          this.props.onInitializationFailed(error);
          return;
        }
      }

      this.gl = gl;

      // Call callback last, in case it throws
      this.props.onRendererInitialized({ canvas: canvas, gl: gl });
    }

    /**
     * Main WebGL animation loop
     */

  }, {
    key: '_animationLoop',
    value: function _animationLoop() {
      this._renderFrame();
      // Keep registering ourselves for the next animation frame
      if (typeof window !== 'undefined') {
        this._animationFrame = requestAnimationFrame(this._animationLoop);
      }
    }
  }, {
    key: '_cancelAnimationLoop',
    value: function _cancelAnimationLoop() {
      if (this._animationFrame) {
        cancelAnimationFrame(this._animationFrame);
      }
    }

    // Calculate the drawing buffer size that would cover current canvas size and device pixel ratio
    // Intention is that every pixel in the drawing buffer will have a 1-to-1 mapping with
    // actual device pixels in the hardware framebuffer, allowing us to render at the full
    // resolution of the device.

  }, {
    key: '_calculateDrawingBufferSize',
    value: function _calculateDrawingBufferSize(canvas, _ref) {
      var _ref$useDevicePixelRa = _ref.useDevicePixelRatio,
          useDevicePixelRatio = _ref$useDevicePixelRa === undefined ? true : _ref$useDevicePixelRa;

      var cssToDevicePixels = useDevicePixelRatio ? window.devicePixelRatio || 1 : 1;
      // Lookup the size the browser is displaying the canvas in CSS pixels
      // and compute a size needed to make our drawingbuffer match it in
      // device pixels.
      // We have set the canvas width and hieht from props, use props instead of accessing
      // canvas.clientWidth/clientHeight for performance reasons.
      var _props2 = this.props,
          width = _props2.width,
          height = _props2.height;

      return {
        width: Math.floor(width * cssToDevicePixels),
        height: Math.floor(height * cssToDevicePixels),
        devicePixelRatio: cssToDevicePixels
      };
    }

    // Resizes canvas width and height to match with device drawing buffer

  }, {
    key: '_resizeDrawingBuffer',
    value: function _resizeDrawingBuffer(canvas, _ref2) {
      var _ref2$useDevicePixelR = _ref2.useDevicePixelRatio,
          useDevicePixelRatio = _ref2$useDevicePixelR === undefined ? true : _ref2$useDevicePixelR;

      // Resize the render buffer of the canvas to match canvas client size
      // multiplying with dpr (Optionally can be turned off)
      var newBufferSize = this._calculateDrawingBufferSize(canvas, { useDevicePixelRatio: useDevicePixelRatio });
      // Only update if the canvas size has not changed
      if (newBufferSize.width !== canvas.width || newBufferSize.height !== canvas.height) {
        // Note: canvas.width, canvas.height control the size of backing drawing buffer
        // and can be set indepently of canvas.clientWidth and canvas.clientHeight
        // which confusingly reflect canvas.style.width, canvas.style.height
        canvas.width = newBufferSize.width;
        canvas.height = newBufferSize.height;
      }
    }
  }, {
    key: '_renderFrame',
    value: function _renderFrame() {
      var _props3 = this.props,
          width = _props3.width,
          height = _props3.height,
          useDevicePixelRatio = _props3.useDevicePixelRatio;
      var gl = this.gl;

      // Check for reasons not to draw

      if (!gl || !(width > 0) || !(height > 0)) {
        return;
      }

      this._resizeDrawingBuffer(gl.canvas, { useDevicePixelRatio: useDevicePixelRatio });

      // Updates WebGL viewport to latest props
      (0, _luma.setParameters)(gl, {
        viewport: [0, 0, gl.canvas.width, gl.canvas.height]
      });

      // Call render callback
      this.props.onRenderFrame({ gl: gl });

      this.props.onAfterRender(this.refs.overlay);
    }
  }, {
    key: 'render',
    value: function render() {
      var _props4 = this.props,
          id = _props4.id,
          width = _props4.width,
          height = _props4.height,
          style = _props4.style;

      return (0, _react.createElement)('canvas', {
        ref: 'overlay',
        key: 'overlay',
        id: id,
        style: Object.assign({}, style, { width: width, height: height })
      });
    }
  }]);

  return WebGLRenderer;
}(_react2.default.Component);

exports.default = WebGLRenderer;


WebGLRenderer.propTypes = propTypes;
WebGLRenderer.defaultProps = defaultProps;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,