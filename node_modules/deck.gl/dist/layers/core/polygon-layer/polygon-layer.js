'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lib = require('../../../lib');

var _solidPolygonLayer = require('../solid-polygon-layer/solid-polygon-layer');

var _solidPolygonLayer2 = _interopRequireDefault(_solidPolygonLayer);

var _pathLayer = require('../path-layer/path-layer');

var _pathLayer2 = _interopRequireDefault(_pathLayer);

var _polygon = require('../solid-polygon-layer/polygon');

var Polygon = _interopRequireWildcard(_polygon);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

var defaultLineColor = [0x0, 0x0, 0x0, 0xFF];
var defaultFillColor = [0x0, 0x0, 0x0, 0xFF];

var defaultProps = {
  stroked: true,
  filled: true,
  extruded: false,
  elevationScale: 1,
  wireframe: false,

  lineWidthScale: 1,
  lineWidthMinPixels: 0,
  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,
  lineJointRounded: false,
  lineMiterLimit: 4,
  fp64: false,

  getPolygon: function getPolygon(f) {
    return (0, _lib.get)(f, 'polygon');
  },
  // Polygon fill color
  getFillColor: function getFillColor(f) {
    return (0, _lib.get)(f, 'fillColor') || defaultFillColor;
  },
  // Point, line and polygon outline color
  getLineColor: function getLineColor(f) {
    return (0, _lib.get)(f, 'lineColor') || defaultLineColor;
  },
  // Line and polygon outline accessors
  getLineWidth: function getLineWidth(f) {
    return (0, _lib.get)(f, 'lineWidth') || 1;
  },
  // Polygon extrusion accessor
  getElevation: function getElevation(f) {
    return (0, _lib.get)(f, 'elevation') || 1000;
  },

  // Optional settings for 'lighting' shader module
  lightSettings: {
    lightsPosition: [-122.45, 37.75, 8000, -122.0, 38.00, 5000],
    ambientRatio: 0.05,
    diffuseRatio: 0.6,
    specularRatio: 0.8,
    lightsStrength: [2.0, 0.0, 0.0, 0.0],
    numberOfLights: 2
  }
};

var PolygonLayer = function (_CompositeLayer) {
  _inherits(PolygonLayer, _CompositeLayer);

  function PolygonLayer() {
    _classCallCheck(this, PolygonLayer);

    return _possibleConstructorReturn(this, (PolygonLayer.__proto__ || Object.getPrototypeOf(PolygonLayer)).apply(this, arguments));
  }

  _createClass(PolygonLayer, [{
    key: 'initializeState',
    value: function initializeState() {
      this.state = {
        paths: []
      };
    }
  }, {
    key: 'updateState',
    value: function updateState(_ref) {
      var _this2 = this;

      var oldProps = _ref.oldProps,
          props = _ref.props,
          changeFlags = _ref.changeFlags;

      if (changeFlags.dataChanged) {
        var _props = this.props,
            data = _props.data,
            getPolygon = _props.getPolygon;

        this.state.paths = [];
        data.forEach(function (object) {
          var complexPolygon = Polygon.normalize(getPolygon(object));
          complexPolygon.forEach(function (polygon) {
            return _this2.state.paths.push({
              path: polygon,
              object: object
            });
          });
        });
      }
    }
  }, {
    key: 'getPickingInfo',
    value: function getPickingInfo(_ref2) {
      var info = _ref2.info;

      return Object.assign(info, {
        // override object with picked data
        object: info.object && info.object.object || info.object
      });
    }
  }, {
    key: 'renderLayers',
    value: function renderLayers() {
      // Layer composition props
      var _props2 = this.props,
          data = _props2.data,
          id = _props2.id,
          stroked = _props2.stroked,
          filled = _props2.filled,
          extruded = _props2.extruded,
          wireframe = _props2.wireframe,
          elevationScale = _props2.elevationScale;

      // Rendering props underlying layer

      var _props3 = this.props,
          lineWidthScale = _props3.lineWidthScale,
          lineWidthMinPixels = _props3.lineWidthMinPixels,
          lineWidthMaxPixels = _props3.lineWidthMaxPixels,
          lineJointRounded = _props3.lineJointRounded,
          lineMiterLimit = _props3.lineMiterLimit,
          fp64 = _props3.fp64;

      // Accessor props for underlying layers

      var _props4 = this.props,
          getFillColor = _props4.getFillColor,
          getLineColor = _props4.getLineColor,
          getLineWidth = _props4.getLineWidth,
          getElevation = _props4.getElevation,
          getPolygon = _props4.getPolygon,
          updateTriggers = _props4.updateTriggers,
          lightSettings = _props4.lightSettings;

      // base layer props

      var _props5 = this.props,
          opacity = _props5.opacity,
          pickable = _props5.pickable,
          visible = _props5.visible,
          getPolygonOffset = _props5.getPolygonOffset;

      // viewport props

      var _props6 = this.props,
          positionOrigin = _props6.positionOrigin,
          projectionMode = _props6.projectionMode,
          modelMatrix = _props6.modelMatrix;
      var paths = this.state.paths;


      var hasData = data && data.length > 0;

      // Filled Polygon Layer
      var polygonLayer = filled && hasData && new _solidPolygonLayer2.default({
        id: id + '-fill',
        data: data,
        extruded: extruded,
        elevationScale: elevationScale,
        wireframe: false,
        fp64: fp64,
        opacity: opacity,
        pickable: pickable,
        visible: visible,
        getPolygonOffset: getPolygonOffset,
        projectionMode: projectionMode,
        positionOrigin: positionOrigin,
        modelMatrix: modelMatrix,
        getPolygon: getPolygon,
        getElevation: getElevation,
        getColor: getFillColor,
        updateTriggers: {
          getElevation: updateTriggers.getElevation,
          getColor: updateTriggers.getFillColor
        },
        lightSettings: lightSettings
      });

      var polygonWireframeLayer = extruded && wireframe && hasData && new _solidPolygonLayer2.default({
        id: id + '-wireframe',
        data: data,
        extruded: true,
        elevationScale: elevationScale,
        wireframe: true,
        fp64: fp64,
        opacity: opacity,
        pickable: pickable,
        visible: visible,
        getPolygonOffset: getPolygonOffset,
        projectionMode: projectionMode,
        positionOrigin: positionOrigin,
        modelMatrix: modelMatrix,
        getPolygon: getPolygon,
        getElevation: getElevation,
        getColor: getLineColor,
        updateTriggers: {
          getElevation: updateTriggers.getElevation,
          getColor: updateTriggers.getLineColor
        }
      });

      // Polygon line layer
      var polygonLineLayer = !extruded && stroked && hasData && new _pathLayer2.default({
        id: id + '-stroke',
        data: paths,
        widthScale: lineWidthScale,
        widthMinPixels: lineWidthMinPixels,
        widthMaxPixels: lineWidthMaxPixels,
        rounded: lineJointRounded,
        miterLimit: lineMiterLimit,
        fp64: fp64,
        opacity: opacity,
        pickable: pickable,
        visible: visible,
        getPolygonOffset: getPolygonOffset,
        projectionMode: projectionMode,
        positionOrigin: positionOrigin,
        modelMatrix: modelMatrix,
        getPath: function getPath(x) {
          return x.path;
        },
        getColor: getLineColor,
        getWidth: getLineWidth,
        updateTriggers: {
          getWidth: updateTriggers.getLineWidth,
          getColor: updateTriggers.getLineColor
        }
      });

      return [
      // If not extruded: flat fill layer is drawn below outlines
      !extruded && polygonLayer, polygonWireframeLayer, polygonLineLayer,
      // If extruded: draw fill layer last for correct blending behavior
      extruded && polygonLayer];
    }
  }]);

  return PolygonLayer;
}(_lib.CompositeLayer);

exports.default = PolygonLayer;


PolygonLayer.layerName = 'PolygonLayer';
PolygonLayer.defaultProps = defaultProps;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9sYXllcnMvY29yZS9wb2x5Z29uLWxheWVyL3BvbHlnb24tbGF5ZXIuanMiXSwibmFtZXMiOlsiUG9seWdvbiIsImRlZmF1bHRMaW5lQ29sb3IiLCJkZWZhdWx0RmlsbENvbG9yIiwiZGVmYXVsdFByb3BzIiwic3Ryb2tlZCIsImZpbGxlZCIsImV4dHJ1ZGVkIiwiZWxldmF0aW9uU2NhbGUiLCJ3aXJlZnJhbWUiLCJsaW5lV2lkdGhTY2FsZSIsImxpbmVXaWR0aE1pblBpeGVscyIsImxpbmVXaWR0aE1heFBpeGVscyIsIk51bWJlciIsIk1BWF9TQUZFX0lOVEVHRVIiLCJsaW5lSm9pbnRSb3VuZGVkIiwibGluZU1pdGVyTGltaXQiLCJmcDY0IiwiZ2V0UG9seWdvbiIsImYiLCJnZXRGaWxsQ29sb3IiLCJnZXRMaW5lQ29sb3IiLCJnZXRMaW5lV2lkdGgiLCJnZXRFbGV2YXRpb24iLCJsaWdodFNldHRpbmdzIiwibGlnaHRzUG9zaXRpb24iLCJhbWJpZW50UmF0aW8iLCJkaWZmdXNlUmF0aW8iLCJzcGVjdWxhclJhdGlvIiwibGlnaHRzU3RyZW5ndGgiLCJudW1iZXJPZkxpZ2h0cyIsIlBvbHlnb25MYXllciIsInN0YXRlIiwicGF0aHMiLCJvbGRQcm9wcyIsInByb3BzIiwiY2hhbmdlRmxhZ3MiLCJkYXRhQ2hhbmdlZCIsImRhdGEiLCJmb3JFYWNoIiwiY29tcGxleFBvbHlnb24iLCJub3JtYWxpemUiLCJvYmplY3QiLCJwdXNoIiwicGF0aCIsInBvbHlnb24iLCJpbmZvIiwiT2JqZWN0IiwiYXNzaWduIiwiaWQiLCJ1cGRhdGVUcmlnZ2VycyIsIm9wYWNpdHkiLCJwaWNrYWJsZSIsInZpc2libGUiLCJnZXRQb2x5Z29uT2Zmc2V0IiwicG9zaXRpb25PcmlnaW4iLCJwcm9qZWN0aW9uTW9kZSIsIm1vZGVsTWF0cml4IiwiaGFzRGF0YSIsImxlbmd0aCIsInBvbHlnb25MYXllciIsImdldENvbG9yIiwicG9seWdvbldpcmVmcmFtZUxheWVyIiwicG9seWdvbkxpbmVMYXllciIsIndpZHRoU2NhbGUiLCJ3aWR0aE1pblBpeGVscyIsIndpZHRoTWF4UGl4ZWxzIiwicm91bmRlZCIsIm1pdGVyTGltaXQiLCJnZXRQYXRoIiwieCIsImdldFdpZHRoIiwibGF5ZXJOYW1lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQW9CQTs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7O0lBQVlBLE87Ozs7Ozs7Ozs7K2VBdkJaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQU9BLElBQU1DLG1CQUFtQixDQUFDLEdBQUQsRUFBTSxHQUFOLEVBQVcsR0FBWCxFQUFnQixJQUFoQixDQUF6QjtBQUNBLElBQU1DLG1CQUFtQixDQUFDLEdBQUQsRUFBTSxHQUFOLEVBQVcsR0FBWCxFQUFnQixJQUFoQixDQUF6Qjs7QUFFQSxJQUFNQyxlQUFlO0FBQ25CQyxXQUFTLElBRFU7QUFFbkJDLFVBQVEsSUFGVztBQUduQkMsWUFBVSxLQUhTO0FBSW5CQyxrQkFBZ0IsQ0FKRztBQUtuQkMsYUFBVyxLQUxROztBQU9uQkMsa0JBQWdCLENBUEc7QUFRbkJDLHNCQUFvQixDQVJEO0FBU25CQyxzQkFBb0JDLE9BQU9DLGdCQVRSO0FBVW5CQyxvQkFBa0IsS0FWQztBQVduQkMsa0JBQWdCLENBWEc7QUFZbkJDLFFBQU0sS0FaYTs7QUFjbkJDLGNBQVk7QUFBQSxXQUFLLGNBQUlDLENBQUosRUFBTyxTQUFQLENBQUw7QUFBQSxHQWRPO0FBZW5CO0FBQ0FDLGdCQUFjO0FBQUEsV0FBSyxjQUFJRCxDQUFKLEVBQU8sV0FBUCxLQUF1QmhCLGdCQUE1QjtBQUFBLEdBaEJLO0FBaUJuQjtBQUNBa0IsZ0JBQWM7QUFBQSxXQUFLLGNBQUlGLENBQUosRUFBTyxXQUFQLEtBQXVCakIsZ0JBQTVCO0FBQUEsR0FsQks7QUFtQm5CO0FBQ0FvQixnQkFBYztBQUFBLFdBQUssY0FB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WTs7O0FBNklyQkEsYUFBYXlDLFNBQWIsR0FBeUIsY0FBekI7QUFDQXpDLGFBQWEzQixZQUFiLEdBQTRCQSxZQUE1QiIsImZpbGUiOiJwb2x5Z29uLWxheWVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDE1IC0gMjAxNyBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG5cbmltcG9ydCB7Q29tcG9zaXRlTGF5ZXIsIGdldH0gZnJvbSAnLi4vLi4vLi4vbGliJztcbmltcG9ydCBTb2xpZFBvbHlnb25MYXllciBmcm9tICcuLi9zb2xpZC1wb2x5Z29uLWxheWVyL3NvbGlkLXBvbHlnb24tbGF5ZXInO1xuaW1wb3J0IFBhdGhMYXllciBmcm9tICcuLi9wYXRoLWxheWVyL3BhdGgtbGF5ZXInO1xuaW1wb3J0ICogYXMgUG9seWdvbiBmcm9tICcuLi9zb2xpZC1wb2x5Z29uLWxheWVyL3BvbHlnb24nO1xuXG5jb25zdCBkZWZhdWx0TGluZUNvbG9yID0gWzB4MCwgMHgwLCAweDAsIDB4RkZdO1xuY29uc3QgZGVmYXVsdEZpbGxDb2xvciA9IFsweDAsIDB4MCwgMHgwLCAweEZGXTtcblxuY29uc3QgZGVmYXVsdFByb3BzID0ge1xuICBzdHJva2VkOiB0cnVlLFxuICBmaWxsZWQ6IHRydWUsXG4gIGV4dHJ1ZGVkOiBmYWxzZSxcbiAgZWxldmF0aW9uU2NhbGU6IDEsXG4gIHdpcmVmcmFtZTogZmFsc2UsXG5cbiAgbGluZVdpZHRoU2NhbGU6IDEsXG4gIGxpbmVXaWR0aE1pblBpeGVsczogMCxcbiAgbGluZVdpZHRoTWF4UGl4ZWxzOiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUixcbiAgbGluZUpvaW50Um91bmRlZDogZmFsc2UsXG4gIGxpbmVNaXRlckxpbWl0OiA0LFxuICBmcDY0OiBmYWxzZSxcblxuICBnZXRQb2x5Z29uOiBmID0+IGdldChmLCAncG9seWdvbicpLFxuICAvLyBQb2x5Z29uIGZpbGwgY29sb3JcbiAgZ2V0RmlsbENvbG9yOiBmID0+IGdldChmLCAnZmlsbENvbG9yJykgfHwgZGVmYXVsdEZpbGxDb2xvcixcbiAgLy8gUG9pbnQsIGxpbmUgYW5kIHBvbHlnb24gb3V0bGluZSBjb2xvclxuICBnZXRMaW5lQ29sb3I6IGYgPT4gZ2V0KGYsICdsaW5lQ29sb3InKSB8fCBkZWZhdWx0TGluZUNvbG9yLFxuICAvLyBMaW5lIGFuZCBwb2x5Z29uIG91dGxpbmUgYWNjZXNzb3JzXG4gIGdldExpbmVXaWR0aDogZiA9PiBnZXQoZiwgJ2xpbmVXaWR0aCcpIHx8IDEsXG4gIC8vIFBvbHlnb24gZXh0cnVzaW9uIGFjY2Vzc29yXG4gIGdldEVsZXZhdGlvbjogZiA9PiBnZXQoZiwgJ2VsZXZhdGlvbicpIHx8IDEwMDAsXG5cbiAgLy8gT3B0aW9uYWwgc2V0dGluZ3MgZm9yICdsaWdodGluZycgc2hhZGVyIG1vZHVsZVxuICBsaWdodFNldHRpbmdzOiB7XG4gICAgbGlnaHRzUG9zaXRpb246IFstMTIyLjQ1LCAzNy43NSwgODAwMCwgLTEyMi4wLCAzOC4wMCwgNTAwMF0sXG4gICAgYW1iaWVudFJhdGlvOiAwLjA1LFxuICAgIGRpZmZ1c2VSYXRpbzogMC42LFxuICAgIHNwZWN1bGFyUmF0aW86IDAuOCxcbiAgICBsaWdodHNTdHJlbmd0aDogWzIuMCwgMC4wLCAwLjAsIDAuMF0sXG4gICAgbnVtYmVyT2ZMaWdodHM6IDJcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9seWdvbkxheWVyIGV4dGVuZHMgQ29tcG9zaXRlTGF5ZXIge1xuICBpbml0aWFsaXplU3RhdGUoKSB7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHBhdGhzOiBbXVxuICAgIH07XG4gIH1cblxuICB1cGRhdGVTdGF0ZSh7b2xkUHJvcHMsIHByb3BzLCBjaGFuZ2VGbGFnc30pIHtcbiAgICBpZiAoY2hhbmdlRmxhZ3MuZGF0YUNoYW5nZWQpIHtcbiAgICAgIGNvbnN0IHtkYXRhLCBnZXRQb2x5Z29ufSA9IHRoaXMucHJvcHM7XG4gICAgICB0aGlzLnN0YXRlLnBhdGhzID0gW107XG4gICAgICBkYXRhLmZvckVhY2gob2JqZWN0ID0+IHtcbiAgICAgICAgY29uc3QgY29tcGxleFBvbHlnb24gPSBQb2x5Z29uLm5vcm1hbGl6ZShnZXRQb2x5Z29uKG9iamVjdCkpO1xuICAgICAgICBjb21wbGV4UG9seWdvbi5mb3JFYWNoKHBvbHlnb24gPT4gdGhpcy5zdGF0ZS5wYXRocy5wdXNoKHtcbiAgICAgICAgICBwYXRoOiBwb2x5Z29uLFxuICAgICAgICAgIG9iamVjdFxuICAgICAgICB9KSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBnZXRQaWNraW5nSW5mbyh7aW5mb30pIHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihpbmZvLCB7XG4gICAgICAvLyBvdmVycmlkZSBvYmplY3Qgd2l0aCBwaWNrZWQgZGF0YVxuICAgICAgb2JqZWN0OiAoaW5mby5vYmplY3QgJiYgaW5mby5vYmplY3Qub2JqZWN0KSB8fCBpbmZvLm9iamVjdFxuICAgIH0pO1xuICB9XG5cbiAgcmVuZGVyTGF5ZXJzKCkge1xuICAgIC8vIExheWVyIGNvbXBvc2l0aW9uIHByb3BzXG4gICAgY29uc3Qge2RhdGEsIGlkLCBzdHJva2VkLCBmaWxsZWQsIGV4dHJ1ZGVkLCB3aXJlZnJhbWUsIGVsZXZhdGlvblNjYWxlfSA9IHRoaXMucHJvcHM7XG5cbiAgICAvLyBSZW5kZXJpbmcgcHJvcHMgdW5kZXJseWluZyBsYXllclxuICAgIGNvbnN0IHtsaW5lV2lkdGhTY2FsZSwgbGluZVdpZHRoTWluUGl4ZWxzLCBsaW5lV2lkdGhNYXhQaXhlbHMsXG4gICAgICBsaW5lSm9pbnRSb3VuZGVkLCBsaW5lTWl0ZXJMaW1pdCwgZnA2NH0gPSB0aGlzLnByb3BzO1xuXG4gICAgLy8gQWNjZXNzb3IgcHJvcHMgZm9yIHVuZGVybHlpbmcgbGF5ZXJzXG4gICAgY29uc3Qge2dldEZpbGxDb2xvciwgZ2V0TGluZUNvbG9yLCBnZXRMaW5lV2lkdGgsIGdldEVsZXZhdGlvbixcbiAgICAgIGdldFBvbHlnb24sIHVwZGF0ZVRyaWdnZXJzLCBsaWdodFNldHRpbmdzfSA9IHRoaXMucHJvcHM7XG5cbiAgICAvLyBiYXNlIGxheWVyIHByb3BzXG4gICAgY29uc3Qge29wYWNpdHksIHBpY2thYmxlLCB2aXNpYmxlLCBnZXRQb2x5Z29uT2Zmc2V0fSA9IHRoaXMucHJvcHM7XG5cbiAgICAvLyB2aWV3cG9ydCBwcm9wc1xuICAgIGNvbnN0IHtwb3NpdGlvbk9yaWdpbiwgcHJvamVjdGlvbk1vZGUsIG1vZGVsTWF0cml4fSA9IHRoaXMucHJvcHM7XG5cbiAgICBjb25zdCB7cGF0aHN9ID0gdGhpcy5zdGF0ZTtcblxuICAgIGNvbnN0IGhhc0RhdGEgPSBkYXRhICYmIGRhdGEubGVuZ3RoID4gMDtcblxuICAgIC8vIEZpbGxlZCBQb2x5Z29uIExheWVyXG4gICAgY29uc3QgcG9seWdvbkxheWVyID0gZmlsbGVkICYmIGhhc0RhdGEgJiYgbmV3IFNvbGlkUG9seWdvbkxheWVyKHtcbiAgICAgIGlkOiBgJHtpZH0tZmlsbGAsXG4gICAgICBkYXRhLFxuICAgICAgZXh0cnVkZWQsXG4gICAgICBlbGV2YXRpb25TY2FsZSxcbiAgICAgIHdpcmVmcmFtZTogZmFsc2UsXG4gICAgICBmcDY0LFxuICAgICAgb3BhY2l0eSxcbiAgICAgIHBpY2thYmxlLFxuICAgICAgdmlzaWJsZSxcbiAgICAgIGdldFBvbHlnb25PZmZzZXQsXG4gICAgICBwcm9qZWN0aW9uTW9kZSxcbiAgICAgIHBvc2l0aW9uT3JpZ2luLFxuICAgICAgbW9kZWxNYXRyaXgsXG4gICAgICBnZXRQb2x5Z29uLFxuICAgICAgZ2V0RWxldmF0aW9uLFxuICAgICAgZ2V0Q29sb3I6IGdldEZpbGxDb2xvcixcbiAgICAgIHVwZGF0ZVRyaWdnZXJzOiB7XG4gICAgICAgIGdldEVsZXZhdGlvbjogdXBkYXRlVHJpZ2dlcnMuZ2V0RWxldmF0aW9uLFxuICAgICAgICBnZXRDb2xvcjogdXBkYXRlVHJpZ2dlcnMuZ2V0RmlsbENvbG9yXG4gICAgICB9LFxuICAgICAgbGlnaHRTZXR0aW5nc1xuICAgIH0pO1xuXG4gICAgY29uc3QgcG9seWdvbldpcmVmcmFtZUxheWVyID0gZXh0cnVkZWQgJiZcbiAgICAgIHdpcmVmcmFtZSAmJlxuICAgICAgaGFzRGF0YSAmJlxuICAgICAgbmV3IFNvbGlkUG9seWdvbkxheWVyKHtcbiAgICAgICAgaWQ6IGAke2lkfS13aXJlZnJhbWVgLFxuICAgICAgICBkYXRhLFxuICAgICAgICBleHRydWRlZDogdHJ1ZSxcbiAgICAgICAgZWxldmF0aW9uU2NhbGUsXG4gICAgICAgIHdpcmVmcmFtZTogdHJ1ZSxcbiAgICAgICAgZnA2NCxcbiAgICAgICAgb3BhY2l0eSxcbiAgICAgICAgcGlja2FibGUsXG4gICAgICAgIHZpc2libGUsXG4gICAgICAgIGdldFBvbHlnb25PZmZzZXQsXG4gICAgICAgIHByb2plY3Rpb25Nb2RlLFxuICAgICAgICBwb3NpdGlvbk9yaWdpbixcbiAgICAgICAgbW9kZWxNYXRyaXgsXG4gICAgICAgIGdldFBvbHlnb24sXG4gICAgICAgIGdldEVsZXZhdGlvbixcbiAgICAgICAgZ2V0Q29sb3I6IGdldExpbmVDb2xvcixcbiAgICAgICAgdXBkYXRlVHJpZ2dlcnM6IHtcbiAgICAgICAgICBnZXRFbGV2YXRpb246IHVwZGF0ZVRyaWdnZXJzLmdldEVsZXZhdGlvbixcbiAgICAgICAgICBnZXRDb2xvcjogdXBkYXRlVHJpZ2dlcnMuZ2V0TGluZUNvbG9yXG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgLy8gUG9seWdvbiBsaW5lIGxheWVyXG4gICAgY29uc3QgcG9seWdvbkxpbmVMYXllciA9ICFleHRydWRlZCAmJlxuICAgICAgc3Ryb2tlZCAmJlxuICAgICAgaGFzRGF0YSAmJlxuICAgICAgbmV3IFBhdGhMYXllcih7XG4gICAgICAgIGlkOiBgJHtpZH0tc3Ryb2tlYCxcbiAgICAgICAgZGF0YTogcGF0aHMsXG4gICAgICAgIHdpZHRoU2NhbGU6IGxpbmVXaWR0aFNjYWxlLFxuICAgICAgICB3aWR0aE1pblBpeGVsczogbGluZVdpZHRoTWluUGl4ZWxzLFxuICAgICAgICB3aWR0aE1heFBpeGVsczogbGluZVdpZHRoTWF4UGl4ZWxzLFxuICAgICAgICByb3VuZGVkOiBsaW5lSm9pbnRSb3VuZGVkLFxuICAgICAgICBtaXRlckxpbWl0OiBsaW5lTWl0ZXJMaW1pdCxcbiAgICAgICAgZnA2NCxcbiAgICAgICAgb3BhY2l0eSxcbiAgICAgICAgcGlja2FibGUsXG4gICAgICAgIHZpc2libGUsXG4gICAgICAgIGdldFBvbHlnb25PZmZzZXQsXG4gICAgICAgIHByb2plY3Rpb25Nb2RlLFxuICAgICAgICBwb3NpdGlvbk9yaWdpbixcbiAgICAgICAgbW9kZWxNYXRyaXgsXG4gICAgICAgIGdldFBhdGg6IHggPT4geC5wYXRoLFxuICAgICAgICBnZXRDb2xvcjogZ2V0TGluZUNvbG9yLFxuICAgICAgICBnZXRXaWR0aDogZ2V0TGluZVdpZHRoLFxuICAgICAgICB1cGRhdGVUcmlnZ2Vyczoge1xuICAgICAgICAgIGdldFdpZHRoOiB1cGRhdGVUcmlnZ2Vycy5nZXRMaW5lV2lkdGgsXG4gICAgICAgICAgZ2V0Q29sb3I6IHVwZGF0ZVRyaWdnZXJzLmdldExpbmVDb2xvclxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgIHJldHVybiBbXG4gICAgICAvLyBJZiBub3QgZXh0cnVkZWQ6IGZsYXQgZmlsbCBsYXllciBpcyBkcmF3biBiZWxvdyBvdXRsaW5lc1xuICAgICAgIWV4dHJ1ZGVkICYmIHBvbHlnb25MYXllcixcbiAgICAgIHBvbHlnb25XaXJlZnJhbWVMYXllcixcbiAgICAgIHBvbHlnb25MaW5lTGF5ZXIsXG4gICAgICAvLyBJZiBleHRydWRlZDogZHJhdyBmaWxsIGxheWVyIGxhc3QgZm9yIGNvcnJlY3QgYmxlbmRpbmcgYmVoYXZpb3JcbiAgICAgIGV4dHJ1ZGVkICYmIHBvbHlnb25MYXllclxuICAgIF07XG4gIH1cbn1cblxuUG9seWdvbkxheWVyLmxheWVyTmFtZSA9ICdQb2x5Z29uTGF5ZXInO1xuUG9seWdvbkxheWVyLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbiJdfQ==