'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
// import {tapeEquals} from './index';


var _ = require('../');

var _tapeCatch = require('tape-catch');

var _tapeCatch2 = _interopRequireDefault(_tapeCatch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _tapeCatch2.default)('Math#types', function (t) {
  t.equals(typeof _.isArray === 'undefined' ? 'undefined' : _typeof(_.isArray), 'function');
  t.end();
});

(0, _tapeCatch2.default)('Math#construct and isArray check', function (t) {
  t.ok((0, _.isArray)([]), 'isArray([])');
  t.ok((0, _.isArray)(new Float32Array(1)), 'isArray(Float32Array)');
  t.notOk((0, _.isArray)(new ArrayBuffer(4)), 'isArray(ArrayBuffer)');
  t.notOk((0, _.isArray)(new DataView(new ArrayBuffer(16))), 'isArray(DataView)');

  t.notOk((0, _.isArray)(undefined), 'isArray(undefined)');
  t.notOk((0, _.isArray)(null), 'isArray(null)');
  t.notOk((0, _.isArray)({}), 'isArray({})');
  t.notOk((0, _.isArray)({ length: 0 }), 'isArray({...})');
  t.notOk((0, _.isArray)(1), 'isArray(1)');
  t.notOk((0, _.isArray)(NaN), 'isArray(NaN)');
  t.notOk((0, _.isArray)('NaN'), 'isArray(\'NaN\')');
  t.notOk((0, _.isArray)(''), 'isArray(\'\')');

  t.end();
});
//# sourceMappingURL=common.spec.js.map