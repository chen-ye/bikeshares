{"version":3,"sources":["../../../../src/packages/math/src/quaternion.js"],"names":["validateQuaternion","q","length","Number","isFinite","Quaternion","x","y","z","w","Array","isArray","arguments","copy","set","m","check","a","b","undefined","Error","vectorA","vectorB","t","rad","i","j","k","l","axis","value"],"mappings":"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","file":"quaternion.js","sourcesContent":["import MathArray from './math-array';\nimport {checkNumber} from './common';\n\n// gl-matrix is too big. Cherry-pick individual imports from stack.gl version\n/* eslint-disable camelcase */\nimport quat_fromMat3 from 'gl-quat/fromMat3';\nimport quat_identity from 'gl-quat/identity';\nimport quat_length from 'gl-quat/length';\nimport quat_squaredLength from 'gl-quat/squaredLength';\nimport quat_dot from 'gl-quat/dot';\n// import quat_getAxisAngle from 'gl-quat/getAxisAngle';\nimport quat_rotationTo from 'gl-quat/rotationTo';\nimport quat_add from 'gl-quat/add';\nimport quat_calculateW from 'gl-quat/calculateW';\nimport quat_conjugate from 'gl-quat/conjugate';\nimport quat_invert from 'gl-quat/invert';\nimport quat_lerp from 'gl-quat/lerp';\nimport quat_multiply from 'gl-quat/multiply';\nimport quat_normalize from 'gl-quat/normalize';\nimport quat_rotateX from 'gl-quat/rotateX';\nimport quat_rotateY from 'gl-quat/rotateY';\nimport quat_rotateZ from 'gl-quat/rotateZ';\nimport quat_scale from 'gl-quat/scale';\nimport quat_set from 'gl-quat/set';\nimport quat_setAxisAngle from 'gl-quat/setAxisAngle';\nimport quat_slerp from 'gl-quat/slerp';\n\nexport function validateQuaternion(q) {\n  return q.length === 4 &&\n    Number.isFinite(q[0]) && Number.isFinite(q[1]) &&\n    Number.isFinite(q[2]) && Number.isFinite(q[3]);\n}\n\nexport default class Quaternion extends MathArray {\n  // Creates a new identity quat\n  constructor(x = 0, y = 0, z = 0, w = 1) {\n    super();\n    if (Array.isArray(x) && arguments.length === 1) {\n      this.copy(x);\n    } else {\n      this.set(x, y, z, w);\n    }\n  }\n\n  // Creates a quaternion from the given 3x3 rotation matrix.\n  // NOTE: The resultant quaternion is not normalized, so you should\n  // be sure to renormalize the quaternion yourself where necessary.\n  fromMatrix3(m) {\n    quat_fromMat3(this, m);\n    this.check();\n    return this;\n  }\n\n  // Creates a new quat initialized with the given values\n  fromValues(x, y, z, w) {\n    return this.set(x, y, z, w);\n  }\n\n  // Set a quat to the identity quaternion\n  identity() {\n    quat_identity(this);\n    this.check();\n    return this;\n  }\n\n  // Getters/setters\n  /* eslint-disable no-multi-spaces, brace-style, no-return-assign */\n  get ELEMENTS() { return 4; }\n  get x()      { return this[0]; }\n  set x(value) { return this[0] = checkNumber(value); }\n  get y()      { return this[1]; }\n  set y(value) { return this[1] = checkNumber(value); }\n  get z()      { return this[2]; }\n  set z(value) { return this[2] = checkNumber(value); }\n  get w()      { return this[3]; }\n  set w(value) { return this[3] = checkNumber(value); }\n  /* eslint-enable no-multi-spaces, brace-style, no-return-assign */\n\n  // Calculates the length of a quat\n  length() {\n    return quat_length(this);\n  }\n\n  // Calculates the squared length of a quat\n  squaredLength(a) {\n    return quat_squaredLength(this);\n  }\n\n  // Calculates the dot product of two quat's\n  // @return {Number}\n  dot(a, b) {\n    if (b !== undefined) {\n      throw new Error('Quaternion.dot only takes one argument');\n    }\n    return quat_dot(this, a);\n  }\n\n  // Gets the rotation axis and angle for a given quaternion.\n  // If a quaternion is created with setAxisAngle, this method will\n  // return the same values as providied in the original parameter\n  // list OR functionally equivalent values.\n  // Example: The quaternion formed by axis [0, 0, 1] and angle -90\n  // is the same as the quaternion formed by [0, 0, 1] and 270.\n  // This method favors the latter.\n  // @return {{[x,y,z], Number}}\n  // getAxisAngle() {\n  //   const axis = [];\n  //   const angle = quat_getAxisAngle(axis, this);\n  //   return {axis, angle};\n  // }\n\n  // MODIFIERS\n\n  // Sets a quaternion to represent the shortest rotation from one vector\n  // to another. Both vectors are assumed to be unit length.\n  rotationTo(vectorA, vectorB) {\n    quat_rotationTo(this, vectorA, vectorB);\n    this.check();\n    return this;\n  }\n\n  // Sets the specified quaternion with values corresponding to the given axes.\n  // Each axis is a vec3 and is expected to be unit length and perpendicular\n  // to all other specified axes.\n  // setAxes() {\n  //   Number\n  // }\n\n  // Performs a spherical linear interpolation with two control points\n  // sqlerp() {\n  //   Number;\n  // }\n\n  // Adds two quat's\n  add(a, b) {\n    if (b !== undefined) {\n      throw new Error('Quaternion.add only takes one argument');\n    }\n    quat_add(this, a);\n    this.check();\n    return this;\n  }\n\n  // Calculates the W component of a quat from the X, Y, and Z components.\n  // Any existing W component will be ignored.\n  calculateW() {\n    quat_calculateW(this, this);\n    this.check();\n    return this;\n  }\n\n  // Calculates the conjugate of a quat If the quaternion is normalized,\n  // this function is faster than quat_inverse and produces the same result.\n  conjugate() {\n    quat_conjugate(this, this);\n    this.check();\n    return this;\n  }\n\n  // Calculates the inverse of a quat\n  invert() {\n    quat_invert(this, this);\n    this.check();\n    return this;\n  }\n\n  // Performs a linear interpolation between two quat's\n  lerp(a, b, t) {\n    quat_lerp(this, a, b, t);\n    this.check();\n    return this;\n  }\n\n  // Multiplies two quat's\n  multiply(a, b) {\n    if (b !== undefined) {\n      throw new Error('Quaternion.multiply only takes one argument');\n    }\n    quat_multiply(this, this, b);\n    this.check();\n    return this;\n  }\n\n  // Normalize a quat\n  normalize() {\n    quat_normalize(this, this);\n    this.check();\n    return this;\n  }\n\n  // Rotates a quaternion by the given angle about the X axis\n  rotateX(rad) {\n    quat_rotateX(this, this, rad);\n    this.check();\n    return this;\n  }\n\n  // Rotates a quaternion by the given angle about the Y axis\n  rotateY(rad) {\n    quat_rotateY(this, this, rad);\n    this.check();\n    return this;\n  }\n\n  // Rotates a quaternion by the given angle about the Z axis\n  rotateZ(rad) {\n    quat_rotateZ(this, this, rad);\n    this.check();\n    return this;\n  }\n\n  // Scales a quat by a scalar number\n  scale(b) {\n    quat_scale(this, this, b);\n    this.check();\n    return this;\n  }\n\n  // Set the components of a quat to the given values\n  set(i, j, k, l) {\n    quat_set(this, i, j, k, l);\n    this.check();\n    return this;\n  }\n\n  // Sets a quat from the given angle and rotation axis, then returns it.\n  setAxisAngle(axis, rad) {\n    quat_setAxisAngle(this, axis, rad);\n    this.check();\n    return this;\n  }\n\n  // Performs a spherical linear interpolation between two quat\n  slerp(a, b, t) {\n    quat_slerp(this, a, b, t);\n    this.check();\n    return this;\n  }\n}\n"]}