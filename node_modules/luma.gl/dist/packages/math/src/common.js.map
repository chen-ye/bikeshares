{"version":3,"sources":["../../../../src/packages/math/src/common.js"],"names":["configure","checkNumber","formatValue","isArray","clone","radians","degrees","sin","cos","tan","asin","acos","atan","clamp","equals","config","EPSILON","debug","printRowMajor","precision","options","epsilon","value","Number","isFinite","Error","parseFloat","toPrecision","Array","ArrayBuffer","isView","length","undefined","array","map","func","result","i","Math","PI","angle","min","max","a","b","abs"],"mappings":"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","file":"common.js","sourcesContent":["/* eslint-disable no-shadow */\n// TODO - remove\nconst config = {};\nconfig.EPSILON = 1e-12;\nconfig.debug = true;\nconfig.printRowMajor = true;\nconfig.precision = 4;\nexport {config};\n\nexport function configure(options) {\n  if ('epsilon' in options) {\n    config.EPSILON = options.epsilon;\n  }\n\n  if ('debug' in options) {\n    config.debug = options.debug;\n  }\n}\n\nexport function checkNumber(value) {\n  if (!Number.isFinite(value)) {\n    throw new Error(`Invalid number ${value}`);\n  }\n  return value;\n}\n\nexport function formatValue(value, precision = config.precision || 4) {\n  return parseFloat(value.toPrecision(precision));\n}\n\n// Returns true if value is either an array or a typed array\n// Note: does not return true for ArrayBuffers and DataViews\nexport function isArray(value) {\n  return Array.isArray(value) || (ArrayBuffer.isView(value) && value.length !== undefined);\n}\n\n// If the array has a clone function, calls it, otherwise returns a copy\nexport function clone(array) {\n  return array.clone ? array.clone() : new Array(array);\n}\n\n// If the argument value is an array, applies the func element wise,\n// otherwise applies func to the argument value\nfunction map(value, func) {\n  if (isArray(value)) {\n    const result = clone(value);\n    for (let i = 0; i < result.length; ++i) {\n      result[i] = func(result[i], i, result);\n    }\n    return result;\n  }\n  return func(value);\n}\n\n//\n// GLSL math function equivalents\n// Works on both single values and vectors\n//\n\nexport function radians(degrees) {\n  return map(degrees, degrees => degrees / 180 * Math.PI);\n}\n\n// GLSL equivalent: Works on single values and vectors\nexport function degrees(radians) {\n  return map(radians, radians => radians * 180 / Math.PI);\n}\n\n// GLSL equivalent: Works on single values and vectors\nexport function sin(radians) {\n  return map(radians, angle => Math.sin(angle));\n}\n\n// GLSL equivalent: Works on single values and vectors\nexport function cos(radians) {\n  return map(radians, angle => Math.cos(angle));\n}\n\n// GLSL equivalent: Works on single values and vectors\nexport function tan(radians) {\n  return map(radians, angle => Math.tan(angle));\n}\n\n// GLSL equivalent: Works on single values and vectors\nexport function asin(radians) {\n  return map(radians, angle => Math.asin(angle));\n}\n\n// GLSL equivalent: Works on single values and vectors\nexport function acos(radians) {\n  return map(radians, angle => Math.acos(angle));\n}\n\n// GLSL equivalent: Works on single values and vectors\nexport function atan(radians) {\n  return map(radians, angle => Math.atan(angle));\n}\n\nexport function clamp(value, min, max) {\n  return map(value, value => Math.max(min, Math.min(max, value)));\n}\n\nexport function equals(a, b) {\n  if (Array.isArray(a) && Array.isArray(b)) {\n    if (a === b) {\n      return true;\n    }\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (let i = 0; i < a.length; ++i) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return Math.abs(a - b) <= config.EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\n"]}