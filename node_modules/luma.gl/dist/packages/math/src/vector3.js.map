{"version":3,"sources":["../../../../src/packages/math/src/vector3.js"],"names":["validateVector3","v","length","Number","isFinite","Vector3","x","y","z","Array","isArray","arguments","copy","set","check","vector","vectors","scale","coeff","operation","args","value"],"mappings":"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","file":"vector3.js","sourcesContent":["import MathArray from './math-array';\nimport {checkNumber} from './common';\n\n// gl-matrix is too big. Cherry-pick individual imports from stack.gl version\n/* eslint-disable camelcase */\nimport vec3_set from 'gl-vec3/set';\nimport vec3_length from 'gl-vec3/length';\nimport vec3_distance from 'gl-vec3/distance';\nimport vec3_angle from 'gl-vec3/angle';\nimport vec3_add from 'gl-vec3/add';\nimport vec3_subtract from 'gl-vec3/subtract';\nimport vec3_multiply from 'gl-vec3/multiply';\nimport vec3_divide from 'gl-vec3/divide';\nimport vec3_scale from 'gl-vec3/scale';\nimport vec3_scaleAndAdd from 'gl-vec3/scaleAndAdd';\nimport vec3_negate from 'gl-vec3/negate';\nimport vec3_inverse from 'gl-vec3/inverse';\nimport vec3_normalize from 'gl-vec3/normalize';\nimport vec3_dot from 'gl-vec3/dot';\nimport vec3_cross from 'gl-vec3/cross';\nimport vec3_lerp from 'gl-vec3/lerp';\n\nexport function validateVector3(v) {\n  return v.length === 3 &&\n    Number.isFinite(v[0]) && Number.isFinite(v[1]) && Number.isFinite(v[2]);\n}\n\nexport default class Vector3 extends MathArray {\n  // Creates a new vec3, either empty, or from an array or from values\n  constructor(x = 0, y = 0, z = 0) {\n    super();\n    if (Array.isArray(x) && arguments.length === 1) {\n      this.copy(x);\n    } else {\n      this.set(x, y, z);\n    }\n  }\n\n  // fromArray(array) {\n  //   if (array instanceof Vector3) {\n  //     return array;\n  //   }\n  //   return new Vector3(...array);\n  // }\n\n  set(x, y, z) {\n    vec3_set(this, x, y, z);\n    this.check();\n    return this;\n  }\n\n  // Getters/setters\n  /* eslint-disable no-multi-spaces, brace-style, no-return-assign */\n  get ELEMENTS() { return 3; }\n  get x()      { return this[0]; }\n  set x(value) { return this[0] = checkNumber(value); }\n  get y()      { return this[1]; }\n  set y(value) { return this[1] = checkNumber(value); }\n  get z()      { return this[2]; }\n  set z(value) { return this[2] = checkNumber(value); }\n  /* eslint-enable no-multi-spaces, brace-style, no-return-assign */\n\n  length() {\n    return vec3_length(this);\n  }\n\n  distance(vector) {\n    return vec3_distance(this, vector);\n  }\n\n  angle(vector) {\n    return vec3_angle(this, vector);\n  }\n\n  // MODIFIERS\n\n  add(...vectors) {\n    for (const vector of vectors) {\n      vec3_add(this, vector);\n    }\n    this.check();\n    return this;\n  }\n\n  subtract(...vectors) {\n    for (const vector of vectors) {\n      vec3_subtract(this, vector);\n    }\n    this.check();\n    return this;\n  }\n\n  multiply(...vectors) {\n    for (const vector of vectors) {\n      vec3_multiply(this, vector);\n    }\n    this.check();\n    return this;\n  }\n\n  divide(...vectors) {\n    for (const vector of vectors) {\n      vec3_divide(this, vector);\n    }\n    this.check();\n    return this;\n  }\n\n  scale(scale) {\n    if (Number.isFinite(scale)) {\n      vec3_scale(this, this, scale);\n    } else {\n      vec3_dot(this, this, scale);\n    }\n    this.check();\n    return this;\n  }\n\n  scaleAndAdd(vector, scale) {\n    vec3_scaleAndAdd(this, this, vector, scale);\n    this.check();\n    return this;\n  }\n\n  negate() {\n    vec3_negate(this, this);\n    this.check();\n    return this;\n  }\n\n  inverse() {\n    vec3_inverse(this, this);\n    this.check();\n    return this;\n  }\n\n  normalize() {\n    vec3_normalize(this, this);\n    this.check();\n    return this;\n  }\n\n  dot(vector) {\n    return vec3_dot(this, vector);\n  }\n\n  cross(vector) {\n    vec3_cross(this, this, vector);\n    this.check();\n    return this;\n  }\n\n  lerp(vector, coeff) {\n    vec3_lerp(this, this, vector, coeff);\n    this.check();\n    return this;\n  }\n\n  operation(operation, ...args) {\n    operation(this, this, ...args);\n    this.check();\n    return this;\n  }\n}\n"]}