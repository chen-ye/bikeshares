{"version":3,"sources":["../../../../src/packages/math/src/euler.js"],"names":["ERR_UNKNOWN_ORDER","ALMOST_ONE","validateOrder","value","checkOrder","Error","Euler","order","RotationOrders","ZYX","x","y","z","DefaultOrder","arguments","length","Array","isArray","fromVector3","set","array","i","Number","isFinite","check","offset","optionalResult","v","undefined","roll","pitch","yaw","q","_fromRotationMatrix","fromQuaternion","m","_getRotationMatrix","XYZ","rotateX","rotateY","rotateZ","YXZ","ZXY","YZX","XZY","te","elements","m11","m12","m13","m21","m22","m23","m31","m32","m33","Math","asin","abs","atan2","a","cos","c","e","b","sin","d","f","ae","af","be","bf","ce","cf","de","df","ac","ad","bc","bd"],"mappings":"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","file":"euler.js","sourcesContent":["import MathArray from './math-array';\nimport {checkNumber, clamp} from './common';\nimport Matrix4 from './matrix4';\nimport Quaternion from './quaternion';\nimport Vector3 from './vector3';\n\n// Internal constants\nconst ERR_UNKNOWN_ORDER = 'Unknown Euler angle order';\nconst ALMOST_ONE = 0.99999;\n\nfunction validateOrder(value) {\n  return (value >= 0 && value < 6);\n}\n\nfunction checkOrder(value) {\n  if (value < 0 && value >= 6) {\n    throw new Error(ERR_UNKNOWN_ORDER);\n  }\n  return value;\n}\n\nexport default class Euler extends MathArray {\n\n  // Constants\n  /* eslint-disable no-multi-spaces, brace-style, no-return-assign */\n  static get ZYX() { return 0; }\n  static get YXZ() { return 1; }\n  static get XZY() { return 2; }\n  static get ZXY() { return 3; }\n  static get YZX() { return 4; }\n  static get XYZ() { return 5; }\n  static get RollPitchYaw() { return 0; }\n\n  static get DefaultOrder() { return Euler.ZYX; }\n  static get RotationOrders() {\n    return ['ZYX', 'YXZ', 'XZY', 'ZXY', 'YZX', 'XYZ'];\n  }\n  static rotationOrder(order) { return Euler.RotationOrders[order]; }\n\n  get ELEMENTS() { return 4; }\n  /* eslint-enable no-multi-spaces, brace-style, no-return-assign */\n\n  /*\n   * Number|Number[], Number, Number, Number\n   */\n  constructor(x = 0, y = 0, z = 0, order = Euler.DefaultOrder) {\n    super();\n    if (arguments.length > 0 && Array.isArray(arguments[0])) {\n      this.fromVector3(...arguments);\n    } else {\n      this.set(x, y, z, order);\n    }\n  }\n\n  // If copied array does contain fourth element, preserves currently set order\n  copy(array) {\n    for (let i = 0; i < 3; ++i) {\n      this[i] = array[i];\n    }\n    this[3] = Number.isFinite(array[3]) || this.order;\n    this.check();\n    return this;\n  }\n\n  // Sets the three angles, and optionally sets the rotation order\n  // If order is not specified, preserves currently set order\n  set(x = 0, y = 0, z = 0, order) {\n    this[0] = x;\n    this[1] = y;\n    this[2] = z;\n    this[3] = Number.isFinite(order) ? order : this[3];\n    this.check();\n    return this;\n  }\n\n  validate() {\n    return validateOrder(this[3]) &&\n      Number.isFinite(this[0]) &&\n      Number.isFinite(this[1]) &&\n      Number.isFinite(this[2]);\n  }\n\n  // Does not copy the orientation element\n  toArray(array = [], offset = 0) {\n    array[offset] = this[0];\n    array[offset + 1] = this[1];\n    array[offset + 2] = this[2];\n    return array;\n  }\n\n  // Copies the orientation element\n  toArray4(array = [], offset = 0) {\n    array[offset] = this[0];\n    array[offset + 1] = this[1];\n    array[offset + 2] = this[2];\n    array[offset + 3] = this[3];\n    return array;\n  }\n\n  toVector3(optionalResult) {\n    if (optionalResult) {\n      return optionalResult.set(this[0], this[1], this[2]);\n    }\n    return new Vector3(this[0], this[1], this[2]);\n  }\n\n  /* eslint-disable no-multi-spaces, brace-style, no-return-assign */\n  // x, y, z angle notation (note: only corresponds to axis in XYZ orientation)\n  get x()      { return this[0]; }\n  set x(value) { return this[0] = checkNumber(value); }\n  get y()      { return this[1]; }\n  set y(value) { return this[1] = checkNumber(value); }\n  get z()      { return this[2]; }\n  set z(value) { return this[2] = checkNumber(value); }\n\n  // alpha, beta, gamma angle notation\n  get alpha()      { return this[0]; }\n  set alpha(value) { return this[0] = checkNumber(value); }\n  get beta()       { return this[1]; }\n  set beta(value)  { return this[1] = checkNumber(value); }\n  get gamma()      { return this[2]; }\n  set gamma(value) { return this[2] = checkNumber(value); }\n\n  // phi, theta, psi angle notation\n  get phi()        { return this[0]; }\n  set phi(value)   { return this[0] = checkNumber(value); }\n  get theta()      { return this[1]; }\n  set theta(value) { return this[1] = checkNumber(value); }\n  get psi()        { return this[2]; }\n  set psi(value)   { return this[2] = checkNumber(value); }\n\n  // rotation order, in all three angle notations\n  get order()      { return this[3]; }\n  set order(value) { return this[3] = checkOrder(value); }\n  /* eslint-disable no-multi-spaces, brace-style, no-return-assign */\n\n  // Constructors\n  fromVector3(v, order) {\n    return this.set(v[0], v[1], v[2], Number.isFinite(order) ? order : this[3]);\n  }\n\n  // TODO - with and without 4th element\n  fromArray(array, offset = 0) {\n    this[0] = array[0 + offset];\n    this[1] = array[1 + offset];\n    this[2] = array[2 + offset];\n    if (array[3] !== undefined) {\n      this[3] = array[3];\n    }\n    this.check();\n    return this;\n  }\n\n  // Common ZYX rotation order\n  fromRollPitchYaw(roll, pitch, yaw) {\n    return this.set(roll, pitch, yaw, Euler.ZYX);\n  }\n\n  fromQuaternion(q, order) {\n    this._fromRotationMatrix(Matrix4.fromQuaternion(q), order);\n    this.check();\n    return this;\n  }\n\n  fromRotationMatrix(m, order = Euler.DefaultOrder) {\n    this._fromRotationMatrix(m, order);\n    this.check();\n    return this;\n  }\n\n  // ACCESSORS\n\n  // @return {Matrix4} a rotation matrix corresponding to rotations\n  //   per the specified euler angles\n  getRotationMatrix(m = new Matrix4()) {\n    this._getRotationMatrix(m);\n    return m;\n  }\n\n  getQuaternion() {\n    const q = new Quaternion();\n    switch (this[4]) {\n    case Euler.XYZ:\n      return q.rotateX(this[0]).rotateY(this[1]).rotateZ(this[2]);\n    case Euler.YXZ:\n      return q.rotateY(this[0]).rotateX(this[1]).rotateZ(this[2]);\n    case Euler.ZXY:\n      return q.rotateZ(this[0]).rotateX(this[1]).rotateY(this[2]);\n    case Euler.ZYX:\n      return q.rotateZ(this[0]).rotateY(this[1]).rotateX(this[2]);\n    case Euler.YZX:\n      return q.rotateY(this[0]).rotateZ(this[1]).rotateX(this[2]);\n    case Euler.XZY:\n      return q.rotateX(this[0]).rotateZ(this[1]).rotateY(this[2]);\n    default:\n      throw new Error(ERR_UNKNOWN_ORDER);\n    }\n  }\n\n  // INTERNAL METHODS\n\n  // Concersion from Euler to rotation matrix and from matrix to Euler\n  // Adapted from three.js under MIT license\n\n  // // WARNING: this discards revolution information -bhouston\n  // reorder(newOrder) {\n  //   const q = new Quaternion().setFromEuler(this);\n  //   return this.setFromQuaternion(q, newOrder);\n\n  /* eslint-disable complexity, max-statements, one-var */\n  _fromRotationMatrix(m, order = Euler.DefaultOrder) {\n    // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n    const te = m.elements;\n    const m11 = te[0], m12 = te[4], m13 = te[8];\n    const m21 = te[1], m22 = te[5], m23 = te[9];\n    const m31 = te[2], m32 = te[6], m33 = te[10];\n\n    order = order || this[3];\n\n    switch (order) {\n    case Euler.XYZ:\n      this[1] = Math.asin(clamp(m13, -1, 1));\n\n      if (Math.abs(m13) < ALMOST_ONE) {\n        this[0] = Math.atan2(-m23, m33);\n        this[2] = Math.atan2(-m12, m11);\n      } else {\n        this[0] = Math.atan2(m32, m22);\n        this[2] = 0;\n      }\n      break;\n\n    case Euler.YXZ:\n      this[0] = Math.asin(-clamp(m23, -1, 1));\n\n      if (Math.abs(m23) < ALMOST_ONE) {\n        this[1] = Math.atan2(m13, m33);\n        this[2] = Math.atan2(m21, m22);\n      } else {\n        this[1] = Math.atan2(-m31, m11);\n        this[2] = 0;\n      }\n      break;\n\n    case Euler.ZXY:\n      this[0] = Math.asin(clamp(m32, -1, 1));\n\n      if (Math.abs(m32) < ALMOST_ONE) {\n        this[1] = Math.atan2(-m31, m33);\n        this[2] = Math.atan2(-m12, m22);\n      } else {\n        this[1] = 0;\n        this[2] = Math.atan2(m21, m11);\n      }\n      break;\n\n    case Euler.ZYX:\n      this[1] = Math.asin(-clamp(m31, -1, 1));\n\n      if (Math.abs(m31) < ALMOST_ONE) {\n        this[0] = Math.atan2(m32, m33);\n        this[2] = Math.atan2(m21, m11);\n      } else {\n        this[0] = 0;\n        this[2] = Math.atan2(-m12, m22);\n      }\n      break;\n\n    case Euler.YZX:\n      this[2] = Math.asin(clamp(m21, -1, 1));\n\n      if (Math.abs(m21) < ALMOST_ONE) {\n        this[0] = Math.atan2(-m23, m22);\n        this[1] = Math.atan2(-m31, m11);\n      } else {\n        this[0] = 0;\n        this[1] = Math.atan2(m13, m33);\n      }\n      break;\n\n    case Euler.XZY:\n      this[2] = Math.asin(-clamp(m12, -1, 1));\n\n      if (Math.abs(m12) < ALMOST_ONE) {\n        this[0] = Math.atan2(m32, m22);\n        this[1] = Math.atan2(m13, m11);\n      } else {\n        this[0] = Math.atan2(-m23, m33);\n        this[1] = 0;\n      }\n      break;\n\n    default:\n      throw new Error(ERR_UNKNOWN_ORDER);\n    }\n\n    this[3] = order;\n\n    return this;\n  }\n\n  _getRotationMatrix() {\n    const te = new Matrix4();\n\n    const x = this.x, y = this.y, z = this.z;\n    const a = Math.cos(x);\n    const c = Math.cos(y);\n    const e = Math.cos(z);\n    const b = Math.sin(x);\n    const d = Math.sin(y);\n    const f = Math.sin(z);\n\n    switch (this[3]) {\n    case Euler.XYZ: {\n      const ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n      te[0] = c * e;\n      te[4] = -c * f;\n      te[8] = d;\n\n      te[1] = af + be * d;\n      te[5] = ae - bf * d;\n      te[9] = -b * c;\n\n      te[2] = bf - ae * d;\n      te[6] = be + af * d;\n      te[10] = a * c;\n      break;\n    }\n\n    case Euler.YXZ: {\n      const ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n      te[0] = ce + df * b;\n      te[4] = de * b - cf;\n      te[8] = a * d;\n\n      te[1] = a * f;\n      te[5] = a * e;\n      te[9] = -b;\n\n      te[2] = cf * b - de;\n      te[6] = df + ce * b;\n      te[10] = a * c;\n      break;\n    }\n\n    case Euler.ZXY: {\n      const ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n      te[0] = ce - df * b;\n      te[4] = -a * f;\n      te[8] = de + cf * b;\n\n      te[1] = cf + de * b;\n      te[5] = a * e;\n      te[9] = df - ce * b;\n\n      te[2] = -a * d;\n      te[6] = b;\n      te[10] = a * c;\n      break;\n    }\n\n    case Euler.ZYX: {\n      const ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n      te[0] = c * e;\n      te[4] = be * d - af;\n      te[8] = ae * d + bf;\n\n      te[1] = c * f;\n      te[5] = bf * d + ae;\n      te[9] = af * d - be;\n\n      te[2] = -d;\n      te[6] = b * c;\n      te[10] = a * c;\n      break;\n    }\n\n    case Euler.YZX: {\n      const ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n      te[0] = c * e;\n      te[4] = bd - ac * f;\n      te[8] = bc * f + ad;\n\n      te[1] = f;\n      te[5] = a * e;\n      te[9] = -b * e;\n\n      te[2] = -d * e;\n      te[6] = ad * f + bc;\n      te[10] = ac - bd * f;\n      break;\n    }\n\n    case Euler.XZY: {\n      const ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n      te[0] = c * e;\n      te[4] = -f;\n      te[8] = d * e;\n\n      te[1] = ac * f + bd;\n      te[5] = a * e;\n      te[9] = ad * f - bc;\n\n      te[2] = bc * f - ad;\n      te[6] = b * e;\n      te[10] = bd * f + ac;\n      break;\n    }\n\n    default:\n      throw new Error(ERR_UNKNOWN_ORDER);\n    }\n\n    // last column\n    te[3] = 0;\n    te[7] = 0;\n    te[11] = 0;\n\n    // bottom row\n    te[12] = 0;\n    te[13] = 0;\n    te[14] = 0;\n    te[15] = 1;\n\n    return this;\n  }\n  /* eslint-enable complexity, max-statements, one-var */\n}\n"]}