{"version":3,"sources":["../../../../packages/io/browser-io/browser-compress-image.js"],"names":["compressImage","image","type","HTMLCanvasElement","canvas","toDataURL","Image","document","createElement","width","height","getContext","drawImage","data","replace","result","process","nextTick","end","Buffer"],"mappings":";;;;;QAegBA,a,GAAAA,a;;AAXhB;;;;AACA;;;;;;AAEA;;;;;;;;AAPA;AACA;;AAEA;AAYO,SAASA,aAAT,CAAuBC,KAAvB,EAA8BC,IAA9B,EAAoC;AACzC,MAAID,iBAAiBE,iBAArB,EAAwC;AACtC,QAAMC,UAASH,KAAf;AACA,WAAOG,QAAOC,SAAP,CAAiBH,IAAjB,CAAP;AACD;;AAED,wBAAOD,iBAAiBK,KAAxB,EAA+B,sCAA/B;AACA,MAAMF,SAASG,SAASC,aAAT,CAAuB,QAAvB,CAAf;AACAJ,SAAOK,KAAP,GAAeR,MAAMQ,KAArB;AACAL,SAAOM,MAAP,GAAgBT,MAAMS,MAAtB;AACAN,SAAOO,UAAP,CAAkB,IAAlB,EAAwBC,SAAxB,CAAkCX,KAAlC,EAAyC,CAAzC,EAA4C,CAA5C;;AAEA;AACA,MAAMY,OACJT,OAAOC,SAAP,CAAiBH,QAAQ,KAAzB,EACGY,OADH,CACW,gCADX,EAC6C,EAD7C,CADF;;AAIA;AACA,MAAMC,SAAS,wBAAf;AACAC,UAAQC,QAAR,CAAiB;AAAA,WAAMF,OAAOG,GAAP,CAAW,IAAIC,MAAJ,CAAWN,IAAX,EAAiB,QAAjB,CAAX,CAAN;AAAA,GAAjB;AACA,SAAOE,MAAP;AACD","file":"browser-compress-image.js","sourcesContent":["// Image loading/saving for browser\n/* global document, HTMLCanvasElement, Image */\n\n/* global process, Buffer */\nimport assert from 'assert';\nimport through from 'through';\n\n/*\n * Returns data bytes representing a compressed image in PNG or JPG format,\n * This data can be saved using file system (f) methods or\n * used in a request.\n * @param {Image}  image - Image or Canvas\n * @param {String} opt.type='png' - png, jpg or image/png, image/jpg are valid\n * @param {String} opt.dataURI= - Whether to include a data URI header\n */\nexport function compressImage(image, type) {\n  if (image instanceof HTMLCanvasElement) {\n    const canvas = image;\n    return canvas.toDataURL(type);\n  }\n\n  assert(image instanceof Image, 'getImageData accepts image or canvas');\n  const canvas = document.createElement('canvas');\n  canvas.width = image.width;\n  canvas.height = image.height;\n  canvas.getContext('2d').drawImage(image, 0, 0);\n\n  // Get raw image data\n  const data =\n    canvas.toDataURL(type || 'png')\n      .replace(/^data:image\\/(png|jpg);base64,/, '');\n\n  // Dump data into stream and return\n  const result = through();\n  process.nextTick(() => result.end(new Buffer(data, 'base64')));\n  return result;\n}\n"]}