{"version":3,"sources":["../../../../packages/io/browser-io/browser-fs.js"],"names":["writeFile","readFile","savedNavigatorExists","global","savedNavigator","navigator","userAgent","saveAs","require","window","File","Blob","file","data","options","callback","undefined","Promise","resolve","reject","result","error","reader","FileReader","onerror","Error","getFileErrorMessage","e","onabort","onload","readAsText","target","code","NOT_FOUND_ERR","NOT_READABLE_ERR","ABORT_ERR","SECURITY_ERR","ENCODING_ERR"],"mappings":"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","file":"browser-fs.js","sourcesContent":["/* eslint-disable no-try-catch */\nimport {isBrowser} from '../../utils';\nimport assert from 'assert';\n\n// TODO hack - trick filesaver.js to skip loading under node\n/* global global*/\nconst savedNavigatorExists = 'navigator' in global;\nconst savedNavigator = global.navigator;\nif (!isBrowser) {\n  global.navigator = {userAgent: 'MSIE 9.'};\n}\nconst saveAs = require('filesaver.js');\nif (!isBrowser) {\n  if (savedNavigatorExists) {\n    global.navigator = savedNavigator;\n  } else {\n    delete global.navigator;\n  }\n}\n// END hack\n\nconst window = require('global/window');\nconst File = window.File;\nconst Blob = window.Blob;\n\n/**\n * File system write function for the browser, similar to Node's fs.writeFile\n *\n * Saves a file by downloading it with the given file name.\n *\n * @param {String} file - file name\n * @param {String|Blob} data - data to be written to file\n * @param {String|Object} options -\n * @param {Function} callback - Standard node (err, data) callback\n * @return {Promise} - promise, can be used instead of callback\n */\nexport function writeFile(file, data, options, callback = () => {}) {\n  // options is optional\n  if (callback === undefined && typeof options === 'function') {\n    options = undefined;\n    callback = options;\n  }\n  if (typeof data === 'string') {\n    data = new Blob(data);\n  }\n  return new Promise((resolve, reject) => {\n    let result;\n    try {\n      result = saveAs(data, file, options);\n    } catch (error) {\n      reject(error);\n      return callback(error, null);\n    }\n    resolve();\n    return callback(null, result);\n  });\n}\n\n/**\n * File reader function for the browser, intentionally similar\n * to node's fs.readFile API, however returns a Promise rather than\n * callbacks\n *\n * @param {File|Blob} file  HTML File or Blob object to read as string\n * @returns {Promise.string}  Resolves to a string containing file contents\n */\nexport function readFile(file) {\n  return new Promise((resolve, reject) => {\n    try {\n      assert(File, 'window.File not defined. Must run under browser.');\n      assert(file instanceof File, 'parameter must be a File object');\n\n      const reader = new window.FileReader();\n\n      reader.onerror = e => reject(new Error(getFileErrorMessage(e)));\n      reader.onabort = () => reject(new Error('Read operation was aborted.'));\n      reader.onload = () => resolve(reader.result);\n\n      reader.readAsText(file);\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\n// NOTES ON ERROR HANDLING\n//\n// Prepared to externalize error message texts\n//\n// The weird thing about the FileReader API is that the error definitions\n// are only available on the error event instance that is passed to the\n// handler. Thus we need to create definitions that are avialble outside\n// the handler.\n//\n// https://developer.mozilla.org/en-US/docs/Web/API/FileReader\n//\n// Side Note: To complicate matters, there are also a DOMError string set on\n// filereader object (error property). Not clear how or if these map\n// to the event error codes. These strings are not currently used by this api.\n//\n// https://developer.mozilla.org/en-US/docs/Web/API/DOMError\n\nfunction getFileErrorMessage(e) {\n  // Map event's error codes to static error codes so that we can\n  // externalize error code to error message mapping\n  switch (e.target.error.code) {\n  case e.target.error.NOT_FOUND_ERR:\n    return 'File not found.';\n  case e.target.error.NOT_READABLE_ERR:\n    return 'File not readable.';\n  case e.target.error.ABORT_ERR:\n    return 'Read operation was aborted.';\n  case e.target.error.SECURITY_ERR:\n    return 'File is in a locked state.';\n  case e.target.error.ENCODING_ERR:\n    return 'File is too long to encode in \"data://\" URL.';\n  default:\n    return 'Read error.';\n  }\n}\n"]}