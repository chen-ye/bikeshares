{"version":3,"sources":["../../src/webgl-utils/constants-to-keys.js"],"names":["getKeyValue","getKey","getKeyType","gl","name","number","Number","isNaN","replace","value","undefined","key","String"],"mappings":";;;;;QAGgBA,W,GAAAA,W;QAmBAC,M,GAAAA,M;QAUAC,U,GAAAA,U;;AAhChB;;;;;;AAEA;AACO,SAASF,WAAT,CAAqBG,EAArB,EAAyBC,IAAzB,EAA+B;AACpC;AACA,MAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5B,WAAOA,IAAP;AACD;;AAED;AACA,MAAMC,SAASC,OAAOF,IAAP,CAAf;AACA,MAAI,CAACG,MAAMF,MAAN,CAAL,EAAoB;AAClB,WAAOA,MAAP;AACD;;AAED;AACAD,SAAOA,KAAKI,OAAL,CAAa,OAAb,EAAsB,EAAtB,CAAP;AACA,MAAMC,QAAQN,GAAGC,IAAH,CAAd;AACA,wBAAOK,UAAUC,SAAjB,uCAA+DN,IAA/D;AACA,SAAOK,KAAP;AACD;;AAEM,SAASR,MAAT,CAAgBE,EAAhB,EAAoBM,KAApB,EAA2B;AAChCA,UAAQH,OAAOG,KAAP,CAAR;AACA,OAAK,IAAME,GAAX,IAAkBR,EAAlB,EAAsB;AACpB,QAAIA,GAAGQ,GAAH,MAAYF,KAAhB,EAAuB;AACrB,qBAAaE,GAAb;AACD;AACF;AACD,SAAOC,OAAOH,KAAP,CAAP;AACD;;AAEM,SAASP,UAAT,CAAoBC,EAApB,EAAwBM,KAAxB,EAA+B;AACpC,wBAAOA,UAAUC,SAAjB,EAA4B,eAA5B;AACAD,UAAQH,OAAOG,KAAP,CAAR;AACA,OAAK,IAAME,GAAX,IAAkBR,EAAlB,EAAsB;AACpB,QAAIA,GAAGQ,GAAH,MAAYF,KAAhB,EAAuB;AACrB,qBAAaE,GAAb;AACD;AACF;AACD,SAAOC,OAAOH,KAAP,CAAP;AACD","file":"constants-to-keys.js","sourcesContent":["import assert from 'assert';\n\n// Resolve a WebGL enumeration name (returns itself if already a number)\nexport function getKeyValue(gl, name) {\n  // If not a string, return (assume number)\n  if (typeof name !== 'string') {\n    return name;\n  }\n\n  // If string converts to number, return number\n  const number = Number(name);\n  if (!isNaN(number)) {\n    return number;\n  }\n\n  // Look up string, after removing any 'GL.' or 'gl.' prefix\n  name = name.replace(/^.*\\./, '');\n  const value = gl[name];\n  assert(value !== undefined, `Accessing undefined constant GL.${name}`);\n  return value;\n}\n\nexport function getKey(gl, value) {\n  value = Number(value);\n  for (const key in gl) {\n    if (gl[key] === value) {\n      return `gl.${key}`;\n    }\n  }\n  return String(value);\n}\n\nexport function getKeyType(gl, value) {\n  assert(value !== undefined, 'undefined key');\n  value = Number(value);\n  for (const key in gl) {\n    if (gl[key] === value) {\n      return `gl.${key}`;\n    }\n  }\n  return String(value);\n}\n"]}