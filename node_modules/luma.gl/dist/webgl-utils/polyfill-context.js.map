{"version":3,"sources":["../../src/webgl-utils/polyfill-context.js"],"names":["polyfillContext","OES_vertex_array_object","ANGLE_instanced_arrays","WEBGL_draw_buffers","EXT_disjoint_timer_query","EXT_disjoint_timer_query_webgl2","EXT_texture_filter_anisotropic","ERR_VAO_NOT_SUPPORTED","isWebGL2","gl","GL_TEXTURE_BINDING_3D","TEXTURE_BINDING_3D","getExtensionData","extension","webgl2","ext","getExtension","WEBGL_CONTEXT_POLYFILLS","meta","suffix","createVertexArray","deleteVertexArray","bindVertexArray","isVertexArray","vertexAttribDivisor","location","divisor","drawElementsInstanced","drawArraysInstanced","drawBuffers","createQuery","deleteQuery","beginQuery","endQuery","getQuery","handle","pname","getQueryObject","getQueryParameter","queryCounter","getVertexAttrib","originalFunc","GL_VERTEX_ATTRIB_ARRAY_INTEGER","GL_VERTEX_ATTRIB_ARRAY_DIVISOR","result","undefined","getProgramParameter","program","GL_TRANSFORM_FEEDBACK_BUFFER_MODE","GL_TRANSFORM_FEEDBACK_VARYINGS","GL_ACTIVE_UNIFORM_BLOCKS","GL_SEPARATE_ATTRIBS","getInternalformatParameter","target","format","GL_SAMPLES","Int32Array","getTexParameter","GL_TEXTURE_MAX_ANISOTROPY_EXT","extensions","luma","TEXTURE_MAX_ANISOTROPY_EXT","getParameter","hint","value","initializeExtensions","EXTENSIONS","getSupportedExtensions","polyfillExtension","target2","defaults","Object","keys","forEach","extKey","key","polyfill","bind","installOverrides","OVERRIDES","polyfilled"],"mappings":";;;;;;;;kBA6NwBA,e;;AAnNxB;;;;AACA;;;;kNAXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAIA,IAAMC,0BAA0B,yBAAhC;AACA,IAAMC,yBAAyB,wBAA/B;AACA,IAAMC,qBAAqB,oBAA3B;AACA,IAAMC,2BAA2B,0BAAjC;AACA,IAAMC,kCAAkC,iCAAxC;AACA,IAAMC,iCAAiC,gCAAvC;;AAEA,IAAMC,wBACJ,kEADF;;AAGA;AACA,SAASC,QAAT,CAAkBC,EAAlB,EAAsB;AACpB,MAAMC,wBAAwB,MAA9B;AACA,SAAOD,MAAMA,GAAGE,kBAAH,KAA0BD,qBAAvC;AACD;;AAED;AACA,SAASE,gBAAT,CAA0BH,EAA1B,EAA8BI,SAA9B,EAAyC;AACvC,SAAO;AACLC,YAAQN,SAASC,EAAT,CADH;AAELM,SAAKN,GAAGO,YAAH,CAAgBH,SAAhB;AAFA,GAAP;AAID;;AAED;AACA;AACA;AACA;AACA;;AAEA,IAAMI,8FAEHhB,uBAFG,EAEuB;AACzBiB,QAAM,EAACC,QAAQ,KAAT,EADmB;AAEzB;AACAC,qBAAmB,6BAAM;AAAE,0BAAO,KAAP,EAAcb,qBAAd;AAAuC,GAHzC;AAIzBc,qBAAmB,6BAAM,CAAE,CAJF;AAKzBC,mBAAiB,2BAAM,CAAE,CALA;AAMzBC,iBAAe;AAAA,WAAM,KAAN;AAAA;AANU,CAFvB,0CAUHrB,sBAVG,EAUsB;AACxBgB,QAAM;AACJC,YAAQ;AACR;AACA;AACA;AAJI,GADkB;AAOxBK,qBAPwB,+BAOJC,QAPI,EAOMC,OAPN,EAOe;AACrC;AACA,0BAAOA,YAAY,CAAnB,EAAsB,yCAAtB;AACD,GAVuB;;AAWxBC,yBAAuB,iCAAM,CAAE,CAXP;AAYxBC,uBAAqB,+BAAM,CAAE;AAZL,CAVtB,0CAwBHzB,kBAxBG,EAwBkB;AACpBe,QAAM;AACJC,YAAQ;AADJ,GADc;AAIpBU,eAAa,uBAAM;AAAE,0BAAO,KAAP;AAAgB;AAJjB,CAxBlB,0CA8BHzB,wBA9BG,EA8BwB;AAC1Bc,QAAM,EAACC,QAAQ,KAAT,EADoB;AAE1B;AACAW,eAAa,uBAAM;AAAE,0BAAO,KAAP;AAAgB,GAHX;AAI1BC,eAAa,uBAAM;AAAE,0BAAO,KAAP;AAAgB,GAJX;AAK1BC,cAAY,sBAAM;AAAE,0BAAO,KAAP;AAAgB,GALV;AAM1BC,YAAU,oBAAM,CAAE,CANQ;AAO1BC,UAP0B,oBAOjBC,MAPiB,EAOTC,KAPS,EAOF;AAAE,WAAO,KAAKC,cAAL,CAAoBF,MAApB,EAA4BC,KAA5B,CAAP;AAA4C,GAP5C;;AAQ1B;AACAE,mBAT0B,6BASRH,MATQ,EASAC,KATA,EASO;AAAE,WAAO,KAAKC,cAAL,CAAoBF,MAApB,EAA4BC,KAA5B,CAAP;AAA4C,GATrD;;AAU1B;AACAG,gBAAc,wBAAM,CAAE,CAXI;AAY1BF,kBAAgB,0BAAM,CAAE;AAZE,CA9BxB,0CA6CHhC,+BA7CG,EA6C+B;AACjCa,QAAM,EAACC,QAAQ,KAAT,EAD2B;AAEjC;AACA;AACAoB,gBAAc;AAJmB,CA7C/B,uDAmDO;AACT;AACAC,mBAAiB,yBAAC/B,EAAD,EAAKgC,YAAL,EAAmBhB,QAAnB,EAA6BW,KAA7B,EAAuC;AACtD;AADsD,4BAEhCxB,iBAAiBH,EAAjB,EAAqBP,sBAArB,CAFgC;AAAA,QAE/CY,MAF+C,qBAE/CA,MAF+C;AAAA,QAEvCC,GAFuC,qBAEvCA,GAFuC;;AAItD,QAAM2B,iCAAiC,MAAvC;AACA,QAAMC,iCAAiC,MAAvC;;AAEA,QAAIC,eAAJ;AACA,YAAQR,KAAR;AACA;AACA,WAAKM,8BAAL;AAAqCE,iBAAS,CAAC9B,MAAD,GAAU,KAAV,GAAkB+B,SAA3B,CAAsC;AACzE;AACF,WAAKF,8BAAL;AAAqCC,iBAAS,CAAC9B,MAAD,IAAW,CAACC,GAAZ,GAAkB,CAAlB,GAAsB8B,SAA/B,CAA0C;AAC/E;AALA;;AAQA,WAAOD,WAAWC,SAAX,GAAuBD,MAAvB,GAAgCH,aAAahB,QAAb,EAAuBW,KAAvB,CAAvC;AACD,GAnBQ;AAoBT;AACAU,uBAAqB,6BAACrC,EAAD,EAAKgC,YAAL,EAAmBM,OAAnB,EAA4BX,KAA5B,EAAsC;AACzD,QAAMY,oCAAoC,MAA1C;AACA,QAAMC,iCAAiC,MAAvC;AACA,QAAMC,2BAA2B,MAAjC;AACA,QAAMC,sBAAsB,MAA5B;;AAEA,QAAI,CAAC3C,SAASC,EAAT,CAAL,EAAmB;AACjB,cAAQ2B,KAAR;AACA,aAAKY,iCAAL;AAAwC,iBAAOG,mBAAP;AACxC,aAAKF,8BAAL;AAAqC,iBAAO,CAAP;AACrC,aAAKC,wBAAL;AAA+B,iBAAO,CAAP;AAC/B;AAJA;AAMD;AACD,WAAOT,aAAaM,OAAb,EAAsBX,KAAtB,CAAP;AACD,GApCQ;AAqCTgB,8BAA4B,oCAAC3C,EAAD,EAAKgC,YAAL,EAAmBY,MAAnB,EAA2BC,MAA3B,EAAmClB,KAAnC,EAA6C;AACvE,QAAMmB,aAAa,MAAnB;AACA,QAAI,CAAC/C,SAASC,EAAT,CAAL,EAAmB;AACjB,cAAQ2B,KAAR;AACA,aAAKmB,UAAL;AACE,iBAAO,IAAIC,UAAJ,CAAe,CAAC,CAAD,CAAf,CAAP;AACF;AAHA;AAKD;AACD,WAAO/C,GAAG2C,0BAAH,CAA8BC,MAA9B,EAAsCC,MAAtC,EAA8ClB,KAA9C,CAAP;AACD,GA/CQ;AAgDTqB,iBAhDS,2BAgDOhD,EAhDP,EAgDWgC,YAhDX,EAgDyBY,MAhDzB,EAgDiCjB,KAhDjC,EAgDwC;AAC/C,QAAMsB,gCAAgC,MAAtC;AACA,YAAQtB,KAAR;AACA,WAAKsB,6BAAL;AAAA,YACSC,UADT,GACuBlD,GAAGmD,IAD1B,CACSD,UADT;;AAEE,YAAM5C,MAAM4C,WAAWrD,8BAAX,CAAZ;AACA8B,gBAASrB,OAAOA,IAAI8C,0BAAZ,IAA2CH,6BAAnD;AACA;AACF;AANA;AAQA,WAAOjB,aAAaY,MAAb,EAAqBjB,KAArB,CAAP;AACD,GA3DQ;;AA4DT0B,0DA5DS;AA6DTC,MA7DS,gBA6DJtD,EA7DI,EA6DAgC,YA7DA,EA6DcL,KA7Dd,EA6DqB4B,KA7DrB,EA6D4B;AACnC;AACA;AACA;AACA;AACA,WAAOvB,aAAaL,KAAb,EAAoB4B,KAApB,CAAP;AACD;AAnEQ,CAnDP,yBAAN;;AA0HA,SAASC,oBAAT,CAA8BxD,EAA9B,EAAkC;AAChCA,KAAGmD,IAAH,CAAQD,UAAR,GAAqB,EAArB;AACA,MAAMO,aAAazD,GAAG0D,sBAAH,EAAnB;AAFgC;AAAA;AAAA;;AAAA;AAGhC,yBAAwBD,UAAxB,8HAAoC;AAAA,UAAzBrD,SAAyB;;AAClCJ,SAAGmD,IAAH,CAAQ/C,SAAR,IAAqBJ,GAAGO,YAAH,CAAgBH,SAAhB,CAArB;AACD;AAL+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMjC;;AAED;AACA,SAASuD,iBAAT,CAA2B3D,EAA3B,QAA6D;AAAA,MAA7BI,SAA6B,QAA7BA,SAA6B;AAAA,MAAlBwC,MAAkB,QAAlBA,MAAkB;AAAA,MAAVgB,OAAU,QAAVA,OAAU;;AAC3D,MAAMC,WAAWrD,wBAAwBJ,SAAxB,CAAjB;AACA,wBAAOyD,QAAP;;AAF2D,uBAIvCA,QAJuC,CAIpDpD,IAJoD;AAAA,MAIpDA,IAJoD,kCAI7C,EAJ6C;AAAA,qBAKrCA,IALqC,CAKpDC,MALoD;AAAA,MAKpDA,MALoD,gCAK3C,EAL2C;;;AAO3D,MAAMJ,MAAMN,GAAGO,YAAH,CAAgBH,SAAhB,CAAZ;;AAEA0D,SAAOC,IAAP,CAAYF,QAAZ,EAAsBG,OAAtB,CAA8B,eAAO;AACnC,QAAMC,cAAYC,GAAZ,GAAkBxD,MAAxB;;AAEA,QAAIyD,WAAW,IAAf;AACA,QAAID,QAAQ,MAAZ,EAAoB;AAClB;AACD,KAFD,MAEO,IAAI,OAAOlE,GAAGkE,GAAH,CAAP,KAAmB,UAAvB,EAAmC;AACxC;AACD,KAFM,MAEA,IAAI5D,OAAO,OAAOA,IAAI2D,MAAJ,CAAP,KAAuB,UAAlC,EAA8C;AACnD;AACAE,iBAAW;AAAA,eAAa7D,IAAI2D,MAAJ,uBAAb;AAAA,OAAX;AACD,KAHM,MAGA,IAAI,OAAOJ,SAASK,GAAT,CAAP,KAAyB,UAA7B,EAAyC;AAC9C;AACAC,iBAAWN,SAASK,GAAT,EAAcE,IAAd,CAAmBxB,MAAnB,CAAX;AACD;;AAED,QAAIuB,QAAJ,EAAc;AACZvB,aAAOsB,GAAP,IAAcC,QAAd;AACAP,cAAQM,GAAR,IAAeC,QAAf;AACD;AACF,GApBD;AAqBD;;AAED;AACA,SAASE,gBAAT,CAA0BrE,EAA1B,SAAiD;AAAA,MAAlB4C,MAAkB,SAAlBA,MAAkB;AAAA,MAAVgB,OAAU,SAAVA,OAAU;AAAA,MACxCU,SADwC,GAC3B9D,uBAD2B,CACxC8D,SADwC;;AAE/CR,SAAOC,IAAP,CAAYO,SAAZ,EAAuBN,OAAvB,CAA+B,eAAO;AACpC,QAAI,OAAOM,UAAUJ,GAAV,CAAP,KAA0B,UAA9B,EAA0C;AACxC;AACA,UAAMlC,eAAehC,GAAGkE,GAAH,IAAUlE,GAAGkE,GAAH,EAAQE,IAAR,CAAapE,EAAb,CAAV,GAA6B,YAAM,CAAE,CAA1D;AACA,UAAMmE,WAAWG,UAAUJ,GAAV,EAAeE,IAAf,CAAoB,IAApB,EAA0BpE,EAA1B,EAA8BgC,YAA9B,CAAjB;AACAY,aAAOsB,GAAP,IAAcC,QAAd;AACAP,cAAQM,GAAR,IAAeC,QAAf;AACD;AACF,GARD;AASD;;AAED;AACe,SAAS5E,eAAT,CAAyBS,EAAzB,EAA6B;AAC1CA,KAAGmD,IAAH,GAAUnD,GAAGmD,IAAH,IAAW,EAArB;AACAK,uBAAqBxD,EAArB;AACA,MAAI,CAACA,GAAGmD,IAAH,CAAQoB,UAAb,EAAyB;AACvB,SAAK,IAAMnE,SAAX,IAAwBI,uBAAxB,EAAiD;AAC/C,UAAIJ,cAAc,WAAlB,EAA+B;AAC7BuD,0BAAkB3D,EAAlB,EAAsB,EAACI,oBAAD,EAAYwC,QAAQ5C,GAAGmD,IAAvB,EAA6BS,SAAS5D,EAAtC,EAAtB;AACD;AACF;AACDqE,qBAAiBrE,EAAjB,EAAqB,EAAC4C,QAAQ5C,GAAGmD,IAAZ,EAAkBS,SAAS5D,EAA3B,EAArB;AACAA,OAAGmD,IAAH,CAAQoB,UAAR,GAAqB,IAArB;AACD;AACD,SAAOvE,EAAP;AACD","file":"polyfill-context.js","sourcesContent":["// WebGL1/WebGL2 extension polyfill support\n//\n// Provides a function that creates polyfills for WebGL2 functions based\n// on available extensions and installs them on a supplied target (could be\n// the WebGLContext or its prototype, or a separate object).\n//\n// This is intended to be a stand-alone file with minimal dependencies,\n// easy to reuse or repurpose in other projects.\n\n/* eslint-disable camelcase, brace-style */\nimport assert from 'assert';\nimport {getParameterPolyfill} from './polyfill-get-parameter';\n\nconst OES_vertex_array_object = 'OES_vertex_array_object';\nconst ANGLE_instanced_arrays = 'ANGLE_instanced_arrays';\nconst WEBGL_draw_buffers = 'WEBGL_draw_buffers';\nconst EXT_disjoint_timer_query = 'EXT_disjoint_timer_query';\nconst EXT_disjoint_timer_query_webgl2 = 'EXT_disjoint_timer_query_webgl2';\nconst EXT_texture_filter_anisotropic = 'EXT_texture_filter_anisotropic';\n\nconst ERR_VAO_NOT_SUPPORTED =\n  'VertexArray requires WebGL2 or OES_vertex_array_object extension';\n\n// Return true if WebGL2 context\nfunction isWebGL2(gl) {\n  const GL_TEXTURE_BINDING_3D = 0x806A;\n  return gl && gl.TEXTURE_BINDING_3D === GL_TEXTURE_BINDING_3D;\n}\n\n// Return object with webgl2 flag and an extension\nfunction getExtensionData(gl, extension) {\n  return {\n    webgl2: isWebGL2(gl),\n    ext: gl.getExtension(extension)\n  };\n}\n\n// function mapExtensionConstant(gl, constant) {\n//   switch (constant) {\n//   case ext.FRAGMENT_SHADER_DERIVATIVE_HINT_OES: return GL.FRAGMENT_SHADER_DERIVATIVE_HINT;\n//   }\n// }\n\nconst WEBGL_CONTEXT_POLYFILLS = {\n  // POLYFILL TABLE\n  [OES_vertex_array_object]: {\n    meta: {suffix: 'OES'},\n    // NEW METHODS\n    createVertexArray: () => { assert(false, ERR_VAO_NOT_SUPPORTED); },\n    deleteVertexArray: () => {},\n    bindVertexArray: () => {},\n    isVertexArray: () => false\n  },\n  [ANGLE_instanced_arrays]: {\n    meta: {\n      suffix: 'ANGLE'\n      // constants: {\n      //   VERTEX_ATTRIB_ARRAY_DIVISOR: 'VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE'\n      // }\n    },\n    vertexAttribDivisor(location, divisor) {\n      // Accept divisor 0 even if instancing is not supported (0 = no instancing)\n      assert(divisor === 0, 'WebGL instanced rendering not supported');\n    },\n    drawElementsInstanced: () => {},\n    drawArraysInstanced: () => {}\n  },\n  [WEBGL_draw_buffers]: {\n    meta: {\n      suffix: 'WEBGL'\n    },\n    drawBuffers: () => { assert(false); }\n  },\n  [EXT_disjoint_timer_query]: {\n    meta: {suffix: 'EXT'},\n    // WebGL1: Polyfills the WebGL2 Query API\n    createQuery: () => { assert(false); },\n    deleteQuery: () => { assert(false); },\n    beginQuery: () => { assert(false); },\n    endQuery: () => {},\n    getQuery(handle, pname) { return this.getQueryObject(handle, pname); },\n    // The WebGL1 extension uses getQueryObject rather then getQueryParameter\n    getQueryParameter(handle, pname) { return this.getQueryObject(handle, pname); },\n    // plus the additional `queryCounter` method\n    queryCounter: () => {},\n    getQueryObject: () => {}\n  },\n  // WebGL2: Adds `queryCounter` to the query API\n  [EXT_disjoint_timer_query_webgl2]: {\n    meta: {suffix: 'EXT'},\n    // install `queryCounter`\n    // `null` avoids overwriting WebGL1 `queryCounter` if the WebGL2 extension is not available\n    queryCounter: null\n  },\n  OVERRIDES: {\n    // Override for getVertexAttrib that returns sane values for non-WebGL1 constants\n    getVertexAttrib: (gl, originalFunc, location, pname) => {\n      // const gl = this; // eslint-disable-line\n      const {webgl2, ext} = getExtensionData(gl, ANGLE_instanced_arrays);\n\n      const GL_VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD;\n      const GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE;\n\n      let result;\n      switch (pname) {\n      // WebGL1 attributes will never be integer\n      case GL_VERTEX_ATTRIB_ARRAY_INTEGER: result = !webgl2 ? false : undefined; break;\n        // if instancing is not available, return 0 meaning divisor has not been set\n      case GL_VERTEX_ATTRIB_ARRAY_DIVISOR: result = !webgl2 && !ext ? 0 : undefined; break;\n      default:\n      }\n\n      return result !== undefined ? result : originalFunc(location, pname);\n    },\n    // Handle transform feedback and uniform block queries in WebGL1\n    getProgramParameter: (gl, originalFunc, program, pname) => {\n      const GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F;\n      const GL_TRANSFORM_FEEDBACK_VARYINGS = 0x8C83;\n      const GL_ACTIVE_UNIFORM_BLOCKS = 0x8A36;\n      const GL_SEPARATE_ATTRIBS = 0x8C8D;\n\n      if (!isWebGL2(gl)) {\n        switch (pname) {\n        case GL_TRANSFORM_FEEDBACK_BUFFER_MODE: return GL_SEPARATE_ATTRIBS;\n        case GL_TRANSFORM_FEEDBACK_VARYINGS: return 0;\n        case GL_ACTIVE_UNIFORM_BLOCKS: return 0;\n        default:\n        }\n      }\n      return originalFunc(program, pname);\n    },\n    getInternalformatParameter: (gl, originalFunc, target, format, pname) => {\n      const GL_SAMPLES = 0x80A9;\n      if (!isWebGL2(gl)) {\n        switch (pname) {\n        case GL_SAMPLES:\n          return new Int32Array([0]);\n        default:\n        }\n      }\n      return gl.getInternalformatParameter(target, format, pname);\n    },\n    getTexParameter(gl, originalFunc, target, pname) {\n      const GL_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FE;\n      switch (pname) {\n      case GL_TEXTURE_MAX_ANISOTROPY_EXT:\n        const {extensions} = gl.luma;\n        const ext = extensions[EXT_texture_filter_anisotropic];\n        pname = (ext && ext.TEXTURE_MAX_ANISOTROPY_EXT) || GL_TEXTURE_MAX_ANISOTROPY_EXT;\n        break;\n      default:\n      }\n      return originalFunc(target, pname);\n    },\n    getParameter: getParameterPolyfill,\n    hint(gl, originalFunc, pname, value) {\n      // TODO - handle GL.FRAGMENT_SHADER_DERIVATIVE_HINT:\n      // switch (pname) {\n      // case GL.FRAGMENT_SHADER_DERIVATIVE_HINT:\n      // }\n      return originalFunc(pname, value);\n    }\n  }\n};\n\nfunction initializeExtensions(gl) {\n  gl.luma.extensions = {};\n  const EXTENSIONS = gl.getSupportedExtensions();\n  for (const extension of EXTENSIONS) {\n    gl.luma[extension] = gl.getExtension(extension);\n  }\n}\n\n// Polyfills a single WebGL extension into the `target` object\nfunction polyfillExtension(gl, {extension, target, target2}) {\n  const defaults = WEBGL_CONTEXT_POLYFILLS[extension];\n  assert(defaults);\n\n  const {meta = {}} = defaults;\n  const {suffix = ''} = meta;\n\n  const ext = gl.getExtension(extension);\n\n  Object.keys(defaults).forEach(key => {\n    const extKey = `${key}${suffix}`;\n\n    let polyfill = null;\n    if (key === 'meta') {\n      // ignore\n    } else if (typeof gl[key] === 'function') {\n      // WebGL2 implementation is already\n    } else if (ext && typeof ext[extKey] === 'function') {\n      // pick extension implemenentation,if available\n      polyfill = (...args) => ext[extKey](...args);\n    } else if (typeof defaults[key] === 'function') {\n      // pick the mock implementation, if no implementation was detected\n      polyfill = defaults[key].bind(target);\n    }\n\n    if (polyfill) {\n      target[key] = polyfill;\n      target2[key] = polyfill;\n    }\n  });\n}\n\n// Install simple overrides (mostly get* functions)\nfunction installOverrides(gl, {target, target2}) {\n  const {OVERRIDES} = WEBGL_CONTEXT_POLYFILLS;\n  Object.keys(OVERRIDES).forEach(key => {\n    if (typeof OVERRIDES[key] === 'function') {\n      // install an override, if no implementation was detected\n      const originalFunc = gl[key] ? gl[key].bind(gl) : () => {};\n      const polyfill = OVERRIDES[key].bind(null, gl, originalFunc);\n      target[key] = polyfill;\n      target2[key] = polyfill;\n    }\n  });\n}\n\n// Registers polyfill or mock functions for all known extensions\nexport default function polyfillContext(gl) {\n  gl.luma = gl.luma || {};\n  initializeExtensions(gl);\n  if (!gl.luma.polyfilled) {\n    for (const extension in WEBGL_CONTEXT_POLYFILLS) {\n      if (extension !== 'overrides') {\n        polyfillExtension(gl, {extension, target: gl.luma, target2: gl});\n      }\n    }\n    installOverrides(gl, {target: gl.luma, target2: gl});\n    gl.luma.polyfilled = true;\n  }\n  return gl;\n}\n"]}