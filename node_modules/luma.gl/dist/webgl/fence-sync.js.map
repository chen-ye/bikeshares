{"version":3,"sources":["../../src/webgl/fence-sync.js"],"names":["FenceSync","gl","opts","promise","Object","seal","flags","timeout","TIMEOUT_IGNORED","waitSync","handle","SYNC_FLUSH_COMMANDS_BIT","result","clientWaitSync","ALREADY_SIGNALED","TIMEOUT_EXPIRED","CONDITION_SATISFIED","WAIT_FAILED","cancelQuery","getParameter","SYNC_STATUS","SIGNALED","isSignaled","pname","getSyncParameter","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","deleteQuery","deleteSync"],"mappings":";;;;;;;;AAAA;;;;AACA;;AACA;;;;AACA;;;;;;;;;;;;IAEqBA,S;;;AACnB;;;;AAIA,qBAAYC,EAAZ,EAAgBC,IAAhB,EAAsB;AAAA;;AACpB,sCAAoBD,EAApB;;AAEA;AAHoB,sHAEdA,EAFc,EAEVC,IAFU;;AAIpB,UAAKC,OAAL,GAAe,IAAf;AACAC,WAAOC,IAAP;AALoB;AAMrB;;AAED;;;;;;;;;;;;;;2BAUqD;AAAA,qFAAJ,EAAI;AAAA,4BAA/CC,KAA+C;AAAA,UAA/CA,KAA+C,8BAAvC,CAAuC;AAAA,8BAApCC,OAAoC;AAAA,UAApCA,OAAoC,gCAA1B,cAAGC,eAAuB;;AACnD,WAAKP,EAAL,CAAQQ,QAAR,CAAiB,KAAKC,MAAtB,EAA8BJ,KAA9B,EAAqCC,OAArC;AACA,aAAO,IAAP;AACD;;AAED;;;;;;;;;sCAM0D;AAAA,8BAA9CD,KAA8C;AAAA,UAA9CA,KAA8C,+BAAtC,cAAGK,uBAAmC;AAAA,UAAVJ,OAAU,SAAVA,OAAU;;AACxD,UAAMK,SAAS,KAAKX,EAAL,CAAQY,cAAR,CAAuB,KAAKH,MAA5B,EAAoCJ,KAApC,EAA2CC,OAA3C,CAAf;AACA;AACA,cAAQK,MAAR;AACA,aAAK,cAAGE,gBAAR;AACE;AACA;AACF,aAAK,cAAGC,eAAR;AACE;AACA;AACF,aAAK,cAAGC,mBAAR;AACE;AACA;AACF,aAAK,cAAGC,WAAR;AACE;AACA;AACF;AAbA;AAeA,aAAOL,MAAP;AACD;;;6BAEQ;AACP,6BAAaM,WAAb,CAAyB,IAAzB;AACD;;;iCAEY;AACX,aAAO,KAAKC,YAAL,CAAkB,cAAGC,WAArB,MAAsC,cAAGC,QAAhD;AACD;;AAED;;;;wCACoB;AAClB,aAAO,KAAKC,UAAL,EAAP;AACD;;;gCAEW;AACV,aAAO,KAAKA,UAAL,EAAP;AACD;;;iCAEYC,K,EAAO;AAClB,aAAO,KAAKtB,EAAL,CAAQuB,gBAAR,CAAyB,KAAKd,MAA9B,EAAsCa,KAAtC,CAAP;AACD;;AAED;;;;oCAEgB;AACd,aAAO,KAAKtB,EAAL,CAAQwB,SAAR,CAAkB,cAAGC,0BAArB,EAAiD,CAAjD,CAAP;AACD;;;oCAEe;AACd,6BAAaC,WAAb,CAAyB,IAAzB;AACA,WAAK1B,EAAL,CAAQ2B,UAAR,CAAmB,KAAKlB,MAAxB;AACD;;;;;;kBArFkBV,S","file":"fence-sync.js","sourcesContent":["import GL from './api';\nimport {assertWebGL2Context} from './context';\nimport Resource from './resource';\nimport queryManager from './helpers/query-manager';\n\nexport default class FenceSync extends Resource {\n  /*\n   * @class\n   * @param {WebGL2RenderingContext} gl\n   */\n  constructor(gl, opts) {\n    assertWebGL2Context(gl);\n    super(gl, opts);\n    // query manager needs a promise field\n    this.promise = null;\n    Object.seal(this);\n  }\n\n  /**\n   * The method is a no-op in the absence of the possibility of\n   * synchronizing between multiple GL contexts.\n   * Prevent commands from being added to GPU command queue.\n   * Note: commands can still be buffered in driver.\n   *\n   * @param {GLbitfield} flags\n   * @param {GLint64} timeout\n   * @return {Sync} status\n   */\n  wait({flags = 0, timeout = GL.TIMEOUT_IGNORED} = {}) {\n    this.gl.waitSync(this.handle, flags, timeout);\n    return this;\n  }\n\n  /**\n   * Block all CPU operations until fence is signalled\n   * @param {GLbitfield} flags\n   * @param {GLint64} timeout\n   * @return {GLenum} result\n   */\n  clientWait({flags = GL.SYNC_FLUSH_COMMANDS_BIT, timeout}) {\n    const result = this.gl.clientWaitSync(this.handle, flags, timeout);\n    // TODO - map to boolean?\n    switch (result) {\n    case GL.ALREADY_SIGNALED:\n      // Indicates that sync object was signaled when this method was called.\n      break;\n    case GL.TIMEOUT_EXPIRED:\n      // Indicates that timeout time passed, sync object did not become signaled\n      break;\n    case GL.CONDITION_SATISFIED:\n      // Indicates that sync object was signaled before timeout expired.\n      break;\n    case GL.WAIT_FAILED:\n      // Indicates that an error occurred during execution.\n      break;\n    default:\n    }\n    return result;\n  }\n\n  cancel() {\n    queryManager.cancelQuery(this);\n  }\n\n  isSignaled() {\n    return this.getParameter(GL.SYNC_STATUS) === GL.SIGNALED;\n  }\n\n  // TODO - Query manager needs these?\n  isResultAvailable() {\n    return this.isSignaled();\n  }\n\n  getResult() {\n    return this.isSignaled();\n  }\n\n  getParameter(pname) {\n    return this.gl.getSyncParameter(this.handle, pname);\n  }\n\n  // PRIVATE METHODS\n\n  _createHandle() {\n    return this.gl.fenceSync(GL.SYNC_GPU_COMMANDS_COMPLETE, 0);\n  }\n\n  _deleteHandle() {\n    queryManager.deleteQuery(this);\n    this.gl.deleteSync(this.handle);\n  }\n}\n"]}