{"version":3,"sources":["../../src/webgl/clear.js"],"names":["clear","clearBuffer","GL_DEPTH_BUFFER_BIT","GL_STENCIL_BUFFER_BIT","GL_COLOR_BUFFER_BIT","GL_COLOR","GL_DEPTH","GL_STENCIL","GL_DEPTH_STENCIL","ERR_ARGUMENTS","gl","framebuffer","color","depth","stencil","parameters","nocatch","clearFlags","clearColor","clearDepth","clearStencil","buffer","drawBuffer","value","constructor","Int32Array","clearBufferiv","Uint32Array","clearBufferuiv","Float32Array","clearBufferfv","clearBufferfi"],"mappings":"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","file":"clear.js","sourcesContent":["import {isWebGL2, ERR_WEBGL2} from './context';\nimport {withParameters} from './context-state';\nimport assert from 'assert';\n\n// Should collapse during minification\nconst GL_DEPTH_BUFFER_BIT = 0x00000100;\nconst GL_STENCIL_BUFFER_BIT = 0x00000400;\nconst GL_COLOR_BUFFER_BIT = 0x00004000;\n\nconst GL_COLOR = 0x1800;\nconst GL_DEPTH = 0x1801;\nconst GL_STENCIL = 0x1802;\nconst GL_DEPTH_STENCIL = 0x84F9;\n\n// Should disappear if asserts are removed\nconst ERR_ARGUMENTS = 'clear: bad arguments';\n\n// Optionally clears depth, color and stencil buffers\nexport function clear(gl, {\n  framebuffer = null,\n  color = null,\n  depth = null,\n  stencil = null\n} = {}) {\n  const parameters = {\n    nocatch: false,\n    framebuffer\n  };\n  let clearFlags = 0;\n\n  if (color) {\n    clearFlags |= GL_COLOR_BUFFER_BIT;\n    if (color !== true) {\n      parameters.clearColor = color;\n    }\n  }\n\n  if (depth) {\n    clearFlags |= GL_DEPTH_BUFFER_BIT;\n    if (depth !== true) {\n      parameters.clearDepth = depth;\n    }\n  }\n\n  if (stencil) {\n    clearFlags |= GL_STENCIL_BUFFER_BIT;\n    if (depth !== true) {\n      parameters.clearStencil = depth;\n    }\n  }\n\n  assert(clearFlags !== 0, ERR_ARGUMENTS);\n\n  // Temporarily set any clear \"colors\" and call clear\n  withParameters(gl, parameters, () => {\n    gl.clear(clearFlags);\n  });\n}\n\n// WebGL2 - clear a specific drawing buffer\nexport function clearBuffer(gl, {\n  framebuffer = null,\n  buffer = GL_COLOR,\n  drawBuffer = 0,\n  value = [0, 0, 0, 0]\n} = {}) {\n  assert(isWebGL2(gl), ERR_WEBGL2);\n\n  withParameters(gl, {framebuffer}, () => {\n\n    // Method selection per OpenGL ES 3 docs\n    switch (buffer) {\n    case GL_COLOR:\n      switch (value.constructor) {\n      case Int32Array:\n        gl.clearBufferiv(buffer, drawBuffer, value);\n        break;\n      case Uint32Array:\n        gl.clearBufferuiv(buffer, drawBuffer, value);\n        break;\n      case Float32Array:\n      default:\n        gl.clearBufferfv(buffer, drawBuffer, value);\n      }\n      break;\n\n    case GL_DEPTH:\n      gl.clearBufferfv(GL_DEPTH, 0, [value]);\n      break;\n\n    case GL_STENCIL:\n      gl.clearBufferiv(GL_STENCIL, 0, [value]);\n      break;\n\n    case GL_DEPTH_STENCIL:\n      const [depth, stencil] = value;\n      gl.clearBufferfi(GL_DEPTH_STENCIL, 0, depth, stencil);\n      break;\n\n    default:\n      assert(false, ERR_ARGUMENTS);\n    }\n  });\n}\n"]}