{"version":3,"sources":["../../src/webgl/texture-3d.js"],"names":["Texture3D","gl","opts","Object","assign","target","TEXTURE_3D","width","height","depth","seal","setImageData","generateMipmap","pixels","settings","setImage3D","setParameters","level","internalformat","RGBA","border","format","type","UNSIGNED_BYTE","offset","ArrayBuffer","isView","texImage3D","bindBuffer","PIXEL_UNPACK_BUFFER","handle"],"mappings":";;;;;;;;AAAA;;;;AACA;;AACA;;AACA;;;;AACA;;;;;;;;;;;;IAEqBA,S;;;;;gCAEAC,E,EAAI;AACrB,aAAO,uBAASA,EAAT,CAAP;AACD;;AAED;;;;;;;;;;;;;;;AAYA,qBAAYA,EAAZ,EAA2B;AAAA,QAAXC,IAAW,uEAAJ,EAAI;;AAAA;;AACzB,sCAAoBD,EAApB;;AADyB,sHAEnBA,EAFmB,EAEfE,OAAOC,MAAP,CAAc,EAAd,EAAkBF,IAAlB,EAAwB,EAACG,QAAQH,KAAKG,MAAL,IAAe,cAAGC,UAA3B,EAAxB,CAFe;;AAIzB,UAAKC,KAAL,GAAa,IAAb;AACA,UAAKC,MAAL,GAAc,IAAd;AACA,UAAKC,KAAL,GAAa,IAAb;AACAN,WAAOO,IAAP;;AAEA,UAAKC,YAAL,CAAkBT,IAAlB;AACA,QAAIA,KAAKU,cAAT,EAAyB;AACvB,YAAKA,cAAL;AACD;AAZwB;AAa1B;;;;iCAEqB;AAAA;;AAAA,UAAXV,IAAW,uEAAJ,EAAI;;AACpB,WAAKA,IAAL,GAAYC,OAAOC,MAAP,CAAc,EAAd,EAAkB,KAAKF,IAAvB,EAA6BA,IAA7B,CAAZ;AADoB,kBAEO,KAAKA,IAFZ;AAAA,UAEbW,MAFa,SAEbA,MAFa;AAAA,UAELC,QAFK,SAELA,QAFK;;AAGpB,UAAIA,QAAJ,EAAc;AACZ,0CAAeA,QAAf,EAAyB,YAAM;AAC7B,cAAID,MAAJ,EAAY;AACV,mBAAKE,UAAL,CAAgB,OAAKb,IAArB;AACD;AACF,SAJD;AAKA,aAAKc,aAAL,CAAmBd,IAAnB;AACD;AACF;;AAED;;AAEA;;;;qCAYG;AAAA,4BAVDe,KAUC;AAAA,UAVDA,KAUC,8BAVO,CAUP;AAAA,qCATDC,cASC;AAAA,UATDA,cASC,uCATgB,cAAGC,IASnB;AAAA,UARDZ,KAQC,QARDA,KAQC;AAAA,UAPDC,MAOC,QAPDA,MAOC;AAAA,4BANDC,KAMC;AAAA,UANDA,KAMC,8BANO,CAMP;AAAA,6BALDW,MAKC;AAAA,UALDA,MAKC,+BALQ,CAKR;AAAA,UAJDC,MAIC,QAJDA,MAIC;AAAA,2BAHDC,IAGC;AAAA,UAHDA,IAGC,6BAHM,cAAGC,aAGT;AAAA,6BAFDC,MAEC;AAAA,UAFDA,MAEC,+BAFQ,CAER;AAAA,UADDX,MACC,QADDA,MACC;;AACD,UAAIY,YAAYC,MAAZ,CAAmBb,MAAnB,CAAJ,EAAgC;AAC9B,aAAKZ,EAAL,CAAQ0B,UAAR,CACE,KAAKtB,MADP,EAEEY,KAFF,EAESC,cAFT,EAGEX,KAHF,EAGSC,MAHT,EAGiBC,KAHjB,EAGwBW,MAHxB,EAGgCC,MAHhC,EAGwCC,IAHxC,EAG8CT,MAH9C;AAIA;AACD;AACD,UAAIA,kCAAJ,EAA8B;AAC5B,aAAKZ,EAAL,CAAQ2B,UAAR,CAAmB,cAAGC,mBAAtB,EAA2ChB,OAAOiB,MAAlD;AACA,aAAK7B,EAAL,CAAQ0B,UAAR,CACE,KAAKtB,MADP,EAEEY,KAFF,EAESC,cAFT,EAGEX,KAHF,EAGSC,MAHT,EAGiBC,KAHjB,EAGwBW,MAHxB,EAGgCC,MAHhC,EAGwCC,IAHxC,EAG8CE,MAH9C;AAIA,aAAKvB,EAAL,CAAQ2B,UAAR,CAAmB,cAAGC,mBAAtB,EAA2ChB,OAAOiB,MAAlD;AACD;AACF;;;;;;kBA5EkB9B,S","file":"texture-3d.js","sourcesContent":["import GL from './api';\nimport {isWebGL2, assertWebGL2Context} from './context';\nimport {withParameters} from './context-state';\nimport Texture from '../webgl/texture';\nimport Buffer from './buffer';\n\nexport default class Texture3D extends Texture {\n\n  static isSupported(gl) {\n    return isWebGL2(gl);\n  }\n\n  /**\n   * @classdesc\n   * 3D WebGL Texture\n   * Note: Constructor will initialize your texture.\n   *\n   * @class\n   * @param {WebGLRenderingContext} gl - gl context\n   * @param {Image|ArrayBuffer|null} opts= - named options\n   * @param {Image|ArrayBuffer|null} opts.data= - buffer\n   * @param {GLint} width - width of texture\n   * @param {GLint} height - height of texture\n   */\n  constructor(gl, opts = {}) {\n    assertWebGL2Context(gl);\n    super(gl, Object.assign({}, opts, {target: opts.target || GL.TEXTURE_3D}));\n\n    this.width = null;\n    this.height = null;\n    this.depth = null;\n    Object.seal(this);\n\n    this.setImageData(opts);\n    if (opts.generateMipmap) {\n      this.generateMipmap();\n    }\n  }\n\n  initialize(opts = {}) {\n    this.opts = Object.assign({}, this.opts, opts);\n    const {pixels, settings} = this.opts;\n    if (settings) {\n      withParameters(settings, () => {\n        if (pixels) {\n          this.setImage3D(this.opts);\n        }\n      });\n      this.setParameters(opts);\n    }\n  }\n\n  // WebGL2\n\n  // Image 3D copies from Typed Array or WebGLBuffer\n  setImage3D({\n    level = 0,\n    internalformat = GL.RGBA,\n    width,\n    height,\n    depth = 1,\n    border = 0,\n    format,\n    type = GL.UNSIGNED_BYTE,\n    offset = 0,\n    pixels\n  }) {\n    if (ArrayBuffer.isView(pixels)) {\n      this.gl.texImage3D(\n        this.target,\n        level, internalformat,\n        width, height, depth, border, format, type, pixels);\n      return;\n    }\n    if (pixels instanceof Buffer) {\n      this.gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, pixels.handle);\n      this.gl.texImage3D(\n        this.target,\n        level, internalformat,\n        width, height, depth, border, format, type, offset);\n      this.gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, pixels.handle);\n    }\n  }\n}\n"]}