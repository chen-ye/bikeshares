{"version":3,"sources":["../../src/webgl/program.js"],"names":["getUniformDescriptors","getVaryingMap","Program","gl","opts","initialize","vertexAttributes","getDefaultArray","Object","seal","id","programName","vs","getName","fs","replace","defaultUniforms","varyings","bufferMode","SEPARATE_ATTRIBS","transformFeedbackVaryings","handle","_compileAndLink","_attributeLocations","_getAttributeLocations","_attributeCount","getAttributeCount","_warn","_filledLocations","_uniformSetters","_getUniformSetters","_uniformCount","getUniformCount","_textureIndexCounter","useProgram","drawMode","TRIANGLES","vertexCount","offset","start","end","isIndexed","indexType","UNSIGNED_SHORT","isInstanced","instanceCount","vertexArray","transformFeedback","uniforms","samplers","parameters","settings","deprecated","bind","RASTERIZER_DISCARD","enable","primitiveMode","begin","setUniforms","ext","drawElementsInstanced","isNaN","drawElementsRange","drawElements","drawArraysInstanced","drawArrays","disable","buffers","clear","check","drawParams","_sortBuffersByLocation","locations","elements","location","length","bufferName","buffer","divisor","layout","instanced","setBuffer","setDivisor","type","_checkBuffers","i","bindBuffer","ELEMENT_ARRAY_BUFFER","uniformName","uniform","uniformSetter","sampler","textureIndex","undefined","texture","_getParameter","ACTIVE_ATTRIBUTES","attributeName","getAttribLocation","getActiveAttrib","ACTIVE_UNIFORMS","index","getActiveUniform","name","getUniformLocation","getUniform","program","result","getTransformFeedbackVarying","varyingName","getFragDataLocation","getAttachedShaders","attachShader","linkProgram","debug","priority","validateProgram","linked","getProgramParameter","LINK_STATUS","Error","getProgramInfoLog","warn","Array","target","_print","isEnabled","attributeLocations","getAttributeInfo","getAttributeLocation","uniformSetters","info","getUniformInfo","parsedName","isArray","createProgram","deleteProgram","shaderHandles","shaderHandle","getShaderParameter","SHADER_TYPE","VERTEX_SHADER","FRAGMENT_SHADER","pname","uniformDescriptors","descriptor","varyingMap","varying"],"mappings":"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","file":"program.js","sourcesContent":["/* eslint-disable no-inline-comments */\nimport GL from './api';\nimport {assertWebGL2Context, isWebGL2} from './context';\nimport VertexArray from './vertex-array';\nimport Resource from './resource';\nimport Texture from './texture';\nimport {getTransformFeedbackMode} from './transform-feedback';\nimport {parseUniformName, getUniformSetter} from './uniforms';\nimport {VertexShader, FragmentShader} from './shader';\nimport {log, uid} from '../utils';\nimport assert from 'assert';\n\n// const GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F;\n// const GL_TRANSFORM_FEEDBACK_VARYINGS = 0x8C83;\n// MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS : 0x8C80,\n// TRANSFORM_FEEDBACK_BUFFER_START: 0x8C84,\n// TRANSFORM_FEEDBACK_BUFFER_SIZE : 0x8C85,\n// TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: 0x8C88,\n// MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: 0x8C8A,\n// MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: 0x8C8B,\n// INTERLEAVED_ATTRIBS: 0x8C8C,\n// SEPARATE_ATTRIBS : 0x8C8D,\n\nexport default class Program extends Resource {\n  /*\n   * @classdesc\n   * Handles creation of programs, mapping of attributes and uniforms\n   *\n   * @class\n   * @param {WebGLRenderingContext} gl - gl context\n   * @param {Object} opts - options\n   * @param {String} opts.vs - Vertex shader source\n   * @param {String} opts.fs - Fragment shader source\n   * @param {String} opts.id= - Id\n   */\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n    this.initialize(opts);\n    this.vertexAttributes = VertexArray.getDefaultArray(gl);\n    Object.seal(this);\n\n    // If program is not named, name it after shader names\n    if (!opts.id) {\n      let programName = this.vs.getName() || this.fs.getName();\n      programName = programName.replace(/shader/i, '');\n      programName = programName ? `${programName}-program` : 'program';\n      // TODO - this.id will already have been initialized\n      this.id = uid(programName);\n    }\n  }\n\n  initialize({vs, fs, defaultUniforms, varyings, bufferMode = GL.SEPARATE_ATTRIBS} = {}) {\n    // Create shaders if needed\n    this.vs = typeof vs === 'string' ? new VertexShader(this.gl, vs) : vs;\n    this.fs = typeof fs === 'string' ? new FragmentShader(this.gl, fs) : fs;\n\n    assert(this.vs instanceof VertexShader, 'Program: bad vertex shader');\n    assert(this.fs instanceof FragmentShader, 'Program: bad fragment shader');\n\n    this.defaultUniforms = defaultUniforms;\n\n    // Setup varyings if supplied\n    if (varyings) {\n      assertWebGL2Context(this.gl);\n      this.gl.transformFeedbackVaryings(this.handle, varyings, bufferMode);\n      this.varyings = getVaryingMap(varyings, bufferMode);\n    }\n\n    this._compileAndLink();\n\n    // determine attribute locations (i.e. indices)\n    this._attributeLocations = this._getAttributeLocations();\n    this._attributeCount = this.getAttributeCount();\n    this._warn = [];\n    this._filledLocations = {};\n\n    // prepare uniform setters\n    this._uniformSetters = this._getUniformSetters();\n    this._uniformCount = this.getUniformCount();\n    this._textureIndexCounter = 0;\n\n    return this;\n  }\n\n  use() {\n    this.gl.useProgram(this.handle);\n    return this;\n  }\n\n  // A good thing about webGL is that there are so many ways to draw things,\n  // e.g. depending on whether data is indexed and/or isInstanced.\n  // This function unifies those into a single call with simple parameters\n  // that have sane defaults.\n  draw({\n    drawMode = GL.TRIANGLES,\n    vertexCount,\n    offset = 0,\n    start,\n    end,\n    isIndexed = false,\n    indexType = GL.UNSIGNED_SHORT,\n    isInstanced = false,\n    instanceCount = 0,\n    vertexArray = null,\n    transformFeedback = null,\n    uniforms = {},\n    samplers = {},\n    parameters = {},\n    settings\n  }) {\n    if (settings) {\n      log.deprecated('settings', 'parameters');\n      parameters = settings;\n    }\n\n    vertexArray = vertexArray || VertexArray.getDefaultArray(this.gl);\n    vertexArray.bind(() => {\n\n      this.gl.useProgram(this.handle);\n\n      if (transformFeedback) {\n        if (parameters[GL.RASTERIZER_DISCARD]) {\n          // bypass fragment shader\n          this.gl.enable(GL.RASTERIZER_DISCARD);\n        }\n\n        const primitiveMode = getTransformFeedbackMode({drawMode});\n        transformFeedback.begin(primitiveMode);\n      }\n\n      this.setUniforms(uniforms, samplers);\n\n      // TODO - Use polyfilled WebGL2RenderingContext instead of ANGLE extension\n      if (isIndexed && isInstanced) {\n        this.ext.drawElementsInstanced(drawMode, vertexCount, indexType, offset, instanceCount);\n      } else if (isIndexed && isWebGL2(this.gl) && !isNaN(start) && !isNaN(end)) {\n        this.gl.drawElementsRange(drawMode, start, end, vertexCount, indexType, offset);\n      } else if (isIndexed) {\n        this.gl.drawElements(drawMode, vertexCount, indexType, offset);\n      } else if (isInstanced) {\n        this.ext.drawArraysInstanced(drawMode, offset, vertexCount, instanceCount);\n      } else {\n        this.gl.drawArrays(drawMode, offset, vertexCount);\n      }\n\n      // this.gl.useProgram(null);\n\n      if (transformFeedback) {\n        transformFeedback.end();\n\n        if (parameters[GL.RASTERIZER_DISCARD]) {\n          // resume fragment shader\n          this.gl.disable(GL.RASTERIZER_DISCARD);\n        }\n      }\n\n    });\n\n    return this;\n  }\n\n  /**\n   * Attach a map of Buffers values to a program\n   * Only attributes with names actually present in the linked program\n   * will be updated. Other supplied buffers will be ignored.\n   *\n   * @param {Object} buffers - An object map with attribute names being keys\n   *  and values are expected to be instances of Buffer.\n   * @returns {Program} Returns itself for chaining.\n   */\n  /* eslint-disable max-statements */\n  setBuffers(buffers, {clear = true, check = true, drawParams = {}} = {}) {\n    if (clear) {\n      this._filledLocations = {};\n    }\n\n    // indexing is autodetected - buffer with target gl.ELEMENT_ARRAY_BUFFER\n    // index type is saved for drawElement calls\n    drawParams.isInstanced = false;\n    drawParams.isIndexed = false;\n    drawParams.indexType = null;\n\n    const {locations, elements} = this._sortBuffersByLocation(buffers);\n\n    // Process locations in order\n    for (let location = 0; location < locations.length; ++location) {\n      const bufferName = locations[location];\n      const buffer = buffers[bufferName];\n      // DISABLE MISSING ATTRIBUTE\n      if (!buffer) {\n        this.vertexAttributes.disable(location);\n      } else {\n        const divisor = buffer.layout.instanced ? 1 : 0;\n        this.vertexAttributes.enable(location);\n        this.vertexAttributes.setBuffer({location, buffer});\n        this.vertexAttributes.setDivisor(location, divisor);\n        drawParams.isInstanced = buffer.layout.instanced > 0;\n        this._filledLocations[bufferName] = true;\n      }\n    }\n\n    // SET ELEMENTS ARRAY BUFFER\n    if (elements) {\n      const buffer = buffers[elements];\n      buffer.bind();\n      drawParams.isIndexed = true;\n      drawParams.indexType = buffer.layout.type;\n    }\n\n    if (check) {\n      this._checkBuffers();\n    }\n\n    return this;\n  }\n  /* eslint-enable max-statements */\n\n  /*\n   * @returns {Program} Returns itself for chaining.\n   */\n  unsetBuffers() {\n    const length = this._attributeCount;\n    for (let i = 1; i < length; ++i) {\n      // this.vertexAttributes.setDivisor(i, 0);\n      this.vertexAttributes.disable(i);\n    }\n\n    // Clear elements buffer\n    this.gl.bindBuffer(GL.ELEMENT_ARRAY_BUFFER, null);\n    return this;\n  }\n\n  /**\n   * Apply a set of uniform values to a program\n   * Only uniforms with names actually present in the linked program\n   * will be updated.\n   * other uniforms will be ignored\n   *\n   * @param {Object} uniformMap - An object with names being keys\n   * @returns {Program} - returns itself for chaining.\n   */\n  /* eslint-disable max-depth */\n  setUniforms(uniforms, samplers = {}) {\n    for (const uniformName in uniforms) {\n      const uniform = uniforms[uniformName];\n      const uniformSetter = this._uniformSetters[uniformName];\n      const sampler = samplers[uniformName];\n\n      if (uniformSetter) {\n        if (uniform instanceof Texture) {\n          if (uniformSetter.textureIndex === undefined) {\n            uniformSetter.textureIndex = this._textureIndexCounter++;\n          }\n\n          // Bind texture to index\n          const texture = uniform;\n          const {textureIndex} = uniformSetter;\n\n          texture.bind(textureIndex);\n\n          // Bind a sampler (if supplied) to index\n          if (sampler) {\n            sampler.bind(textureIndex);\n          }\n\n          // Set the uniform sampler to the texture index\n          uniformSetter(textureIndex);\n        } else {\n          // Just set the value\n          uniformSetter(uniform);\n        }\n      }\n    }\n\n    return this;\n  }\n  /* eslint-enable max-depth */\n\n  // setTransformFeedbackBuffers(buffers) {\n  //   for (const buffer of buffers) {\n  //     buffer.bindBase()\n  //   }\n  // }\n\n  /**\n   * ATTRIBUTES API\n   * (Locations are numeric indices)\n   * @return {Number} count\n   */\n  getAttributeCount() {\n    return this._getParameter(GL.ACTIVE_ATTRIBUTES);\n  }\n\n  /**\n   * Returns location (index) of a name\n   * @param {String} attributeName - name of an attribute\n   *   (matches name in a linked shader)\n   * @returns {Number} - // array of actual attribute names from shader linking\n   */\n  getAttributeLocation(attributeName) {\n    return this.gl.getAttribLocation(this.handle, attributeName);\n  }\n\n  /**\n   * Returns an object with info about attribute at index \"location\"/\n   * @param {int} location - index of an attribute\n   * @returns {WebGLActiveInfo} - info about an active attribute\n   *   fields: {name, size, type}\n   */\n  getAttributeInfo(location) {\n    return this.gl.getActiveAttrib(this.handle, location);\n  }\n\n  /**\n   * UNIFORMS API\n   * (Locations are numeric indices)\n   * @return {Number} count\n   */\n  getUniformCount() {\n    return this._getParameter(GL.ACTIVE_UNIFORMS);\n  }\n\n  /*\n   * @returns {WebGLActiveInfo} - object with {name, size, type}\n   */\n  getUniformInfo(index) {\n    return this.gl.getActiveUniform(this.handle, index);\n  }\n\n  /*\n   * @returns {WebGLUniformLocation} - opaque object representing location\n   * of uniform, used by setter methods\n   */\n  getUniformLocation(name) {\n    return this.gl.getUniformLocation(this.handle, name);\n  }\n\n  getUniformValue(location) {\n    return this.gl.getUniform(this.handle, location);\n  }\n\n  // WebGL2\n  /**\n   * @param {GLuint} index\n   * @return {WebGLActiveInfo} - object with {name, size, type}\n   */\n  getVarying(program, index) {\n    const result = this.gl.getTransformFeedbackVarying(program, index);\n    return result;\n  }\n\n  // Retrieves the assigned color number binding for the user-defined varying\n  // out variable name for program. program must have previously been linked.\n  getFragDataLocation(varyingName) {\n    assertWebGL2Context(this.gl);\n    return this.gl.getFragDataLocation(this.handle, varyingName);\n  }\n\n  // @returns {WebGLShader[]} - array of attached WebGLShader objects\n  getAttachedShaders() {\n    return this.gl.getAttachedShaders(this.handle);\n  }\n\n  // PRIVATE METHODS\n\n  _compileAndLink() {\n    const {gl} = this;\n    gl.attachShader(this.handle, this.vs.handle);\n    gl.attachShader(this.handle, this.fs.handle);\n    gl.linkProgram(this.handle);\n\n    // Avoid checking program linking error in production\n    if (gl.debug || log.priority > 0) {\n      gl.validateProgram(this.handle);\n      const linked = gl.getProgramParameter(this.handle, gl.LINK_STATUS);\n      if (!linked) {\n        throw new Error(`Error linking ${gl.getProgramInfoLog(this.handle)}`);\n      }\n    }\n  }\n\n  _checkBuffers() {\n    for (const attributeName in this._attributeLocations) {\n      if (!this._filledLocations[attributeName] && !this._warn[attributeName]) {\n        const location = this._attributeLocations[attributeName];\n        // throw new Error(`Program ${this.id}: ` +\n        //   `Attribute ${location}:${attributeName} not supplied`);\n        log.warn(0, `Program ${this.id}: Attribute ${location}:${attributeName} not supplied`);\n        this._warn[attributeName] = true;\n      }\n    }\n    return this;\n  }\n\n  _sortBuffersByLocation(buffers) {\n    let elements = null;\n    const locations = new Array(this._attributeCount);\n\n    for (const bufferName in buffers) {\n      const buffer = buffers[bufferName];\n      const location = this._attributeLocations[bufferName];\n      if (location === undefined) {\n        if (buffer.target === GL.ELEMENT_ARRAY_BUFFER && elements) {\n          throw new Error(`${this._print(bufferName)} duplicate GL.ELEMENT_ARRAY_BUFFER`);\n        } else if (buffer.target === GL.ELEMENT_ARRAY_BUFFER) {\n          elements = bufferName;\n        } else if (!this._warn[bufferName]) {\n          log.warn(2, `${this._print(bufferName)} not used`);\n          this._warn[bufferName] = true;\n        }\n      } else {\n        if (buffer.target === GL.ELEMENT_ARRAY_BUFFER) {\n          throw new Error(`${this._print(bufferName)}:${location} ` +\n            'has both location and type gl.ELEMENT_ARRAY_BUFFER');\n        }\n        locations[location] = bufferName;\n      }\n    }\n    return {locations, elements};\n  }\n\n  // Check that all active attributes are enabled\n  _areAllAttributesEnabled() {\n    const length = this._attributeCount;\n    for (let i = 0; i < length; ++i) {\n      if (!this.vertexAttributes.isEnabled(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  // determine attribute locations (maps attribute name to index)\n  _getAttributeLocations() {\n    const attributeLocations = {};\n    const length = this.getAttributeCount();\n    for (let location = 0; location < length; location++) {\n      const name = this.getAttributeInfo(location).name;\n      attributeLocations[name] = this.getAttributeLocation(name);\n    }\n    return attributeLocations;\n  }\n\n  // create uniform setters\n  // Map of uniform names to setter functions\n  _getUniformSetters() {\n    const {gl} = this;\n    const uniformSetters = {};\n    const length = this.getUniformCount();\n    for (let i = 0; i < length; i++) {\n      const info = this.getUniformInfo(i);\n      const parsedName = parseUniformName(info.name);\n      const location = this.getUniformLocation(parsedName.name);\n      uniformSetters[parsedName.name] =\n        getUniformSetter(gl, location, info, parsedName.isArray);\n    }\n    return uniformSetters;\n  }\n\n  _print(bufferName) {\n    return `Program ${this.id}: Attribute ${bufferName}`;\n  }\n\n  _createHandle() {\n    return this.gl.createProgram();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteProgram(this.handle);\n  }\n\n  _getOptionsFromHandle(handle) {\n    const shaderHandles = this.gl.getAttachedShaders(handle);\n    const opts = {};\n    for (const shaderHandle of shaderHandles) {\n      const type = this.gl.getShaderParameter(this.handle, GL.SHADER_TYPE);\n      switch (type) {\n      case GL.VERTEX_SHADER:\n        opts.vs = new VertexShader({handle: shaderHandle});\n        break;\n      case GL.FRAGMENT_SHADER:\n        opts.fs = new FragmentShader({handle: shaderHandle});\n        break;\n      default:\n      }\n    }\n    return opts;\n  }\n\n  _getParameter(pname) {\n    return this.gl.getProgramParameter(this.handle, pname);\n  }\n}\n\n// create uniform setters\n// Map of uniform names to setter functions\nexport function getUniformDescriptors(gl, program) {\n  const uniformDescriptors = {};\n  const length = program.getUniformCount();\n  for (let i = 0; i < length; i++) {\n    const info = program.getUniformInfo(i);\n    const location = program.getUniformLocation(info.name);\n    const descriptor = getUniformSetter(gl, location, info);\n    uniformDescriptors[descriptor.name] = descriptor;\n  }\n  return uniformDescriptors;\n}\n\n// Get a map of buffer indices\nexport function getVaryingMap(varyings, bufferMode) {\n  const varyingMap = {};\n  let index = 0;\n  for (const varying of varyings) {\n    if (bufferMode === GL.SEPARATE_ATTRIBS) {\n      varyingMap[varyings] = {index};\n      index++;\n    } else if (varying === 'gl_NextBuffer') {\n      index++;\n    } else {\n      // Add a \"safe\" offset as fallback unless app specifies it\n      // Could query\n      varyingMap[varyings] = {index, offset: 16};\n    }\n  }\n  return varyingMap;\n}\n"]}