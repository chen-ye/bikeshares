{"version":3,"sources":["../../src/webgl/renderbuffer.js"],"names":["GL_RENDERBUFFER","GL_SAMPLES","GL_RENDERBUFFER_WIDTH","GL_RENDERBUFFER_HEIGHT","GL_RENDERBUFFER_INTERNAL_FORMAT","GL_RENDERBUFFER_SAMPLES","CB_FLOAT_WEBGL2","RENDERBUFFER_FORMATS","DEPTH_COMPONENT16","DEPTH_COMPONENT24","gl2","DEPTH_COMPONENT32F","STENCIL_INDEX8","DEPTH_STENCIL","DEPTH24_STENCIL8","DEPTH32F_STENCIL8","RGBA4","RGB565","RGB5_A1","R8","R8UI","R8I","R16UI","R16I","R32UI","R32I","RG8","RG8UI","RG8I","RG16UI","RG16I","RG32UI","RG32I","RGB8","RGBA8","RGB10_A2","RGBA8UI","RGBA8I","RGB10_A2UI","RGBA16UI","RGBA16I","RGBA32I","RGBA32UI","R16F","RG16F","RGBA16F","R32F","RG32F","RGBA32F","R11F_G11F_B10F","isFormatSupported","gl","format","formats","info","value","gl1","getExtension","Renderbuffer","getInternalformatParameter","opts","initialize","Object","seal","width","height","samples","bindRenderbuffer","handle","renderbufferStorageMultisample","renderbufferStorage","createRenderbuffer","deleteRenderbuffer","getParameter","pname","getRenderbufferParameter"],"mappings":"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","file":"renderbuffer.js","sourcesContent":["/* eslint-disable no-inline-comments */\nimport GL from './gl-constants';\nimport {isWebGL2} from './context';\nimport Resource from './resource';\nimport assert from 'assert';\n\n// Define local GL constants to optimize minification\nconst GL_RENDERBUFFER = 0x8D41;\nconst GL_SAMPLES = 0x80A9;\nconst GL_RENDERBUFFER_WIDTH = 0x8D42;\nconst GL_RENDERBUFFER_HEIGHT = 0x8D43;\nconst GL_RENDERBUFFER_INTERNAL_FORMAT = 0x8D44;\nconst GL_RENDERBUFFER_SAMPLES = 0x8CAB;\n\n// Define local extension strings to optimize minification\n// const SRGB = 'EXT_sRGB';\n// const CB_FLOAT_WEBGL1 = 'WEBGL_color_buffer_float';\nconst CB_FLOAT_WEBGL2 = 'EXT_color_buffer_float';\n// const CB_HALF_FLOAT_WEBGL1 = 'EXT_color_buffer_half_float';\n\nexport const RENDERBUFFER_FORMATS = {\n  [GL.DEPTH_COMPONENT16]: {}, // 16 depth bits.\n  [GL.DEPTH_COMPONENT24]: {gl2: true},\n  [GL.DEPTH_COMPONENT32F]: {gl2: true},\n\n  [GL.STENCIL_INDEX8]: {}, // 8 stencil bits.\n\n  [GL.DEPTH_STENCIL]: {},\n  [GL.DEPTH24_STENCIL8]: {gl2: true},\n  [GL.DEPTH32F_STENCIL8]: {gl2: true},\n\n  // When using a WebGL 1 context, color renderbuffer formats are limited\n  [GL.RGBA4]: {},\n  [GL.RGB565]: {},\n  [GL.RGB5_A1]: {},\n\n  // When using a WebGL 2 context, the following values are available additionally:\n  [GL.R8]: {gl2: true},\n  [GL.R8UI]: {gl2: true},\n  [GL.R8I]: {gl2: true},\n  [GL.R16UI]: {gl2: true},\n  [GL.R16I]: {gl2: true},\n  [GL.R32UI]: {gl2: true},\n  [GL.R32I]: {gl2: true},\n  [GL.RG8]: {gl2: true},\n  [GL.RG8UI]: {gl2: true},\n  [GL.RG8I]: {gl2: true},\n  [GL.RG16UI]: {gl2: true},\n  [GL.RG16I]: {gl2: true},\n  [GL.RG32UI]: {gl2: true},\n  [GL.RG32I]: {gl2: true},\n  [GL.RGB8]: {gl2: true},\n  [GL.RGBA8]: {gl2: true},\n  // [GL.SRGB8_ALPHA8]: {gl2: true, gl1: SRGB}, // When using the EXT_sRGB WebGL1 extension\n  [GL.RGB10_A2]: {gl2: true},\n  [GL.RGBA8UI]: {gl2: true},\n  [GL.RGBA8I]: {gl2: true},\n  [GL.RGB10_A2UI]: {gl2: true},\n  [GL.RGBA16UI]: {gl2: true},\n  [GL.RGBA16I]: {gl2: true},\n  [GL.RGBA32I]: {gl2: true},\n  [GL.RGBA32UI]: {gl2: true},\n\n  // When using a WebGL 2 context and the EXT_color_buffer_float WebGL2 extension\n  [GL.R16F]: {gl2: CB_FLOAT_WEBGL2},\n  [GL.RG16F]: {gl2: CB_FLOAT_WEBGL2},\n  [GL.RGBA16F]: {gl2: CB_FLOAT_WEBGL2},\n  [GL.R32F]: {gl2: CB_FLOAT_WEBGL2},\n  [GL.RG32F]: {gl2: CB_FLOAT_WEBGL2},\n  // TODO - can't get WEBGL_color_buffer_float to work on renderbuffers\n  [GL.RGBA32F]: {gl2: CB_FLOAT_WEBGL2},\n  // [GL.RGBA32F]: {gl2: CB_FLOAT_WEBGL2, gl1: CB_FLOAT_WEBGL1},\n  [GL.R11F_G11F_B10F]: {gl2: CB_FLOAT_WEBGL2}\n};\n\nfunction isFormatSupported(gl, format, formats) {\n  // assert(isWebGL(gl), ERR_WEBGL);\n  const info = formats[format];\n  if (!info) {\n    return false;\n  }\n  const value = isWebGL2(gl) ? info.gl2 || info.gl1 : info.gl1;\n  if (typeof value === 'string') {\n    return gl.getExtension(value);\n  }\n  return value;\n}\n\nexport default class Renderbuffer extends Resource {\n\n  static isSupported(gl, {format} = {}) {\n    return !format || isFormatSupported(gl, format, RENDERBUFFER_FORMATS);\n  }\n\n  static getSamplesForFormat(gl, {format}) {\n    // Polyfilled to return [0] under WebGL1\n    return gl.getInternalformatParameter(GL_RENDERBUFFER, format, GL_SAMPLES);\n  }\n\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n    this.initialize(opts);\n    Object.seal(this);\n  }\n\n  // Creates and initializes a renderbuffer object's data store\n  initialize({format, width = 1, height = 1, samples = 0}) {\n    assert(format, 'Needs format');\n    this.gl.bindRenderbuffer(GL_RENDERBUFFER, this.handle);\n\n    if (samples !== 0 && isWebGL2(this.gl)) {\n      this.gl.renderbufferStorageMultisample(GL_RENDERBUFFER, samples, format, width, height);\n    } else {\n      this.gl.renderbufferStorage(GL_RENDERBUFFER, format, width, height);\n    }\n\n    // this.gl.bindRenderbuffer(GL_RENDERBUFFER, null);\n\n    this.format = format;\n    this.width = width;\n    this.height = height;\n    this.samples = samples;\n\n    return this;\n  }\n\n  resize({width, height}) {\n    // Don't resize if width/height haven't changed\n    if (width !== this.width || height !== this.height) {\n      return this.initialize({width, height, format: this.format, samples: this.samples});\n    }\n    return this;\n  }\n\n  // PRIVATE METHODS\n  _createHandle() {\n    return this.gl.createRenderbuffer();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteRenderbuffer(this.handle);\n  }\n\n  _syncHandle(handle) {\n    this.format = this.getParameter(GL_RENDERBUFFER_INTERNAL_FORMAT);\n    this.width = this.getParameter(GL_RENDERBUFFER_WIDTH);\n    this.height = this.getParameter(GL_RENDERBUFFER_HEIGHT);\n    this.samples = this.getParameter(GL_RENDERBUFFER_SAMPLES);\n  }\n\n  // @param {Boolean} opt.autobind=true - method call will bind/unbind object\n  // @returns {GLenum|GLint} - depends on pname\n  _getParameter(pname) {\n    this.gl.bindRenderbuffer(GL_RENDERBUFFER, this.handle);\n    const value = this.gl.getRenderbufferParameter(GL_RENDERBUFFER, pname);\n    // this.gl.bindRenderbuffer(GL_RENDERBUFFER, null);\n    return value;\n  }\n}\n"]}