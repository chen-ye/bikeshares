{"version":3,"sources":["../../src/webgl/framebuffer.js"],"names":["GL_FRAMEBUFFER","GL_DRAW_FRAMEBUFFER","GL_READ_FRAMEBUFFER","GL_COLOR_ATTACHMENT0","GL_DEPTH_ATTACHMENT","GL_STENCIL_ATTACHMENT","GL_RENDERBUFFER","GL_TEXTURE_3D","GL_TEXTURE_2D_ARRAY","GL_TEXTURE_2D","GL_TEXTURE_CUBE_MAP","GL_TEXTURE_CUBE_MAP_POSITIVE_X","GL_DEPTH_BUFFER_BIT","GL_STENCIL_BUFFER_BIT","GL_COLOR_BUFFER_BIT","ERR_MULTIPLE_RENDERTARGETS","Framebuffer","gl","colorBufferFloat","colorBufferHalfFloat","supported","getExtension","opts","width","height","attachments","readBuffer","drawBuffers","initialize","Object","seal","color","depth","stencil","check","attachment","target","object","Array","isArray","resize","_createDefaultAttachments","update","clearAttachments","checkStatus","attach","bindFramebuffer","handle","_setReadBuffer","_setDrawBuffers","log","id","attachmentPoint","newAttachments","keys","forEach","key","assign","descriptor","_unattach","_attachRenderbuffer","renderbuffer","texture","layer","level","_attachTexture","filter","status","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","Error","_getFrameBufferStatus","value","drawBuffer","x","y","format","RGBA","type","pixelArray","UNSIGNED_BYTE","ArrayType","clamped","components","glFormatToComponents","bind","readPixels","unbind","srcFramebuffer","xoffset","yoffset","zoffset","mipmapLevel","internalFormat","border","copyTexSubImage2D","copyTexSubImage3D","srcX0","srcY0","srcX1","srcY1","dstX0","dstY0","dstX1","dstY1","mask","NEAREST","blitFramebuffer","invalidateAll","undefined","invalidateFramebuffer","pname","fallback","_getAttachmentParameterFallback","getFramebufferAttachmentParameter","parameters","constructor","ATTACHMENT_PARAMETERS","values","getParameter","defaultAttachments","data","mipmaps","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","DEPTH_COMPONENT16","bindRenderbuffer","framebufferRenderbuffer","bindTexture","framebufferTextureLayer","face","mapIndexToCubeMapFace","framebufferTexture2D","BACK","ext","drawBuffersWEBGL","length","caps","FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER","webgl2","FRAMEBUFFER_ATTACHMENT_RED_SIZE","FRAMEBUFFER_ATTACHMENT_GREEN_SIZE","FRAMEBUFFER_ATTACHMENT_BLUE_SIZE","FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE","FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE","FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE","FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE","UNSIGNED_INT","FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING","EXT_sRGB","LINEAR","createFramebuffer","deleteFramebuffer","ALPHA","RGB","STATUS"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;AACA;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;;;;;;;;;;;;;AAEA;AACA,IAAMA,iBAAiB,MAAvB;AACA,IAAMC,sBAAsB,MAA5B;AACA,IAAMC,sBAAsB,MAA5B;;AAEA,IAAMC,uBAAuB,MAA7B;AACA,IAAMC,sBAAsB,MAA5B;AACA,IAAMC,wBAAwB,MAA9B;AACA;;AAEA,IAAMC,kBAAkB,MAAxB;;AAEA,IAAMC,gBAAgB,MAAtB;AACA,IAAMC,sBAAsB,MAA5B;AACA,IAAMC,gBAAgB,MAAtB;AACA,IAAMC,sBAAsB,MAA5B;;AAEA,IAAMC,iCAAiC,MAAvC;;AAEA,IAAMC,sBAAsB,UAA5B;AACA,IAAMC,wBAAwB,UAA9B;AACA,IAAMC,sBAAsB,UAA5B;;AAEA,IAAMC,6BAA6B,uCAAnC;;IAEqBC,W;;;;;gCAEAC,E,EAGX;AAAA,qFAAJ,EAAI;AAAA,UAFNC,gBAEM,QAFNA,gBAEM;AAAA,UADNC,oBACM,QADNA,oBACM;;AACN,UAAIC,YAAY,IAAhB;AACAA,kBAAYF,oBACVD,GAAGI,YAAH,CAAgB,uBAASJ,EAAT,IAAe,wBAAf,GAA0C,0BAA1D,CADF;AAEAG,kBAAYD,wBACVF,GAAGI,YAAH,CAAgB,uBAASJ,EAAT,IAAe,wBAAf,GAA0C,6BAA1D,CADF;AAEA,aAAOG,SAAP;AACD;;;AAED,uBAAYH,EAAZ,EAA2B;AAAA,QAAXK,IAAW,uEAAJ,EAAI;;AAAA;;AAGzB;AAHyB,0HACnBL,EADmB,EACfK,IADe;;AAIzB,UAAKC,KAAL,GAAa,IAAb;AACA,UAAKC,MAAL,GAAc,IAAd;AACA,UAAKC,WAAL,GAAmB,EAAnB;AACA,UAAKC,UAAL,GAAkBvB,oBAAlB;AACA,UAAKwB,WAAL,GAAmB,CAACxB,oBAAD,CAAnB;AACA,UAAKyB,UAAL,CAAgBN,IAAhB;;AAEAO,WAAOC,IAAP;AAXyB;AAY1B;;;;sCA4BE;AAAA,8BATDP,KASC;AAAA,UATDA,KASC,+BATO,CASP;AAAA,+BARDC,MAQC;AAAA,UARDA,MAQC,gCARQ,CAQR;AAAA,oCAPDC,WAOC;AAAA,UAPDA,WAOC,qCAPa,IAOb;AAAA,8BANDM,KAMC;AAAA,UANDA,KAMC,+BANO,IAMP;AAAA,8BALDC,KAKC;AAAA,UALDA,KAKC,+BALO,IAKP;AAAA,gCAJDC,OAIC;AAAA,UAJDA,OAIC,iCAJS,KAIT;AAAA,8BAHDC,KAGC;AAAA,UAHDA,KAGC,+BAHO,IAGP;AAAA,UAFDR,UAEC,SAFDA,UAEC;AAAA,UADDC,WACC,SADDA,WACC;;AACD,4BAAOJ,SAAS,CAAT,IAAcC,UAAU,CAA/B,EAAkC,sCAAlC;;AAEA;AACA,WAAKD,KAAL,GAAaA,KAAb;AACA,WAAKC,MAAL,GAAcA,MAAd;;AAEA;AACA;AACA,UAAIC,WAAJ,EAAiB;AACf,aAAK,IAAMU,UAAX,IAAyBV,WAAzB,EAAsC;AACpC,cAAMW,SAASX,YAAYU,UAAZ,CAAf;AACA,cAAME,SAASC,MAAMC,OAAN,CAAcH,MAAd,IAAwBA,OAAO,CAAP,CAAxB,GAAoCA,MAAnD;AACAC,iBAAOG,MAAP,CAAc,EAACjB,YAAD,EAAQC,cAAR,EAAd;AACD;AACF,OAND,MAMO;AACL;AACAC,sBAAc,KAAKgB,yBAAL,CAA+B,EAACV,YAAD,EAAQC,YAAR,EAAeC,gBAAf,EAAwBV,YAAxB,EAA+BC,cAA/B,EAA/B,CAAd;AACD;;AAED,WAAKkB,MAAL,CAAY,EAACC,kBAAkB,IAAnB,EAAyBlB,wBAAzB,EAAsCC,sBAAtC,EAAkDC,wBAAlD,EAAZ;;AAEA;AACA,UAAIF,eAAeS,KAAnB,EAA0B;AACxB,aAAKU,WAAL;AACD;AACF;;;kCAOE;AAAA,oCAJDnB,WAIC;AAAA,UAJDA,WAIC,qCAJa,EAIb;AAAA,UAHDC,UAGC,SAHDA,UAGC;AAAA,UAFDC,WAEC,SAFDA,WAEC;AAAA,wCADDgB,gBACC;AAAA,UADDA,gBACC,yCADkB,KAClB;;AACD,WAAKE,MAAL,CAAYpB,WAAZ,EAAyB,EAACkB,kCAAD,EAAzB;;AADC,UAGM1B,EAHN,GAGY,IAHZ,CAGMA,EAHN;AAID;;AACAA,SAAG6B,eAAH,CAAmB9C,cAAnB,EAAmC,KAAK+C,MAAxC;AACA,UAAIrB,UAAJ,EAAgB;AACd,aAAKsB,cAAL,CAAoBtB,UAApB;AACD;AACD,UAAIC,WAAJ,EAAiB;AACf,aAAKsB,eAAL,CAAqBtB,WAArB;AACD;AACDV,SAAG6B,eAAH,CAAmB9C,cAAnB,EAAmC,IAAnC;;AAEA,aAAO,IAAP;AACD;;AAED;;;;kCACwB;AAAA,UAAhBuB,KAAgB,SAAhBA,KAAgB;AAAA,UAATC,MAAS,SAATA,MAAS;;AACtB,iBAAI0B,GAAJ,CAAQ,CAAR,4BAAmC,KAAKC,EAAxC,YAAiD5B,KAAjD,SAA0DC,MAA1D;AACA,WAAK,IAAM4B,eAAX,IAA8B,KAAK3B,WAAnC,EAAgD;AAC9C,aAAKA,WAAL,CAAiB2B,eAAjB,EAAkCZ,MAAlC,CAAyC,EAACjB,YAAD,EAAQC,cAAR,EAAzC;AACD;AACD,WAAKD,KAAL,GAAaA,KAAb;AACA,WAAKC,MAAL,GAAcA,MAAd;AACA,aAAO,IAAP;AACD;;AAED;;;;2BACOC,W,EAEC;AAAA;;AAAA,sFAAJ,EAAI;AAAA,wCADNkB,gBACM;AAAA,UADNA,gBACM,yCADa,KACb;;AACN,UAAMU,iBAAiB,EAAvB;;AAEA;AACA,UAAIV,gBAAJ,EAAsB;AACpBd,eAAOyB,IAAP,CAAY,KAAK7B,WAAjB,EAA8B8B,OAA9B,CAAsC,eAAO;AAC3CF,yBAAeG,GAAf,IAAsB,IAAtB;AACD,SAFD;AAGD;;AAED;AACA3B,aAAO4B,MAAP,CAAcJ,cAAd,EAA8B5B,WAA9B;;AAEA,WAAKR,EAAL,CAAQ6B,eAAR,CAAwB9C,cAAxB,EAAwC,KAAK+C,MAA7C;;AAEA;AACA,WAAK,IAAMZ,UAAX,IAAyBkB,cAAzB,EAAyC;AACvC;AACA,8BAAOlB,eAAe,WAAtB,EAAmC,uCAAnC;;AAEA,YAAMuB,aAAaL,eAAelB,UAAf,CAAnB;AACA,YAAIE,SAASqB,UAAb;AACA,YAAI,CAACrB,MAAL,EAAa;AACX,eAAKsB,SAAL,CAAe,EAACxB,sBAAD,EAAf;AACD,SAFD,MAEO,IAAIE,wCAAJ,EAAoC;AACzC,eAAKuB,mBAAL,CAAyB,EAACzB,sBAAD,EAAa0B,cAAcxB,MAA3B,EAAzB;AACD,SAFM,MAEA,IAAIC,MAAMC,OAAN,CAAcmB,UAAd,CAAJ,EAA+B;AAAA,2CACIA,UADJ;AAAA,cAC7BI,OAD6B;AAAA;AAAA,cACpBC,KADoB,gCACZ,CADY;AAAA;AAAA,cACTC,KADS,iCACD,CADC;;AAEpC3B,mBAASyB,OAAT;AACA,eAAKG,cAAL,CAAoB,EAAC9B,sBAAD,EAAa2B,gBAAb,EAAsBC,YAAtB,EAA6BC,YAA7B,EAApB;AACD,SAJM,MAIA;AACL,eAAKC,cAAL,CAAoB,EAAC9B,sBAAD,EAAa2B,SAASzB,MAAtB,EAA8B0B,OAAO,CAArC,EAAwCC,OAAO,CAA/C,EAApB;AACD;;AAED;AACA,YAAI3B,MAAJ,EAAY;AACVA,iBAAOG,MAAP,CAAc,EAACjB,OAAO,KAAKA,KAAb,EAAoBC,QAAQ,KAAKA,MAAjC,EAAd;AACD;AACF;;AAED,WAAKP,EAAL,CAAQ6B,eAAR,CAAwB9C,cAAxB,EAAwC,IAAxC;;AAEA;AACA6B,aAAO4B,MAAP,CAAc,KAAKhC,WAAnB,EAAgCA,WAAhC;AACAI,aAAOyB,IAAP,CAAY,KAAK7B,WAAjB,EAA8ByC,MAA9B,CAAqC;AAAA,eAAO,CAAC,OAAKzC,WAAL,CAAiB+B,GAAjB,CAAR;AAAA,OAArC,EAAoED,OAApE,CAA4E,eAAO;AACjF,eAAO,OAAK9B,WAAL,CAAiB+B,GAAjB,CAAP;AACD,OAFD;AAGD;;;kCAEa;AAAA,UACLvC,EADK,GACC,IADD,CACLA,EADK;;AAEZA,SAAG6B,eAAH,CAAmB9C,cAAnB,EAAmC,KAAK+C,MAAxC;AACA,UAAMoB,SAASlD,GAAGmD,sBAAH,CAA0BpE,cAA1B,CAAf;AACAiB,SAAG6B,eAAH,CAAmB9C,cAAnB,EAAmC,IAAnC;AACA,UAAImE,WAAWlD,GAAGoD,oBAAlB,EAAwC;AACtC,cAAM,IAAIC,KAAJ,CAAUC,sBAAsBJ,MAAtB,CAAV,CAAN;AACD;AACD,aAAO,IAAP;AACD;;;4BAOO;AAAA,sFAAJ,EAAI;AAAA,UAJNpC,KAIM,SAJNA,KAIM;AAAA,UAHNC,KAGM,SAHNA,KAGM;AAAA,UAFNC,OAEM,SAFNA,OAEM;AAAA,oCADNN,WACM;AAAA,UADNA,WACM,qCADQ,EACR;;AACN;AACA,WAAKV,EAAL,CAAQ6B,eAAR,CAAwB9C,cAAxB,EAAwC,KAAK+C,MAA7C;;AAEA,UAAIhB,SAASC,KAAT,IAAkBC,OAAtB,EAA+B;AAC7B,2BAAM,KAAKhB,EAAX,EAAe,EAACc,YAAD,EAAQC,YAAR,EAAeC,gBAAf,EAAf;AACD;;AAEDN,kBAAY4B,OAAZ,CAAoB,UAACiB,KAAD,EAAQC,UAAR,EAAuB;AACzC,iCAAY,EAACA,sBAAD,EAAaD,YAAb,EAAZ;AACD,OAFD;;AAIA,WAAKvD,EAAL,CAAQ6B,eAAR,CAAwB9C,cAAxB,EAAwC,IAAxC;;AAEA,aAAO,IAAP;AACD;;AAED;AACA;AACA;AACA;;;;sCASG;AAAA,0BAPD0E,CAOC;AAAA,UAPDA,CAOC,2BAPG,CAOH;AAAA,0BANDC,CAMC;AAAA,UANDA,CAMC,2BANG,CAMH;AAAA,UALDpD,KAKC,SALDA,KAKC;AAAA,UAJDC,MAIC,SAJDA,MAIC;AAAA,+BAHDoD,MAGC;AAAA,UAHDA,MAGC,gCAHQ,cAAGC,IAGX;AAAA,UAFDC,IAEC,SAFDA,IAEC;AAAA,mCADDC,UACC;AAAA,UADDA,UACC,oCADY,IACZ;AAAA,UACM9D,EADN,GACY,IADZ,CACMA,EADN;;AAGD;;AACA,UAAI,CAAC8D,UAAL,EAAiB;AACf;AACAD,eAAOA,QAAQ7D,GAAG+D,aAAlB;AACA,YAAMC,YAAY,8CAAwBH,IAAxB,EAA8B,EAACI,SAAS,KAAV,EAA9B,CAAlB;AACA,YAAMC,aAAaC,qBAAqBR,MAArB,CAAnB;AACA;AACAG,qBAAaA,cAAc,IAAIE,SAAJ,CAAc1D,QAAQC,MAAR,GAAiB2D,UAA/B,CAA3B;AACD;;AAED;AACAL,aAAOA,QAAQ,8CAAwBC,UAAxB,CAAf;;AAEA,WAAKM,IAAL;AACA,WAAKpE,EAAL,CAAQqE,UAAR,CAAmBZ,CAAnB,EAAsBC,CAAtB,EAAyBpD,KAAzB,EAAgCC,MAAhC,EAAwCoD,MAAxC,EAAgDE,IAAhD,EAAsDC,UAAtD;AACA,WAAKQ,MAAL;;AAEA,aAAOR,UAAP;AACD;;AAED;;;;;;yCAkBG;AAAA,UAdDS,cAcC,SAdDA,cAcC;AAAA,UAbDd,CAaC,SAbDA,CAaC;AAAA,UAZDC,CAYC,SAZDA,CAYC;AAAA,UAXDpD,KAWC,SAXDA,KAWC;AAAA,UAVDC,MAUC,SAVDA,MAUC;AAAA,UATDsC,OASC,SATDA,OASC;AAAA,gCARD2B,OAQC;AAAA,UARDA,OAQC,iCARS,CAQT;AAAA,gCAPDC,OAOC;AAAA,UAPDA,OAOC,iCAPS,CAOT;AAAA,gCANDC,OAMC;AAAA,UANDA,OAMC,iCANS,CAMT;AAAA,oCALDC,WAKC;AAAA,UALDA,WAKC,qCALa,CAKb;AAAA,uCAJDC,cAIC;AAAA,UAJDA,cAIC,wCAJgB,cAAGhB,IAInB;AAAA,+BADDiB,MACC;AAAA,UADDA,MACC,gCADQ,CACR;AAAA,UACM7E,EADN,GACY,IADZ,CACMA,EADN;;AAEDA,SAAG6B,eAAH,CAAmB9C,cAAnB,EAAmCwF,eAAezC,MAAlD;;AAEA;AACA,cAAQe,QAAQ1B,MAAhB;AACA,aAAK3B,aAAL;AACA,aAAKC,mBAAL;AACEO,aAAG8E,iBAAH,CACEjC,QAAQ1B,MADV,EAEEwD,WAFF,EAGEC,cAHF,EAIEnB,CAJF,EAIKC,CAJL,EAKEb,QAAQvC,KALV,EAMEuC,QAAQtC,MANV;AAQA;AACF,aAAKhB,mBAAL;AACA,aAAKD,aAAL;AACEU,aAAG+E,iBAAH,CACElC,QAAQ1B,MADV,EAEEwD,WAFF,EAGEC,cAHF,EAIEnB,CAJF,EAIKC,CAJL,EAKEb,QAAQvC,KALV,EAMEuC,QAAQtC,MANV;AAQA;AACF;AAvBA;;AA0BAP,SAAG6B,eAAH,CAAmB9C,cAAnB,EAAmC,IAAnC;AACA,aAAO,IAAP;AACD;;AAED;;AAEA;;;;gCAUG;AAAA,UARDwF,cAQC,SARDA,cAQC;AAAA,UAPDS,KAOC,SAPDA,KAOC;AAAA,UAPMC,KAON,SAPMA,KAON;AAAA,UAPaC,KAOb,SAPaA,KAOb;AAAA,UAPoBC,KAOpB,SAPoBA,KAOpB;AAAA,UANDC,KAMC,SANDA,KAMC;AAAA,UANMC,KAMN,SANMA,KAMN;AAAA,UANaC,KAMb,SANaA,KAMb;AAAA,UANoBC,KAMpB,SANoBA,KAMpB;AAAA,UALDzE,KAKC,SALDA,KAKC;AAAA,UAJDC,KAIC,SAJDA,KAIC;AAAA,UAHDC,OAGC,SAHDA,OAGC;AAAA,6BAFDwE,IAEC;AAAA,UAFDA,IAEC,8BAFM,CAEN;AAAA,+BADDvC,MACC;AAAA,UADDA,MACC,gCADQ,cAAGwC,OACX;AAAA,UACMzF,EADN,GACY,IADZ,CACMA,EADN;;AAED,4BAAO,uBAASA,EAAT,CAAP;;AAEA,UAAIc,KAAJ,EAAW;AACT0E,gBAAQ3F,mBAAR;AACD;AACD,UAAIkB,KAAJ,EAAW;AACTyE,gBAAQ7F,mBAAR;AACD;AACD,UAAIqB,OAAJ,EAAa;AACXwE,gBAAQ5F,qBAAR;AACD;;AAEDI,SAAG6B,eAAH,CAAmB5C,mBAAnB,EAAwCsF,eAAezC,MAAvD;AACA9B,SAAG6B,eAAH,CAAmB7C,mBAAnB,EAAwC,KAAK8C,MAA7C;AACA9B,SAAG0F,eAAH,CACEV,KADF,EACSC,KADT,EACgBC,KADhB,EACuBC,KADvB,EAEEC,KAFF,EAESC,KAFT,EAEgBC,KAFhB,EAEuBC,KAFvB,EAGEC,IAHF,EAIEvC,MAJF;AAMAjD,SAAG6B,eAAH,CAAmB7C,mBAAnB,EAAwC,IAAxC;AACAgB,SAAG6B,eAAH,CAAmB5C,mBAAnB,EAAwC,IAAxC;AACA,aAAO,IAAP;AACD;;AAED;AACA;;;;uCAOG;AAAA,sCALDuB,WAKC;AAAA,UALDA,WAKC,sCALa,EAKb;AAAA,4BAJDiD,CAIC;AAAA,UAJDA,CAIC,4BAJG,CAIH;AAAA,4BAHDC,CAGC;AAAA,UAHDA,CAGC,4BAHG,CAGH;AAAA,UAFDpD,KAEC,UAFDA,KAEC;AAAA,UADDC,MACC,UADDA,MACC;AAAA,UACMP,EADN,GACY,IADZ,CACMA,EADN;;AAED,4BAAO,uBAASA,EAAT,sBAAP;AACAA,SAAG6B,eAAH,CAAmB5C,mBAAnB,EAAwC,KAAK6C,MAA7C;AACA,UAAM6D,gBAAgBlC,MAAM,CAAN,IAAWC,MAAM,CAAjB,IAAsBpD,UAAUsF,SAAhC,IAA6CrF,WAAWqF,SAA9E;AACA,UAAID,aAAJ,EAAmB;AACjB3F,WAAG6F,qBAAH,CAAyB5G,mBAAzB,EAA8CuB,WAA9C;AACD,OAFD,MAEO;AACLR,WAAG6F,qBAAH,CAAyB5G,mBAAzB,EAA8CuB,WAA9C,EAA2DiD,CAA3D,EAA8DC,CAA9D,EAAiEpD,KAAjE,EAAwEC,MAAxE;AACD;AACDP,SAAG6B,eAAH,CAAmB5C,mBAAnB,EAAwC,IAAxC;AACA,aAAO,IAAP;AACD;;AAED;AACA;AACA;AACA;;;;6CAKQ;AAAA,uFAAJ,EAAI;AAAA,iCAHNkC,MAGM;AAAA,UAHNA,MAGM,iCAHG,KAAKA,MAGR;AAAA,qCAFND,UAEM;AAAA,UAFNA,UAEM,qCAFOhC,oBAEP;AAAA,UADN4G,KACM,UADNA,KACM;;AACN,UAAMC,WAAW,KAAKC,+BAAL,CAAqCF,KAArC,CAAjB;AACA,aAAOC,aAAa,IAAb,GACLA,QADK,GAEL,KAAK/F,EAAL,CAAQiG,iCAAR,CAA0C9E,MAA1C,EAAkDD,UAAlD,EAA8D4E,KAA9D,CAFF;AAGD;;;8CAKC;AAAA,UAFA5E,UAEA,uEAFahC,oBAEb;AAAA,UADAgH,UACA,uEADa,KAAKC,WAAL,CAAiBC,qBAAjB,IAA0C,EACvD;;AACA,UAAMC,SAAS,EAAf;AACA,WAAK,IAAMP,KAAX,IAAoBI,UAApB,EAAgC;AAC9BG,eAAOP,KAAP,IAAgB,KAAKQ,YAAL,CAAkBR,KAAlB,CAAhB;AACD;AACD,aAAO,IAAP;AACD;;AAED;;;;2BACqC;AAAA,uFAAJ,EAAI;AAAA,iCAA/B3E,MAA+B;AAAA,UAA/BA,MAA+B,iCAAtBpC,cAAsB;;AACnC,WAAKiB,EAAL,CAAQ6B,eAAR,CAAwBV,MAAxB,EAAgC,KAAKW,MAArC;AACA,aAAO,IAAP;AACD;;;6BAEsC;AAAA,uFAAJ,EAAI;AAAA,iCAA/BX,MAA+B;AAAA,UAA/BA,MAA+B,iCAAtBpC,cAAsB;;AACrC,WAAKiB,EAAL,CAAQ6B,eAAR,CAAwBV,MAAxB,EAAgC,IAAhC;AACA,aAAO,IAAP;AACD;;AAED;;;;sDAEkE;AAAA,UAAvCL,KAAuC,UAAvCA,KAAuC;AAAA,UAAhCC,KAAgC,UAAhCA,KAAgC;AAAA,UAAzBC,OAAyB,UAAzBA,OAAyB;AAAA,UAAhBV,KAAgB,UAAhBA,KAAgB;AAAA,UAATC,MAAS,UAATA,MAAS;;AAChE,UAAIgG,qBAAqB,IAAzB;;AAEA;AACA,UAAIzF,KAAJ,EAAW;AAAA;;AACTyF,6BAAqBA,sBAAsB,EAA3C;AACAA,2BAAmBrH,oBAAnB,IAA2C,wBAAc,KAAKc,EAAnB,EAAuB;AAChEwG,gBAAM,IAD0D,EACpD;AACZ7C,kBAAQ,cAAGC,IAFqD;AAGhEC,gBAAM,cAAGE,aAHuD;AAIhEzD,sBAJgE;AAKhEC,wBALgE;AAMhE;AACA;AACA;AACAkG,mBAAS,KATuD;AAUhE;AACA;AACAP,sEACG,cAAGQ,kBADN,EAC2B,cAAGjB,OAD9B,gCAEG,cAAGkB,kBAFN,EAE2B,cAAGlB,OAF9B,gCAGG,cAAGmB,cAHN,EAGuB,cAAGC,aAH1B,gCAIG,cAAGC,cAJN,EAIuB,cAAGD,aAJ1B;AAZgE,SAAvB,CAA3C;AAmBD;;AAED;AACA,UAAI9F,KAAJ,EAAW;AACTwF,6BAAqBA,sBAAsB,EAA3C;AACAA,2BAAmBpH,mBAAnB,IAA0C,2BAAiB,KAAKa,EAAtB,EAA0B;AAClE2D,kBAAQ,cAAGoD,iBADuD;AAElEzG,sBAFkE;AAGlEC;AAHkE,SAA1B,CAA1C;AAKD;;AAED;;AAEA,aAAOgG,kBAAP;AACD;;;sCAEuB;AAAA,UAAbrF,UAAa,UAAbA,UAAa;;AACtB,WAAKlB,EAAL,CAAQgH,gBAAR,CAAyB3H,eAAzB,EAA0C,KAAKyC,MAA/C;AACA,WAAK9B,EAAL,CAAQiH,uBAAR,CAAgClI,cAAhC,EAAgDmC,UAAhD,EAA4D7B,eAA5D,EAA6E,IAA7E;AACA,aAAO,KAAKmB,WAAL,CAAiBU,UAAjB,CAAP;AACD;;;gDAEsE;AAAA,qCAAlDA,UAAkD;AAAA,UAAlDA,UAAkD,qCAArChC,oBAAqC;AAAA,UAAf0D,YAAe,UAAfA,YAAe;AAAA,UAC9D5C,EAD8D,GACxD,IADwD,CAC9DA,EAD8D;AAErE;AACA;;AACAA,SAAGiH,uBAAH,CAA2BlI,cAA3B,EAA2CmC,UAA3C,EAAuD7B,eAAvD,EAAwEuD,aAAad,MAArF;AACA;AACA;;AAEA,WAAKtB,WAAL,CAAiBU,UAAjB,IAA+B0B,YAA/B;AACD;;AAED;AACA;;;;2CAC2E;AAAA,qCAA3D1B,UAA2D;AAAA,UAA3DA,UAA2D,qCAA9ChC,oBAA8C;AAAA,UAAxB2D,OAAwB,UAAxBA,OAAwB;AAAA,UAAfC,KAAe,UAAfA,KAAe;AAAA,UAARC,KAAQ,UAARA,KAAQ;AAAA,UAClE/C,EADkE,GAC5D,IAD4D,CAClEA,EADkE;;AAEzEA,SAAGkH,WAAH,CAAerE,QAAQ1B,MAAvB,EAA+B0B,QAAQf,MAAvC;;AAEA,cAAQe,QAAQ1B,MAAhB;AACA,aAAK5B,mBAAL;AACA,aAAKD,aAAL;AACEU,aAAGmH,uBAAH,CAA2BpI,cAA3B,EAA2CmC,UAA3C,EAAuD2B,QAAQ1B,MAA/D,EAAuE4B,KAAvE,EAA8ED,KAA9E;AACA;;AAEF,aAAKrD,mBAAL;AACE;AACA,cAAM2H,OAAOC,sBAAsBvE,KAAtB,CAAb;AACA9C,aAAGsH,oBAAH,CAAwBvI,cAAxB,EAAwCmC,UAAxC,EAAoDkG,IAApD,EAA0DvE,QAAQf,MAAlE,EAA0EiB,KAA1E;AACA;;AAEF,aAAKvD,aAAL;AACEQ,aAAGsH,oBAAH,CAAwBvI,cAAxB,EAAwCmC,UAAxC,EAAoD1B,aAApD,EAAmEqD,QAAQf,MAA3E,EAAmFiB,KAAnF;AACA;;AAEF;AACE,gCAAO,KAAP,EAAc,sBAAd;AAjBF;;AAoBA/C,SAAGkH,WAAH,CAAerE,QAAQ1B,MAAvB,EAA+B,IAA/B;AACA,WAAKX,WAAL,CAAiBU,UAAjB,IAA+B2B,OAA/B;AACD;;AAED;;;;mCACe7C,E,EAAIS,U,EAAY;AAC7B,UAAI,uBAAST,EAAT,CAAJ,EAAkB;AAChBA,WAAGS,UAAH,CAAcA,UAAd;AACD,OAFD,MAEO;AACL;AACA,8BAAOA,eAAevB,oBAAf,IAAuCuB,eAAe,cAAG8G,IAAhE,EACEzH,0BADF;AAED;AACD,WAAKW,UAAL,GAAkBA,UAAlB;AACD;;AAED;;;;oCACgBT,E,EAAIU,W,EAAa;AAC/B,UAAI,uBAASV,EAAT,CAAJ,EAAkB;AAChBA,WAAGU,WAAH,CAAeA,WAAf;AACD,OAFD,MAEO;AACL,YAAM8G,MAAMxH,GAAGI,YAAH,CAAgB,oBAAhB,CAAZ;AACA,YAAIoH,GAAJ,EAAS;AACPA,cAAIC,gBAAJ,CAAqB/G,WAArB;AACD,SAFD,MAEO;AACL;AACA,gCAAOA,YAAYgH,MAAZ,KAAuB,CAAvB,KACJhH,YAAY,CAAZ,MAAmBxB,oBAAnB,IAA2CwB,YAAY,CAAZ,MAAmB,cAAG6G,IAD7D,CAAP,EAEEzH,0BAFF;AAGD;AACF;AACD,WAAKY,WAAL,GAAmBA,WAAnB;AACD;;AAED;AACA;AACA;;;;oDACgCoF,K,EAAO;AACrC,UAAM6B,OAAO,kCAAY,KAAK3H,EAAjB,CAAb;;AAEA,cAAQ8F,KAAR;AACA,aAAK,cAAG8B,oCAAR;AAA8C;AAC5C,iBAAO,CAACD,KAAKE,MAAN,GAAe,CAAf,GAAmB,IAA1B;AACF,aAAK,cAAGC,+BAAR,CAHA,CAGyC;AACzC,aAAK,cAAGC,iCAAR,CAJA,CAI2C;AAC3C,aAAK,cAAGC,gCAAR,CALA,CAK0C;AAC1C,aAAK,cAAGC,iCAAR,CANA,CAM2C;AAC3C,aAAK,cAAGC,iCAAR,CAPA,CAO2C;AAC3C,aAAK,cAAGC,mCAAR;AAA6C;AAC3C,iBAAO,CAACR,KAAKE,MAAN,GAAe,CAAf,GAAmB,IAA1B;AACF,aAAK,cAAGO,qCAAR;AAA+C;AAC7C,iBAAO,CAACT,KAAKE,MAAN,GAAe,cAAGQ,YAAlB,GAAiC,IAAxC;AACF,aAAK,cAAGC,qCAAR;AACE,iBAAO,CAACX,KAAKE,MAAN,IAAgB,CAACF,KAAKY,QAAtB,GAAiC,cAAGC,MAApC,GAA6C,IAApD;AACF;AACE,iBAAO,IAAP;AAfF;AAiBD;AACD;;AAEA;;;;oCAEgB;AACd,aAAO,KAAKxI,EAAL,CAAQyI,iBAAR,EAAP;AACD;;;oCAEe;AACd,WAAKzI,EAAL,CAAQ0I,iBAAR,CAA0B,KAAK5G,MAA/B;AACD;;;wBAjgBW;AACV,aAAO,KAAKtB,WAAL,CAAiBtB,oBAAjB,KAA0C,IAAjD;AACD;;;wBAEa;AACZ,aAAO,KAAKsB,WAAL,CAAiBtB,oBAAjB,KAA0C,IAAjD;AACD;;;wBAEW;AACV,aAAO,KAAKsB,WAAL,CAAiBrB,mBAAjB,KAAyC,IAAhD;AACD;;;wBAEa;AACZ,aAAO,KAAKqB,WAAL,CAAiBpB,qBAAjB,KAA2C,IAAlD;AACD;;;;;;AAsfH;;AAEA;;;kBAliBqBW,W;AAmiBrB,SAASsH,qBAAT,CAA+BvE,KAA/B,EAAsC;AACpC;AACA;AACA,SAAOA,QAAQpD,8BAAR,GACLoD,QAAQpD,8BADH,GAELoD,KAFF;AAGD;;AAED;AACA,SAASqB,oBAAT,CAA8BR,MAA9B,EAAsC;AACpC,UAAQA,MAAR;AACA,SAAK,cAAGgF,KAAR;AAAe,aAAO,CAAP;AACf,SAAK,cAAGC,GAAR;AAAa,aAAO,CAAP;AACb,SAAK,cAAGhF,IAAR;AAAc,aAAO,CAAP;AACd;AAAS,YAAM,IAAIP,KAAJ,CAAU,gBAAV,CAAN;AAJT;AAMD;;AAED;AACA,SAASC,qBAAT,CAA+BJ,MAA/B,EAAuC;AACrC;AACA,MAAM2F,SAAS9I,YAAY8I,MAAZ,IAAsB,EAArC;AACA,SAAOA,OAAO3F,MAAP,4BAAuCA,MAA9C;AACD","file":"framebuffer.js","sourcesContent":["import GL from './api';\nimport {isWebGL2, ERR_WEBGL2} from './context';\nimport {clear, clearBuffer} from './clear';\nimport {getFeatures} from './context-features';\nimport Resource from './resource';\nimport Texture2D from './texture-2d';\nimport Renderbuffer from './renderbuffer';\nimport {getTypedArrayFromGLType, getGLTypeFromTypedArray} from '../utils/typed-array-utils';\nimport {log} from '../utils';\nimport assert from 'assert';\n\n// Local constants - will collapse during minification\nconst GL_FRAMEBUFFER = 0x8D40;\nconst GL_DRAW_FRAMEBUFFER = 0x8CA8;\nconst GL_READ_FRAMEBUFFER = 0x8CA9;\n\nconst GL_COLOR_ATTACHMENT0 = 0x8CE0;\nconst GL_DEPTH_ATTACHMENT = 0x8D00;\nconst GL_STENCIL_ATTACHMENT = 0x8D20;\n// const GL_DEPTH_STENCIL_ATTACHMENT = 0x821A;\n\nconst GL_RENDERBUFFER = 0x8D41;\n\nconst GL_TEXTURE_3D = 0x806F;\nconst GL_TEXTURE_2D_ARRAY = 0x8C1A;\nconst GL_TEXTURE_2D = 0x0DE1;\nconst GL_TEXTURE_CUBE_MAP = 0x8513;\n\nconst GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;\n\nconst GL_DEPTH_BUFFER_BIT = 0x00000100;\nconst GL_STENCIL_BUFFER_BIT = 0x00000400;\nconst GL_COLOR_BUFFER_BIT = 0x00004000;\n\nconst ERR_MULTIPLE_RENDERTARGETS = 'Multiple render targets not supported';\n\nexport default class Framebuffer extends Resource {\n\n  static isSupported(gl, {\n    colorBufferFloat,    // Whether floating point textures can be rendered and read\n    colorBufferHalfFloat // Whether half float textures can be rendered and read\n  } = {}) {\n    let supported = true;\n    supported = colorBufferFloat &&\n      gl.getExtension(isWebGL2(gl) ? 'EXT_color_buffer_float' : 'WEBGL_color_buffer_float');\n    supported = colorBufferHalfFloat &&\n      gl.getExtension(isWebGL2(gl) ? 'EXT_color_buffer_float' : 'EXT_color_buffer_half_float');\n    return supported;\n  }\n\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    // Public members\n    this.width = null;\n    this.height = null;\n    this.attachments = {};\n    this.readBuffer = GL_COLOR_ATTACHMENT0;\n    this.drawBuffers = [GL_COLOR_ATTACHMENT0];\n    this.initialize(opts);\n\n    Object.seal(this);\n  }\n\n  get color() {\n    return this.attachments[GL_COLOR_ATTACHMENT0] || null;\n  }\n\n  get texture() {\n    return this.attachments[GL_COLOR_ATTACHMENT0] || null;\n  }\n\n  get depth() {\n    return this.attachments[GL_DEPTH_ATTACHMENT] || null;\n  }\n\n  get stencil() {\n    return this.attachments[GL_STENCIL_ATTACHMENT] || null;\n  }\n\n  initialize({\n    width = 1,\n    height = 1,\n    attachments = null,\n    color = true,\n    depth = true,\n    stencil = false,\n    check = true,\n    readBuffer,\n    drawBuffers\n  }) {\n    assert(width >= 0 && height >= 0, 'Width and height need to be integers');\n\n    // Store actual width and height for diffing\n    this.width = width;\n    this.height = height;\n\n    // Resize any provided attachments - note that resize only resizes if needed\n    // Note: A framebuffer has no separate size, it is defined by its attachments (which must agree)\n    if (attachments) {\n      for (const attachment in attachments) {\n        const target = attachments[attachment];\n        const object = Array.isArray(target) ? target[0] : target;\n        object.resize({width, height});\n      }\n    } else {\n      // Create any requested default attachments\n      attachments = this._createDefaultAttachments({color, depth, stencil, width, height});\n    }\n\n    this.update({clearAttachments: true, attachments, readBuffer, drawBuffers});\n\n    // Checks that framebuffer was properly set up, if not, throws an explanatory error\n    if (attachments && check) {\n      this.checkStatus();\n    }\n  }\n\n  update({\n    attachments = {},\n    readBuffer,\n    drawBuffers,\n    clearAttachments = false\n  }) {\n    this.attach(attachments, {clearAttachments});\n\n    const {gl} = this;\n    // Multiple render target support, set read buffer and draw buffers\n    gl.bindFramebuffer(GL_FRAMEBUFFER, this.handle);\n    if (readBuffer) {\n      this._setReadBuffer(readBuffer);\n    }\n    if (drawBuffers) {\n      this._setDrawBuffers(drawBuffers);\n    }\n    gl.bindFramebuffer(GL_FRAMEBUFFER, null);\n\n    return this;\n  }\n\n  // Attachment resize is expected to be a noop if size is same\n  resize({width, height}) {\n    log.log(2, `Resizing framebuffer ${this.id} to ${width}x${height}`);\n    for (const attachmentPoint in this.attachments) {\n      this.attachments[attachmentPoint].resize({width, height});\n    }\n    this.width = width;\n    this.height = height;\n    return this;\n  }\n\n  // Attach from a map of attachments\n  attach(attachments, {\n    clearAttachments = false\n  } = {}) {\n    const newAttachments = {};\n\n    // Any current attachments need to be removed, add null values to map\n    if (clearAttachments) {\n      Object.keys(this.attachments).forEach(key => {\n        newAttachments[key] = null;\n      });\n    }\n\n    // Overlay the new attachments\n    Object.assign(newAttachments, attachments);\n\n    this.gl.bindFramebuffer(GL_FRAMEBUFFER, this.handle);\n\n    // Walk the attachments\n    for (const attachment in newAttachments) {\n      // Ensure key is not undefined\n      assert(attachment !== 'undefined', 'Misspelled framebuffer binding point?');\n\n      const descriptor = newAttachments[attachment];\n      let object = descriptor;\n      if (!object) {\n        this._unattach({attachment});\n      } else if (object instanceof Renderbuffer) {\n        this._attachRenderbuffer({attachment, renderbuffer: object});\n      } else if (Array.isArray(descriptor)) {\n        const [texture, layer = 0, level = 0] = descriptor;\n        object = texture;\n        this._attachTexture({attachment, texture, layer, level});\n      } else {\n        this._attachTexture({attachment, texture: object, layer: 0, level: 0});\n      }\n\n      // Resize objects\n      if (object) {\n        object.resize({width: this.width, height: this.height});\n      }\n    }\n\n    this.gl.bindFramebuffer(GL_FRAMEBUFFER, null);\n\n    // Assign to attachments and remove any nulls to get a clean attachment map\n    Object.assign(this.attachments, attachments);\n    Object.keys(this.attachments).filter(key => !this.attachments[key]).forEach(key => {\n      delete this.attachments[key];\n    });\n  }\n\n  checkStatus() {\n    const {gl} = this;\n    gl.bindFramebuffer(GL_FRAMEBUFFER, this.handle);\n    const status = gl.checkFramebufferStatus(GL_FRAMEBUFFER);\n    gl.bindFramebuffer(GL_FRAMEBUFFER, null);\n    if (status !== gl.FRAMEBUFFER_COMPLETE) {\n      throw new Error(_getFrameBufferStatus(status));\n    }\n    return this;\n  }\n\n  clear({\n    color,\n    depth,\n    stencil,\n    drawBuffers = []\n  } = {}) {\n    // Bind framebuffer and delegate to global clear functions\n    this.gl.bindFramebuffer(GL_FRAMEBUFFER, this.handle);\n\n    if (color || depth || stencil) {\n      clear(this.gl, {color, depth, stencil});\n    }\n\n    drawBuffers.forEach((value, drawBuffer) => {\n      clearBuffer({drawBuffer, value});\n    });\n\n    this.gl.bindFramebuffer(GL_FRAMEBUFFER, null);\n\n    return this;\n  }\n\n  // NOTE: Slow requires roundtrip to GPU\n  // App can provide pixelArray or have it auto allocated by this method\n  // @returns {Uint8Array|Uint16Array|FloatArray} - pixel array,\n  //  newly allocated by this method unless provided by app.\n  readPixels({\n    x = 0,\n    y = 0,\n    width,\n    height,\n    format = GL.RGBA,\n    type,\n    pixelArray = null\n  }) {\n    const {gl} = this;\n\n    // Deduce type and allocated pixelArray if needed\n    if (!pixelArray) {\n      // Allocate pixel array if not already available, using supplied type\n      type = type || gl.UNSIGNED_BYTE;\n      const ArrayType = getTypedArrayFromGLType(type, {clamped: false});\n      const components = glFormatToComponents(format);\n      // TODO - check for composite type (components = 1).\n      pixelArray = pixelArray || new ArrayType(width * height * components);\n    }\n\n    // Pixel array available, if necessary, deduce type from it.\n    type = type || getGLTypeFromTypedArray(pixelArray);\n\n    this.bind();\n    this.gl.readPixels(x, y, width, height, format, type, pixelArray);\n    this.unbind();\n\n    return pixelArray;\n  }\n\n  /**\n   * Copy from framebuffer into a texture\n   */\n  copyToTexture({\n    srcFramebuffer,\n    x,\n    y,\n    width,\n    height,\n    texture,\n    xoffset = 0,\n    yoffset = 0,\n    zoffset = 0,\n    mipmapLevel = 0,\n    internalFormat = GL.RGBA,\n    // offset = 0,\n    // type = GL.UNSIGNED_BYTE,\n    border = 0\n  }) {\n    const {gl} = this;\n    gl.bindFramebuffer(GL_FRAMEBUFFER, srcFramebuffer.handle);\n\n    // target\n    switch (texture.target) {\n    case GL_TEXTURE_2D:\n    case GL_TEXTURE_CUBE_MAP:\n      gl.copyTexSubImage2D(\n        texture.target,\n        mipmapLevel,\n        internalFormat,\n        x, y,\n        texture.width,\n        texture.height\n      );\n      break;\n    case GL_TEXTURE_2D_ARRAY:\n    case GL_TEXTURE_3D:\n      gl.copyTexSubImage3D(\n        texture.target,\n        mipmapLevel,\n        internalFormat,\n        x, y,\n        texture.width,\n        texture.height\n      );\n      break;\n    default:\n    }\n\n    gl.bindFramebuffer(GL_FRAMEBUFFER, null);\n    return this;\n  }\n\n  // WEBGL2 INTERFACE\n\n  // Copies a rectangle of pixels between framebuffers\n  blit({\n    srcFramebuffer,\n    srcX0, srcY0, srcX1, srcY1,\n    dstX0, dstY0, dstX1, dstY1,\n    color,\n    depth,\n    stencil,\n    mask = 0,\n    filter = GL.NEAREST\n  }) {\n    const {gl} = this;\n    assert(isWebGL2(gl), ERR_WEBGL2);\n\n    if (color) {\n      mask |= GL_COLOR_BUFFER_BIT;\n    }\n    if (depth) {\n      mask |= GL_DEPTH_BUFFER_BIT;\n    }\n    if (stencil) {\n      mask |= GL_STENCIL_BUFFER_BIT;\n    }\n\n    gl.bindFramebuffer(GL_READ_FRAMEBUFFER, srcFramebuffer.handle);\n    gl.bindFramebuffer(GL_DRAW_FRAMEBUFFER, this.handle);\n    gl.blitFramebuffer(\n      srcX0, srcY0, srcX1, srcY1,\n      dstX0, dstY0, dstX1, dstY1,\n      mask,\n      filter\n    );\n    gl.bindFramebuffer(GL_DRAW_FRAMEBUFFER, null);\n    gl.bindFramebuffer(GL_READ_FRAMEBUFFER, null);\n    return this;\n  }\n\n  // signals to the GL that it need not preserve all pixels of a specified region\n  // of the framebuffer\n  invalidate({\n    attachments = [],\n    x = 0,\n    y = 0,\n    width,\n    height\n  }) {\n    const {gl} = this;\n    assert(isWebGL2(gl, ERR_WEBGL2));\n    gl.bindFramebuffer(GL_READ_FRAMEBUFFER, this.handle);\n    const invalidateAll = x === 0 && y === 0 && width === undefined && height === undefined;\n    if (invalidateAll) {\n      gl.invalidateFramebuffer(GL_READ_FRAMEBUFFER, attachments);\n    } else {\n      gl.invalidateFramebuffer(GL_READ_FRAMEBUFFER, attachments, x, y, width, height);\n    }\n    gl.bindFramebuffer(GL_READ_FRAMEBUFFER, null);\n    return this;\n  }\n\n  // Return the value for the passed pname given the target and attachment.\n  // The type returned is the natural type for the requested pname:\n  // pname returned type\n  // If an OpenGL error is generated, returns null.\n  getAttachmentParameter({\n    target = this.target,\n    attachment = GL_COLOR_ATTACHMENT0,\n    pname\n  } = {}) {\n    const fallback = this._getAttachmentParameterFallback(pname);\n    return fallback !== null ?\n      fallback :\n      this.gl.getFramebufferAttachmentParameter(target, attachment, pname);\n  }\n\n  getAttachmentParameters(\n    attachment = GL_COLOR_ATTACHMENT0,\n    parameters = this.constructor.ATTACHMENT_PARAMETERS || {}\n  ) {\n    const values = {};\n    for (const pname in parameters) {\n      values[pname] = this.getParameter(pname);\n    }\n    return this;\n  }\n\n  // WEBGL INTERFACE\n  bind({target = GL_FRAMEBUFFER} = {}) {\n    this.gl.bindFramebuffer(target, this.handle);\n    return this;\n  }\n\n  unbind({target = GL_FRAMEBUFFER} = {}) {\n    this.gl.bindFramebuffer(target, null);\n    return this;\n  }\n\n  // PRIVATE METHODS\n\n  _createDefaultAttachments({color, depth, stencil, width, height}) {\n    let defaultAttachments = null;\n\n    // Add a color buffer if requested and not supplied\n    if (color) {\n      defaultAttachments = defaultAttachments || {};\n      defaultAttachments[GL_COLOR_ATTACHMENT0] = new Texture2D(this.gl, {\n        data: null, // reserves texture memory, but texels are undefined\n        format: GL.RGBA,\n        type: GL.UNSIGNED_BYTE,\n        width,\n        height,\n        // Note: Mipmapping can be disabled by texture resource when we resize the texture\n        // to a non-power-of-two dimenstion (NPOT texture) under WebGL1. To have consistant\n        // behavior we always disable mipmaps.\n        mipmaps: false,\n        // Set MIN and MAG filtering parameters so mipmaps are not used in sampling.\n        // Set WRAP modes that support NPOT textures too.\n        parameters: {\n          [GL.TEXTURE_MIN_FILTER]: GL.NEAREST,\n          [GL.TEXTURE_MAG_FILTER]: GL.NEAREST,\n          [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n          [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n        }\n      });\n    }\n\n    // Add a depth buffer if requested and not supplied\n    if (depth) {\n      defaultAttachments = defaultAttachments || {};\n      defaultAttachments[GL_DEPTH_ATTACHMENT] = new Renderbuffer(this.gl, {\n        format: GL.DEPTH_COMPONENT16,\n        width,\n        height\n      });\n    }\n\n    // TODO - handle stencil and combined depth and stencil\n\n    return defaultAttachments;\n  }\n\n  _unattach({attachment}) {\n    this.gl.bindRenderbuffer(GL_RENDERBUFFER, this.handle);\n    this.gl.framebufferRenderbuffer(GL_FRAMEBUFFER, attachment, GL_RENDERBUFFER, null);\n    delete this.attachments[attachment];\n  }\n\n  _attachRenderbuffer({attachment = GL_COLOR_ATTACHMENT0, renderbuffer}) {\n    const {gl} = this;\n    // TODO - is the bind needed?\n    // gl.bindRenderbuffer(GL_RENDERBUFFER, renderbuffer.handle);\n    gl.framebufferRenderbuffer(GL_FRAMEBUFFER, attachment, GL_RENDERBUFFER, renderbuffer.handle);\n    // TODO - is the unbind needed?\n    // gl.bindRenderbuffer(GL_RENDERBUFFER, null);\n\n    this.attachments[attachment] = renderbuffer;\n  }\n\n  // layer = 0 - index into Texture2DArray and Texture3D or face for `TextureCubeMap`\n  // level = 0 - mipmapLevel (must be 0 in WebGL1)\n  _attachTexture({attachment = GL_COLOR_ATTACHMENT0, texture, layer, level}) {\n    const {gl} = this;\n    gl.bindTexture(texture.target, texture.handle);\n\n    switch (texture.target) {\n    case GL_TEXTURE_2D_ARRAY:\n    case GL_TEXTURE_3D:\n      gl.framebufferTextureLayer(GL_FRAMEBUFFER, attachment, texture.target, level, layer);\n      break;\n\n    case GL_TEXTURE_CUBE_MAP:\n      // layer must be a cubemap face (or if index, converted to cube map face)\n      const face = mapIndexToCubeMapFace(layer);\n      gl.framebufferTexture2D(GL_FRAMEBUFFER, attachment, face, texture.handle, level);\n      break;\n\n    case GL_TEXTURE_2D:\n      gl.framebufferTexture2D(GL_FRAMEBUFFER, attachment, GL_TEXTURE_2D, texture.handle, level);\n      break;\n\n    default:\n      assert(false, 'Illegal texture type');\n    }\n\n    gl.bindTexture(texture.target, null);\n    this.attachments[attachment] = texture;\n  }\n\n  // Expects framebuffer to be bound\n  _setReadBuffer(gl, readBuffer) {\n    if (isWebGL2(gl)) {\n      gl.readBuffer(readBuffer);\n    } else {\n      // Setting to color attachment 0 is a noop, so allow it in WebGL1\n      assert(readBuffer === GL_COLOR_ATTACHMENT0 || readBuffer === GL.BACK,\n        ERR_MULTIPLE_RENDERTARGETS);\n    }\n    this.readBuffer = readBuffer;\n  }\n\n  // Expects framebuffer to be bound\n  _setDrawBuffers(gl, drawBuffers) {\n    if (isWebGL2(gl)) {\n      gl.drawBuffers(drawBuffers);\n    } else {\n      const ext = gl.getExtension('WEBGL_draw_buffers');\n      if (ext) {\n        ext.drawBuffersWEBGL(drawBuffers);\n      } else {\n        // Setting a single draw buffer to color attachment 0 is a noop, allow in WebGL1\n        assert(drawBuffers.length === 1 &&\n          (drawBuffers[0] === GL_COLOR_ATTACHMENT0 || drawBuffers[0] === GL.BACK),\n          ERR_MULTIPLE_RENDERTARGETS);\n      }\n    }\n    this.drawBuffers = drawBuffers;\n  }\n\n  // Attempt to provide workable defaults for WebGL2 symbols under WebGL1\n  // null means OK to query\n  /* eslint-disable complexity */\n  _getAttachmentParameterFallback(pname) {\n    const caps = getFeatures(this.gl);\n\n    switch (pname) {\n    case GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: // GLint\n      return !caps.webgl2 ? 0 : null;\n    case GL.FRAMEBUFFER_ATTACHMENT_RED_SIZE: // GLint\n    case GL.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: // GLint\n    case GL.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: // GLint\n    case GL.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: // GLint\n    case GL.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: // GLint\n    case GL.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: // GLint\n      return !caps.webgl2 ? 8 : null;\n    case GL.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: // GLenum\n      return !caps.webgl2 ? GL.UNSIGNED_INT : null;\n    case GL.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING:\n      return !caps.webgl2 && !caps.EXT_sRGB ? GL.LINEAR : null;\n    default:\n      return null;\n    }\n  }\n  /* eslint-enable complexity */\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createFramebuffer();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteFramebuffer(this.handle);\n  }\n}\n\n// PUBLIC METHODS\n\n// Map an index to a cube map face constant\nfunction mapIndexToCubeMapFace(layer) {\n  // TEXTURE_CUBE_MAP_POSITIVE_X is a big value (0x8515)\n  // if smaller assume layer is index, otherwise assume it is already a cube map face constant\n  return layer < GL_TEXTURE_CUBE_MAP_POSITIVE_X ?\n    layer + GL_TEXTURE_CUBE_MAP_POSITIVE_X :\n    layer;\n}\n\n// Returns number of components in a specific WebGL format\nfunction glFormatToComponents(format) {\n  switch (format) {\n  case GL.ALPHA: return 1;\n  case GL.RGB: return 3;\n  case GL.RGBA: return 4;\n  default: throw new Error('Unknown format');\n  }\n}\n\n// Get a string describing the framebuffer error if installed\nfunction _getFrameBufferStatus(status) {\n  // Use error mapping if installed\n  const STATUS = Framebuffer.STATUS || {};\n  return STATUS[status] || `Framebuffer error ${status}`;\n}\n"]}