{"version":3,"sources":["../../../../src/experimental/probe/src/error-utils.js"],"names":["breakOnConsoleWarnings","throwOnConsoleWarnings","interceptRejectedPromises","consoleBlacklist","breakOnConsole","log","msg","param1","params","indexOf","Error","some","pattern","test","warn","bind","native","error","window","onerror","message","url","line","column","throwOnWarning","patt","arguments","unhandledPromise"],"mappings":";;;;;QAcgBA,sB,GAAAA,sB;QAgCAC,sB,GAAAA,sB;QAUAC,yB,GAAAA,yB;;AAnDhB;;AAEA;;;;;;;AAOO,SAASF,sBAAT,GAA2D;AAAA,MAA3BG,gBAA2B,uEAAR,CAAC,IAAD,CAAQ;;AAChE,WAASC,cAAT,CAAwBC,GAAxB,EAA6BC,GAA7B,EAAkCC,MAAlC,EAAqD;AAAA,sCAARC,MAAQ;AAARA,YAAQ;AAAA;;AACnD,QAAI,OAAOF,GAAP,KAAe,QAAf,IACFA,IAAIG,OAAJ,CAAY,6BAAZ,MAA+C,CADjD,EACoD;AAClDJ,4BAAIC,GAAJ,EAASC,MAAT,SAAoBC,MAApB;AACA,YAAM,IAAIE,KAAJ,CAAUH,MAAV,CAAN;AACD,KAJD,MAIO,IAAIJ,iBAAiBQ,IAAjB,CAAsB;AAAA,aAAWC,QAAQC,IAAR,CAAaP,GAAb,CAAX;AAAA,KAAtB,CAAJ,EAAyD;AAC9DD,4BAAIC,GAAJ,EAASC,MAAT,SAAoBC,MAApB;AACD,KAFM,MAEA;AACLH,4BAAIC,GAAJ,EAASC,MAAT,SAAoBC,MAApB;AACD;AACF;AACD,cAAQM,IAAR,GAAeV,eAAeW,IAAf,CAAoB,IAApB,EAA0B,YAAQC,MAAR,CAAeF,IAAzC,CAAf;AACA,cAAQG,KAAR,GAAgBb,eAAeW,IAAf,CAAoB,IAApB,EAA0B,YAAQC,MAAR,CAAeC,KAAzC,CAAhB;;AAEAC,SAAOC,OAAP,GAAiB,UAACC,OAAD,EAAUC,GAAV,EAAeC,IAAf,EAAqBC,MAArB,EAA6BN,KAA7B,EAAuC;AACtD,QAAIA,KAAJ,EAAW;AACT,kBAAQD,MAAR,CAAeC,KAAf,CAAwBA,KAAxB,SAAiCI,GAAjC,SAAwCC,IAAxC,UAAgDC,UAAU,CAA1D;AACD,KAFD,MAEO;AACL,kBAAQP,MAAR,CAAeC,KAAf,CAAwBG,OAAxB,SAAmCC,GAAnC,SAA0CC,IAA1C,UAAkDC,UAAU,CAA5D;AACD;AACD;AACD,GAPD;AAQD;;AAED;;;;;;;AAvCA;;;AAGA;AACA;AA0CO,SAAStB,sBAAT,GAA2D;AAAA,MAA3BE,gBAA2B,uEAAR,CAAC,IAAD,CAAQ;;AAChE,cAAQW,IAAR,GAAe,SAASU,cAAT,CAAwBlB,GAAxB,EAA6B;AAAA;;AAC1C,QAAIH,iBAAiBQ,IAAjB,CAAsB;AAAA,aAAQc,KAAKZ,IAAL,CAAUP,GAAV,CAAR;AAAA,KAAtB,CAAJ,EAAmD;AACjD,YAAM,IAAII,KAAJ,4BAAmCJ,GAAnC,CAAN;AACD;AACD,mCAAQU,MAAR,EAAeF,IAAf,wBAAuBY,SAAvB;AACD,GALD;AAMD;;AAED;AACO,SAASxB,yBAAT,GAAqC;AAAA;;AAC1C,cAAQe,KAAR,GAAgB,UAACX,GAAD,EAAMW,KAAN,EAA2B;AAAA,uCAAXT,MAAW;AAAXA,YAAW;AAAA;;AAAA;;AACzC,QAAI,OAAOF,GAAP,KAAe,QAAf,IACFA,IAAIG,OAAJ,CAAY,6BAAZ,MAA+C,CADjD,EACoD;AAAA;;AAClDQ,YAAMU,gBAAN,GAAyB,IAAzB;AACA;AACA,sCAAQX,MAAR,EAAeC,KAAf,0BAAqB,kBAArB,EAAyCA,KAAzC,SAAmDT,MAAnD;AACA,YAAMS,KAAN;AACD;AACD,oCAAQD,MAAR,EAAeC,KAAf;AACD,GATD;AAUD","file":"error-utils.js","sourcesContent":["/**\n * Utilities for dev-mode error handling\n */\n/* eslint-disable no-console, no-debugger */\n/* global window */\nimport {logger as console} from './env';\n\n/**\n * Ensure that your debugger stops when code issues warnings so that\n * you can see what is going on in othercomponents when they decide\n * to issue warnings.\n *\n * @param {Array} consoleBlacklist - array of strings to match against\n */\nexport function breakOnConsoleWarnings(consoleBlacklist = [/.*/]) {\n  function breakOnConsole(log, msg, param1, ...params) {\n    if (typeof msg === 'string' &&\n      msg.indexOf('Unhandled promise rejection') === 0) {\n      log(msg, param1, ...params);\n      throw new Error(param1);\n    } else if (consoleBlacklist.some(pattern => pattern.test(msg))) {\n      log(msg, param1, ...params);\n    } else {\n      log(msg, param1, ...params);\n    }\n  }\n  console.warn = breakOnConsole.bind(null, console.native.warn);\n  console.error = breakOnConsole.bind(null, console.native.error);\n\n  window.onerror = (message, url, line, column, error) => {\n    if (error) {\n      console.native.error(`${error} ${url}:${line}:${column || 0}`);\n    } else {\n      console.native.error(`${message} ${url}:${line}:${column || 0}`);\n    }\n    debugger;\n  };\n}\n\n/**\n * Throw exceptions when code issues warnings so that\n * you can access them in your normal exception handling setup, perhaps\n * displaying them in the UI or logging them in a different way.\n *\n * @param {Array} consoleBlacklist - array of strings to match against\n */\nexport function throwOnConsoleWarnings(consoleBlacklist = [/.*/]) {\n  console.warn = function throwOnWarning(msg) {\n    if (consoleBlacklist.some(patt => patt.test(msg))) {\n      throw new Error(`Unacceptable warning: ${msg}`);\n    }\n    console.native.warn(...arguments);\n  };\n}\n\n// Chrome has yet to implement onRejectedPromise, so trigger onerror instead\nexport function interceptRejectedPromises() {\n  console.error = (msg, error, ...params) => {\n    if (typeof msg === 'string' &&\n      msg.indexOf('Unhandled promise rejection') === 0) {\n      error.unhandledPromise = true;\n      // Use different message to avoid triggering again\n      console.native.error('Rejected promise', error, ...params);\n      throw error;\n    }\n    console.native.error(...arguments);\n  };\n}\n"]}