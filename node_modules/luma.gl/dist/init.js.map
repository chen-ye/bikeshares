{"version":3,"sources":["../src/init.js"],"names":["STARTUP_MESSAGE","luma","VERSION","Error","console","log","version","stats","globals","headlessGL","headlessTypes","modules","nodeIO","global"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAGA;;;;AAEA,IAAMA,wNAAN;AAJA;AACA;;;AAQA,IAAI,gBAAOC,IAAP,IAAe,gBAAOA,IAAP,CAAYC,OAAZ,qBAAnB,EAAoD;AAClD,QAAM,IAAIC,KAAJ,4CAAmD,gBAAOF,IAAP,CAAYC,OAA/D,6BAAN;AACD;;AAED,IAAI,CAAC,gBAAOD,IAAZ,EAAkB;AAChB;AACA;AACA,4BAAe;AACbG,YAAQC,GAAR,yCAAoCL,eAApC;AACD;;AAED,kBAAOC,IAAP,GAAc,gBAAOA,IAAP,IAAe;AAC3BC,6BAD2B;AAE3BI,6BAF2B;AAG3BD,sBAH2B;;AAK3B;AACA;AACAE,WAAO,EAPoB;;AAS3B;AACA;AACA;AACA;AACA;AACAC,aAAS;AACPC,kBAAY,IADL;AAEPC,qBAAe,IAFR;AAGPC,eAAS,EAHF;AAIPC,cAAQ;AAJD;AAdkB,GAA7B;AAqBD;;QAEOC,M;kBACO,gBAAOZ,I","file":"init.js","sourcesContent":["import {isBrowser} from './utils/is-browser';\nimport {global} from './utils/globals';\nimport log from './utils/log';\n// Version detection\n// TODO - this imports a rather large JSON file, we only need one field\nimport {version} from '../package.json';\n\nconst STARTUP_MESSAGE = `\\\nAssign luma.log.priority in console to control logging: \\\n0: none, 1: minimal, 2: verbose, 3: attribute/uniforms, 4: gl logs\nluma.log.break[], set to gl funcs, luma.log.profile[] set to model names`;\n\nif (global.luma && global.luma.VERSION !== version) {\n  throw new Error(`luma.gl - multiple versions detected: ${global.luma.VERSION} vs ${version}`);\n}\n\nif (!global.luma) {\n  /* global console */\n  /* eslint-disable no-console */\n  if (isBrowser) {\n    console.log(`luma.gl ${version} - ${STARTUP_MESSAGE}`);\n  }\n\n  global.luma = global.luma || {\n    VERSION: version,\n    version,\n    log,\n\n    // A global stats object that various components can add information to\n    // E.g. see webgl/resource.js\n    stats: {},\n\n    // Keep some luma globals in a sub-object\n    // This allows us to dynamically detect if certain modules have been\n    // included (such as IO and headless) and enable related functionality,\n    // without unconditionally requiring and thus bundling big dependencies\n    // into the app.\n    globals: {\n      headlessGL: null,\n      headlessTypes: null,\n      modules: {},\n      nodeIO: {}\n    }\n  };\n}\n\nexport {global};\nexport default global.luma;\n"]}