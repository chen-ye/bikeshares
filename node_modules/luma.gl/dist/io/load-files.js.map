{"version":3,"sources":["../../src/io/load-files.js"],"names":["loadTexture","loadFiles","loadImages","loadTextures","loadProgram","loadModel","parseModel","noop","gl","url","opts","urls","onProgress","Object","assign","then","images","map","img","i","id","data","every","count","Promise","all","promise","progress","length","total","params","Array","isArray","parameters","undefined","vs","fs","vsText","fsText","file","program","json","parseJSON","attributes","modelOptions","key","value","Uint16Array","Float32Array","geometry","JSON","parse","error","Error"],"mappings":"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","file":"load-files.js","sourcesContent":["/* eslint-disable guard-for-in, complexity, no-try-catch */\nimport assert from 'assert';\nimport {loadFile, loadImage} from './browser-load';\nimport {Program, Texture2D} from '../webgl';\nimport {Model} from '../core';\nimport {Geometry} from '../geometry';\n\nfunction noop() {}\n\nexport function loadTexture(gl, url, opts = {}) {\n  const {urls, onProgress = noop} = opts;\n  assert(typeof url === 'string', 'loadTexture: url must be string');\n\n  return loadImages(Object.assign({urls, onProgress}, opts))\n  .then(images => images.map((img, i) => {\n    return new Texture2D(gl, Object.assign({id: urls[i]}, opts, {data: img}));\n  }));\n}\n\n/*\n * Loads (Requests) multiple files asynchronously\n */\nexport function loadFiles(opts = {}) {\n  const {urls, onProgress = noop} = opts;\n  assert(urls.every(url => typeof url === 'string'), 'loadImages: {urls} must be array of strings');\n  let count = 0;\n  return Promise.all(urls.map(\n    url => {\n      const promise = loadFile(Object.assign({url}, opts));\n      promise.then(file => onProgress({\n        progress: ++count / urls.length,\n        count,\n        total: urls.length,\n        url\n      }));\n      return promise;\n    }\n  ));\n}\n\n/*\n * Loads (requests) multiple images asynchronously\n */\nexport function loadImages(opts = {}) {\n  const {urls, onProgress = noop} = opts;\n  assert(urls.every(url => typeof url === 'string'), 'loadImages: {urls} must be array of strings');\n  let count = 0;\n  return Promise.all(urls.map(\n    url => {\n      const promise = loadImage(url, opts);\n      promise.then(file => onProgress({\n        progress: ++count / urls.length,\n        count,\n        total: urls.length,\n        url\n      }));\n      return promise;\n    }\n  ));\n}\n\nexport function loadTextures(gl, opts = {}) {\n  const {urls, onProgress = noop} = opts;\n  assert(urls.every(url => typeof url === 'string'),\n    'loadTextures: {urls} must be array of strings');\n\n  return loadImages(Object.assign({urls, onProgress}, opts))\n  .then(images => images.map((img, i) => {\n    let params = Array.isArray(opts.parameters) ? opts.parameters[i] : opts.parameters;\n    params = params === undefined ? {} : params;\n    return new Texture2D(gl, Object.assign({id: urls[i]}, params, {data: img}));\n  }));\n}\n\nexport function loadProgram(gl, opts = {}) {\n  const {vs, fs, onProgress = noop} = opts;\n  return loadFiles(Object.assign({urls: [vs, fs], onProgress}, opts))\n  .then(\n    ([vsText, fsText]) => new Program(gl, Object.assign({vs: vsText, fs: fsText}, opts))\n  );\n}\n\n// Loads a simple JSON format\nexport function loadModel(gl, opts = {}) {\n  const {url, onProgress = noop} = opts;\n  return loadFiles(Object.assign({urls: [url], onProgress}, opts))\n  .then(([file]) => parseModel(gl, Object.assign({file}, opts)));\n}\n\nexport function parseModel(gl, opts = {}) {\n  const {file, program = new Program(gl)} = opts;\n  const json = typeof file === 'string' ? parseJSON(file) : file;\n  // Remove any attributes so that we can create a geometry\n  // TODO - change format to put these in geometry sub object?\n  const attributes = {};\n  const modelOptions = {};\n  for (const key in json) {\n    const value = json[key];\n    if (Array.isArray(value)) {\n      attributes[key] = key === 'indices' ? new Uint16Array(value) : new Float32Array(value);\n    } else {\n      modelOptions[key] = value;\n    }\n  }\n\n  return new Model(gl, Object.assign(\n    {program, geometry: new Geometry({attributes})},\n    modelOptions,\n    opts\n  ));\n}\n\nfunction parseJSON(file) {\n  try {\n    return JSON.parse(file);\n  } catch (error) {\n    throw new Error(`Failed to parse JSON: ${error}`);\n  }\n}\n"]}