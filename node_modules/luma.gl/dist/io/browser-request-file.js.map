{"version":3,"sources":["../../src/io/browser-request-file.js"],"names":["requestFile","noop","XHR_STATES","UNINITIALIZED","LOADING","LOADED","INTERACTIVE","COMPLETED","XHR","url","path","method","asynchronous","noCache","sendAsBinary","responseType","onProgress","onError","onAbort","onComplete","join","async","req","XMLHttpRequest","onload","e","onerror","onabort","onprogress","lengthComputable","Math","round","loaded","total","header","value","setRequestHeader","body","Promise","resolve","reject","indexOf","Date","now","open","onreadystatechange","readyState","status","response","responseText","Error","send","error","opts","xhr","sendAsync"],"mappings":"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","file":"browser-request-file.js","sourcesContent":["// Supports loading (requesting) assets with XHR (XmlHttpRequest)\n/* eslint-disable guard-for-in, complexity, no-try-catch */\n\n/* global XMLHttpRequest */\nfunction noop() {}\n\nconst XHR_STATES = {\n  UNINITIALIZED: 0,\n  LOADING: 1,\n  LOADED: 2,\n  INTERACTIVE: 3,\n  COMPLETED: 4\n};\n\nclass XHR {\n  constructor({\n    url,\n    path = null,\n    method = 'GET',\n    asynchronous = true,\n    noCache = false,\n    // body = null,\n    sendAsBinary = false,\n    responseType = false,\n    onProgress = noop,\n    onError = noop,\n    onAbort = noop,\n    onComplete = noop\n  }) {\n    this.url = path ? path.join(path, url) : url;\n    this.method = method;\n    this.async = asynchronous;\n    this.noCache = noCache;\n    this.sendAsBinary = sendAsBinary;\n    this.responseType = responseType;\n\n    this.req = new XMLHttpRequest();\n\n    this.req.onload = e => onComplete(e);\n    this.req.onerror = e => onError(e);\n    this.req.onabort = e => onAbort(e);\n    this.req.onprogress = e => {\n      if (e.lengthComputable) {\n        onProgress(e, Math.round(e.loaded / e.total * 100));\n      } else {\n        onProgress(e, -1);\n      }\n    };\n  }\n\n  setRequestHeader(header, value) {\n    this.req.setRequestHeader(header, value);\n    return this;\n  }\n\n  // /* eslint-disable max-statements */\n  sendAsync(body = this.body || null) {\n    return new Promise((resolve, reject) => {\n      try {\n        const {req, method, noCache, sendAsBinary, responseType} = this;\n\n        const url = noCache ?\n          this.url + (this.url.indexOf('?') >= 0 ? '&' : '?') + Date.now() :\n          this.url;\n\n        req.open(method, url, this.async);\n\n        if (responseType) {\n          req.responseType = responseType;\n        }\n\n        if (this.async) {\n          req.onreadystatechange = e => {\n            if (req.readyState === XHR_STATES.COMPLETED) {\n              if (req.status === 200) {\n                resolve(req.responseType ? req.response : req.responseText);\n              } else {\n                reject(new Error(`${req.status}: ${url}`));\n              }\n            }\n          };\n        }\n\n        if (sendAsBinary) {\n          req.sendAsBinary(body);\n        } else {\n          req.send(body);\n        }\n\n        if (!this.async) {\n          if (req.status === 200) {\n            resolve(req.responseType ? req.response : req.responseText);\n          } else {\n            reject(new Error(`${req.status}: ${url}`));\n          }\n        }\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n  /* eslint-enable max-statements */\n}\n\nexport function requestFile(opts) {\n  const xhr = new XHR(opts);\n  return xhr.sendAsync();\n}\n"]}