{"version":3,"sources":["../../src/deprecated/camera.js"],"names":["Camera","opts","fov","near","far","aspect","position","target","up","view","uniforms","projection","Object","seal","update","viewProjection","mulMat4","viewProjectionInverse","invert","cameraPosition","projectionMatrix","viewMatrix","viewProjectionMatrix","viewInverseMatrix","viewProjectionInverseMatrix","PerspectiveCamera","perspective","lookAt","_updateUniforms","OrthoCamera","ymax","Math","tan","PI","ymin","xmin","xmax","ortho"],"mappings":";;;;;;;qjBAAA;AACA;;AAEA;;AACA;;;;;;;;IAEaA,M,WAAAA,M;AAEX,oBAAuB;AAAA,QAAXC,IAAW,uEAAJ,EAAI;;AAAA;;AACrBA,WAAO,kBAAM;AACXC,WAAK,EADM;AAEXC,YAAM,GAFK;AAGXC,WAAK,GAHM;AAIXC,cAAQ,CAJG;AAKXC,gBAAU,eAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,CALC;AAMXC,cAAQ,eAAS,CAAT,EAAY,CAAZ,EAAe,CAAC,CAAhB,CANG;AAOXC,UAAI,eAAS,CAAT,EAAY,CAAZ,EAAe,CAAf;AAPO,KAAN,EAQJP,IARI,CAAP;;AAUA,SAAKC,GAAL,GAAWD,KAAKC,GAAhB;AACA,SAAKC,IAAL,GAAYF,KAAKE,IAAjB;AACA,SAAKC,GAAL,GAAWH,KAAKG,GAAhB;AACA,SAAKC,MAAL,GAAcJ,KAAKI,MAAnB;AACA,SAAKC,QAAL,GAAgBL,KAAKK,QAArB;AACA,SAAKC,MAAL,GAAcN,KAAKM,MAAnB;AACA,SAAKC,EAAL,GAAUP,KAAKO,EAAf;AACA,SAAKC,IAAL,GAAY,gBAAZ;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACA,SAAKC,UAAL,GAAkB,gBAAlB;AACAC,WAAOC,IAAP,CAAY,IAAZ;;AAEA,SAAKC,MAAL;AACD;;;;8BAES;AACR,aAAO,IAAP;AACD;;;gCAEW;AACV,aAAO,IAAP;AACD;;;kCAEa;AACZ,aAAO,KAAKJ,QAAZ;AACD;;;sCAEiB;AAChB,UAAMK,iBAAiB,KAAKN,IAAL,CAAUO,OAAV,CAAkB,KAAKL,UAAvB,CAAvB;AACA,UAAMM,wBAAwBF,eAAeG,MAAf,EAA9B;AACA,WAAKR,QAAL,GAAgB;AACdS,wBAAgB,KAAKb,QADP;AAEdc,0BAAkB,KAAKT,UAFT;AAGdU,oBAAY,KAAKZ,IAHH;AAIda,8BAAsBP,cAJR;AAKdQ,2BAAmB,KAAKd,IAAL,CAAUS,MAAV,EALL;AAMdM,qCAA6BP;AANf,OAAhB;AAQD;;;;;;IAIUQ,iB,WAAAA,iB;;;;;;;;;;;6BAEF;AACP,WAAKd,UAAL,GACE,iBAAWe,WAAX,CAAuB,KAAKxB,GAA5B,EAAiC,KAAKG,MAAtC,EAA8C,KAAKF,IAAnD,EAAyD,KAAKC,GAA9D,CADF;AAEA,WAAKK,IAAL,CAAUkB,MAAV,CAAiB,KAAKrB,QAAtB,EAAgC,KAAKC,MAArC,EAA6C,KAAKC,EAAlD;AACA,WAAKoB,eAAL;AACD;;;;EAPoC5B,M;;IAW1B6B,W,WAAAA,W;;;;;;;6BAEF;AACP,UAAMC,OAAO,KAAK3B,IAAL,GAAY4B,KAAKC,GAAL,CAAS,KAAK9B,GAAL,GAAW6B,KAAKE,EAAhB,GAAqB,GAA9B,CAAzB;AACA,UAAMC,OAAO,CAACJ,IAAd;AACA,UAAMK,OAAOD,OAAO,KAAK7B,MAAzB;AACA,UAAM+B,OAAON,OAAO,KAAKzB,MAAzB;AACA,WAAKM,UAAL,GACE,iBAAW0B,KAAX,CAAiBF,IAAjB,EAAuBC,IAAvB,EAA6BF,IAA7B,EAAmCJ,IAAnC,EAAyC,KAAK3B,IAA9C,EAAoD,KAAKC,GAAzD,CADF;AAEA,WAAKK,IAAL,CAAUkB,MAAV,CAAiB,KAAKrB,QAAtB,EAAgC,KAAKC,MAArC,EAA6C,KAAKC,EAAlD;AACA,WAAKoB,eAAL;AACD","file":"camera.js","sourcesContent":["// camera.js\n// Provides a Camera with ModelView and Projection matrices\n\nimport {Vec3, Mat4} from '../deprecated/math';\nimport {merge} from '../utils';\n\nexport class Camera {\n\n  constructor(opts = {}) {\n    opts = merge({\n      fov: 45,\n      near: 0.1,\n      far: 500,\n      aspect: 1,\n      position: new Vec3(0, 0, 0),\n      target: new Vec3(0, 0, -1),\n      up: new Vec3(0, 1, 0)\n    }, opts);\n\n    this.fov = opts.fov;\n    this.near = opts.near;\n    this.far = opts.far;\n    this.aspect = opts.aspect;\n    this.position = opts.position;\n    this.target = opts.target;\n    this.up = opts.up;\n    this.view = new Mat4();\n    this.uniforms = {};\n    this.projection = new Mat4();\n    Object.seal(this);\n\n    this.update();\n  }\n\n  project() {\n    return null;\n  }\n\n  unproject() {\n    return null;\n  }\n\n  getUniforms() {\n    return this.uniforms;\n  }\n\n  _updateUniforms() {\n    const viewProjection = this.view.mulMat4(this.projection);\n    const viewProjectionInverse = viewProjection.invert();\n    this.uniforms = {\n      cameraPosition: this.position,\n      projectionMatrix: this.projection,\n      viewMatrix: this.view,\n      viewProjectionMatrix: viewProjection,\n      viewInverseMatrix: this.view.invert(),\n      viewProjectionInverseMatrix: viewProjectionInverse\n    };\n  }\n\n}\n\nexport class PerspectiveCamera extends Camera {\n\n  update() {\n    this.projection =\n      new Mat4().perspective(this.fov, this.aspect, this.near, this.far);\n    this.view.lookAt(this.position, this.target, this.up);\n    this._updateUniforms();\n  }\n\n}\n\nexport class OrthoCamera {\n\n  update() {\n    const ymax = this.near * Math.tan(this.fov * Math.PI / 360);\n    const ymin = -ymax;\n    const xmin = ymin * this.aspect;\n    const xmax = ymax * this.aspect;\n    this.projection =\n      new Mat4().ortho(xmin, xmax, ymin, ymax, this.near, this.far);\n    this.view.lookAt(this.position, this.target, this.up);\n    this._updateUniforms();\n  }\n\n}\n"]}