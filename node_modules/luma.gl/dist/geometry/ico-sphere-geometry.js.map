{"version":3,"sources":["../../src/geometry/ico-sphere-geometry.js"],"names":["ICO_POSITIONS","ICO_INDICES","IcoSphereGeometry","opts","iterations","PI","Math","PI2","positions","indices","push","getMiddlePoint","pointMemo","i1","i2","mini","maxi","key","x1","y1","z1","x2","y2","z2","xm","ym","zm","len","sqrt","length","i","indices2","j","a","b","c","normals","Array","texCoords","l","i3","in1","in2","in3","iu1","iu2","iu3","theta1","acos","phi1","atan2","v1","u1","theta2","phi2","v2","u2","x3","y3","z3","theta3","phi3","v3","u3","vec1","vec2","normal","cross","normalize","newIndex","x","y","z","Object","assign","attributes","Float32Array","Uint16Array"],"mappings":"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","file":"ico-sphere-geometry.js","sourcesContent":["import Geometry from './geometry';\nimport {Vector3} from '../packages/math';\n\n/* eslint-disable comma-spacing, max-statements, complexity */\n\nconst ICO_POSITIONS = [-1,0,0, 0,1,0, 0,0,-1, 0,0,1, 0,-1,0, 1,0,0];\nconst ICO_INDICES = [3,4,5,3,5,1,3,1,0,3,0,4,4,0,2,4,2,5,2,0,1,5,2,1];\n\nexport default class IcoSphereGeometry extends Geometry {\n  constructor(opts = {}) {\n    const {iterations = 0} = opts;\n\n    const PI = Math.PI;\n    const PI2 = PI * 2;\n\n    const positions = [...ICO_POSITIONS];\n    let indices = [...ICO_INDICES];\n\n    positions.push();\n    indices.push();\n\n    const getMiddlePoint = (() => {\n      const pointMemo = {};\n\n      return (i1, i2) => {\n        i1 *= 3;\n        i2 *= 3;\n        const mini = i1 < i2 ? i1 : i2;\n        const maxi = i1 > i2 ? i1 : i2;\n        const key = `${mini}|${maxi}`;\n\n        if (key in pointMemo) {\n          return pointMemo[key];\n        }\n\n        const x1 = positions[i1];\n        const y1 = positions[i1 + 1];\n        const z1 = positions[i1 + 2];\n        const x2 = positions[i2];\n        const y2 = positions[i2 + 1];\n        const z2 = positions[i2 + 2];\n        let xm = (x1 + x2) / 2;\n        let ym = (y1 + y2) / 2;\n        let zm = (z1 + z2) / 2;\n        const len = Math.sqrt(xm * xm + ym * ym + zm * zm);\n\n        xm /= len;\n        ym /= len;\n        zm /= len;\n\n        positions.push(xm, ym, zm);\n\n        return (pointMemo[key] = (positions.length / 3 - 1));\n      };\n    })();\n\n    for (let i = 0; i < iterations; i++) {\n      const indices2 = [];\n      for (let j = 0; j < indices.length; j += 3) {\n        const a = getMiddlePoint(indices[j + 0], indices[j + 1]);\n        const b = getMiddlePoint(indices[j + 1], indices[j + 2]);\n        const c = getMiddlePoint(indices[j + 2], indices[j + 0]);\n\n        indices2.push(\n          c, indices[j + 0], a,\n          a, indices[j + 1], b,\n          b, indices[j + 2], c,\n          a, b, c);\n      }\n      indices = indices2;\n    }\n\n    // Calculate texCoords and normals\n    const normals = new Array(indices.length * 3);\n    const texCoords = new Array(indices.length * 2);\n\n    const l = indices.length;\n    for (let i = l - 3; i >= 0; i -= 3) {\n      const i1 = indices[i + 0];\n      const i2 = indices[i + 1];\n      const i3 = indices[i + 2];\n      const in1 = i1 * 3;\n      const in2 = i2 * 3;\n      const in3 = i3 * 3;\n      const iu1 = i1 * 2;\n      const iu2 = i2 * 2;\n      const iu3 = i3 * 2;\n      const x1 = positions[in1 + 0];\n      const y1 = positions[in1 + 1];\n      const z1 = positions[in1 + 2];\n      const theta1 = Math.acos(z1 / Math.sqrt(x1 * x1 + y1 * y1 + z1 * z1));\n      const phi1 = Math.atan2(y1, x1) + PI;\n      const v1 = theta1 / PI;\n      const u1 = 1 - phi1 / PI2;\n      const x2 = positions[in2 + 0];\n      const y2 = positions[in2 + 1];\n      const z2 = positions[in2 + 2];\n      const theta2 = Math.acos(z2 / Math.sqrt(x2 * x2 + y2 * y2 + z2 * z2));\n      const phi2 = Math.atan2(y2, x2) + PI;\n      const v2 = theta2 / PI;\n      const u2 = 1 - phi2 / PI2;\n      const x3 = positions[in3 + 0];\n      const y3 = positions[in3 + 1];\n      const z3 = positions[in3 + 2];\n      const theta3 = Math.acos(z3 / Math.sqrt(x3 * x3 + y3 * y3 + z3 * z3));\n      const phi3 = Math.atan2(y3, x3) + PI;\n      const v3 = theta3 / PI;\n      const u3 = 1 - phi3 / PI2;\n      const vec1 = [\n        x3 - x2,\n        y3 - y2,\n        z3 - z2\n      ];\n      const vec2 = [\n        x1 - x2,\n        y1 - y2,\n        z1 - z2\n      ];\n      const normal = new Vector3(vec1).cross(vec2).normalize();\n      let newIndex;\n\n      if ((u1 === 0 || u2 === 0 || u3 === 0) &&\n          (u1 === 0 || u1 > 0.5) &&\n            (u2 === 0 || u2 > 0.5) &&\n              (u3 === 0 || u3 > 0.5)) {\n\n        positions.push(\n          positions[in1 + 0],\n          positions[in1 + 1],\n          positions[in1 + 2]\n        );\n        newIndex = positions.length / 3 - 1;\n        indices.push(newIndex);\n        texCoords[newIndex * 2 + 0] = 1;\n        texCoords[newIndex * 2 + 1] = v1;\n        normals[newIndex * 3 + 0] = normal.x;\n        normals[newIndex * 3 + 1] = normal.y;\n        normals[newIndex * 3 + 2] = normal.z;\n\n        positions.push(\n          positions[in2 + 0],\n          positions[in2 + 1],\n          positions[in2 + 2]\n        );\n        newIndex = positions.length / 3 - 1;\n        indices.push(newIndex);\n        texCoords[newIndex * 2 + 0] = 1;\n        texCoords[newIndex * 2 + 1] = v2;\n        normals[newIndex * 3 + 0] = normal.x;\n        normals[newIndex * 3 + 1] = normal.y;\n        normals[newIndex * 3 + 2] = normal.z;\n\n        positions.push(\n          positions[in3 + 0],\n          positions[in3 + 1],\n          positions[in3 + 2]\n        );\n        newIndex = positions.length / 3 - 1;\n        indices.push(newIndex);\n        texCoords[newIndex * 2 + 0] = 1;\n        texCoords[newIndex * 2 + 1] = v3;\n        normals[newIndex * 3 + 0] = normal.x;\n        normals[newIndex * 3 + 1] = normal.y;\n        normals[newIndex * 3 + 2] = normal.z;\n      }\n\n      normals[in1 + 0] = normals[in2 + 0] = normals[in3 + 0] = normal.x;\n      normals[in1 + 1] = normals[in2 + 1] = normals[in3 + 1] = normal.y;\n      normals[in1 + 2] = normals[in2 + 2] = normals[in3 + 2] = normal.z;\n\n      texCoords[iu1 + 0] = u1;\n      texCoords[iu1 + 1] = v1;\n\n      texCoords[iu2 + 0] = u2;\n      texCoords[iu2 + 1] = v2;\n\n      texCoords[iu3 + 0] = u3;\n      texCoords[iu3 + 1] = v3;\n    }\n\n    super(Object.assign({}, opts, {\n      attributes: {\n        positions: new Float32Array(positions),\n        normals: new Float32Array(normals),\n        texCoords: new Float32Array(texCoords),\n        indices: new Uint16Array(indices)\n      }\n    }));\n  }\n}\n"]}