{"version":3,"sources":["../../../src/shadertools/lib/shader-modules.js"],"names":["registerShaderModules","setDefaultShaderModules","getShaderModule","resolveModules","getShaderDependencies","getDependencyGraph","shaderModules","defaultShaderModules","shaderModuleList","ignoreMultipleRegistrations","shaderModule","registerShaderModule","modules","moduleOrName","name","moduleNames","map","module","concat","result","level","Object","keys","sort","a","b","Error","undefined","dependencies"],"mappings":"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","file":"shader-modules.js","sourcesContent":["import assert from 'assert';\n\nconst shaderModules = {};\nlet defaultShaderModules = [];\n\n/**\n * Registers an array of shader modules\n * @param {Object[]} shaderModuleList - Array of shader modules\n */\nexport function registerShaderModules(shaderModuleList, {\n  ignoreMultipleRegistrations = false\n} = {}) {\n  for (const shaderModule of shaderModuleList) {\n    registerShaderModule(shaderModule, {ignoreMultipleRegistrations});\n  }\n}\n\n/**\n * Registers an array of default shader modules. These will be concatenated\n * automatically at the end of any shader module list passed to\n * `assembleShaders` (plus `resolveModules` and `getShaderDependencies`)\n * @param {Object[]} modules - Array of shader modules\n */\nexport function setDefaultShaderModules(modules) {\n  defaultShaderModules = modules;\n}\n\n// Looks up a moduleName among registered modules and returns definition.\n// If \"inline\" module, returns it directly\nexport function getShaderModule(moduleOrName) {\n  // Check if \"inline\" module\n  if (typeof moduleOrName !== 'string') {\n    const shaderModule = moduleOrName;\n    assert(typeof shaderModule.name === 'string');\n    registerShaderModule(shaderModule, {ignoreMultipleRegistrations: true});\n    return shaderModule;\n  }\n\n  // Look up module\n  const shaderModule = shaderModules[moduleOrName];\n  if (!shaderModule) {\n    // console.log(`${moduleOrName} not in registered modules:`, shaderModules);\n    assert(false, `Unknown shader module ${moduleOrName}`);\n  }\n  return shaderModule;\n}\n\n// registers any supplied modules and returns a list of module names\nexport function resolveModules(modules) {\n  const moduleNames = modules.map(module => {\n    if (typeof module !== 'string') {\n      registerShaderModules([module], {ignoreMultipleRegistrations: true});\n      return module.name;\n    }\n    return module;\n  });\n\n  return getShaderDependencies(moduleNames);\n}\n\n/**\n * Takes a list of shader module names and returns a new list of\n * shader module names that includes all dependencies, sorted so\n * that modules that are dependencies of other modules come first.\n *\n * If the shader glsl code from the returned modules is concatenated\n * in the reverse order, it is guaranteed that all functions be resolved and\n * that all function and variable definitions come before use.\n *\n * @param {String[]} modules - Array of modules (inline modules or module names)\n * @return {String[]} - Array of modules\n */\nexport function getShaderDependencies(modules) {\n  modules = modules.concat(defaultShaderModules);\n\n  const result = {};\n  getDependencyGraph({\n    modules,\n    level: 0,\n    result\n  });\n\n  // Return a reverse sort so that dependencies come before the modules that use them\n  return Object.keys(result).sort((a, b) => result[b] - result[a]);\n}\n\n/**\n * Recursively checks module dpendencies to calculate dependency\n * level of each module.\n *\n * @param {String[]} modules - Array of modules\n * @param {Number} level - Current level\n * @return {result} - Map of module name to its level\n */\n// Adds another level of dependencies to the result map\nexport function getDependencyGraph({modules, level, result}) {\n  if (level >= 5) {\n    throw new Error('Possible loop in shader dependency graph');\n  }\n\n  // Update level on all current modules\n  for (const moduleOrName of modules) {\n    const shaderModule = getShaderModule(moduleOrName);\n    if (result[shaderModule.name] === undefined || result[shaderModule.name] < level) {\n      result[shaderModule.name] = level;\n    }\n  }\n\n  // Recurse\n  for (const moduleOrName of modules) {\n    const shaderModule = getShaderModule(moduleOrName);\n\n    if (shaderModule.dependencies) {\n      getDependencyGraph({\n        modules: shaderModule.dependencies,\n        level: level + 1,\n        result\n      });\n    }\n  }\n\n  return result;\n}\n\n// PRIVATE API\n\nfunction registerShaderModule(shaderModule, {ignoreMultipleRegistrations = false}) {\n  assert(shaderModule.name, 'shader module has no name');\n  if (!ignoreMultipleRegistrations && shaderModules[shaderModule.name]) {\n    // TODO - instead verify that definition is not changing...\n    throw new Error(`shader module ${shaderModule.name} already registered`);\n  }\n  shaderModules[shaderModule.name] = shaderModule;\n  shaderModule.dependencies = shaderModule.dependencies || [];\n}\n"]}