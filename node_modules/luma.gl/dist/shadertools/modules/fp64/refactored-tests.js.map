{"version":3,"sources":["../../../../src/shadertools/modules/fp64/refactored-tests.js"],"names":["getRandomFloat64","upper","Math","random","pow","TEST_LOOP","TEST_CASES","add_fp64","float0","float1","float_ref","float0_vec2","float1_vec2","uniforms","a","b","line","result","sub_fp64","mul_fp64","div_fp64","sqrt_fp64","sqrt","exp_fp64","exp","log_fp64","log","sin_fp64","sin","cos_fp64","cos","tan_fp64","tan","initializeGL","canvas","gl","viewport","clearColor","clearDepth","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","getExtension","Error","initializeTexTarget","framebuffer","createFramebuffer","bindFramebuffer","FRAMEBUFFER","width","height","tex","createTexture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","texImage2D","RGBA","FLOAT","renderbuffer","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_COMPONENT16","framebufferTexture2D","COLOR_ATTACHMENT0","framebufferRenderbuffer","DEPTH_ATTACHMENT","getGPUOutput","buf","Float32Array","readPixels","checkError","t","reference","reference64","result64","comment","abs","getProgram","func","functionUnderTest","vs","fs","modules","setBuffers","positions","setData","data","size","setUniforms","ONE","testCount","testName","tc","idx0","testData","program","use","drawArrays","TRIANGLE_STRIP","cpuResult","gpuResult","end"],"mappings":"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","file":"refactored-tests.js","sourcesContent":["// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable camelcase */\nimport test from 'tape-catch';\n\nimport {Buffer, createGLContext, Program} from '../../../webgl';\nimport {assembleShaders} from '../../lib/assemble-shaders';\nimport {fp64ify} from './index';\n\n// Special utility functions for df64 tests\n\nfunction getRandomFloat64(upper = 256) {\n  return Math.random() * Math.pow(2.0, (Math.random() - 0.5) * upper);\n}\n\nconst TEST_LOOP = 20;\n\n// Actual tests for different arithmetic functions\n\nconst TEST_CASES = {\n  add_fp64: () => {\n    const float0 = getRandomFloat64();\n    const float1 = getRandomFloat64();\n    const float_ref = float0 + float1;\n    const float0_vec2 = fp64ify(float0);\n    const float1_vec2 = fp64ify(float1);\n\n    return {\n      uniforms: {\n        a: float0_vec2,\n        b: float1_vec2\n      },\n      line: `(${float0_vec2}) + (${float1_vec2})`,\n      result: float_ref\n    };\n  },\n\n  sub_fp64: () => {\n    const float0 = getRandomFloat64();\n    const float1 = getRandomFloat64();\n    const float_ref = float0 - float1;\n    const float0_vec2 = fp64ify(float0);\n    const float1_vec2 = fp64ify(float1);\n\n    return {\n      uniforms: {\n        a: float0_vec2,\n        b: float1_vec2\n      },\n      line: `(${float0_vec2}) - (${float1_vec2})`,\n      result: float_ref\n    };\n  },\n\n  mul_fp64: () => {\n    const float0 = getRandomFloat64(128);\n    const float1 = getRandomFloat64(128);\n    const float_ref = float0 * float1;\n\n    const float0_vec2 = fp64ify(float0);\n    const float1_vec2 = fp64ify(float1);\n\n    return {\n      uniforms: {\n        a: float0_vec2,\n        b: float1_vec2\n      },\n      line: `(${float0_vec2}) * (${float1_vec2})`,\n      result: float_ref\n    };\n  },\n\n  div_fp64: () => {\n    const float0 = getRandomFloat64(128);\n    const float1 = getRandomFloat64(128);\n    const float_ref = float0 / float1;\n\n    const float0_vec2 = fp64ify(float0);\n    const float1_vec2 = fp64ify(float1);\n\n    return {\n      uniforms: {\n        a: float0_vec2,\n        b: float1_vec2\n      },\n      line: `(${float0_vec2}) / (${float1_vec2})`,\n      result: float_ref\n    };\n  },\n\n  sqrt_fp64: () => {\n    const float0 = getRandomFloat64(128);\n    const float_ref = Math.sqrt(float0);\n\n    const float0_vec2 = fp64ify(float0);\n\n    return {\n      uniforms: {\n        a: float0_vec2\n      },\n      line: `sqrt(${float0_vec2})`,\n      result: float_ref\n    };\n  },\n\n  exp_fp64: () => {\n    const float0 = getRandomFloat64(6);\n    const float_ref = Math.exp(float0);\n\n    const float0_vec2 = fp64ify(float0);\n\n    return {\n      uniforms: {\n        a: float0_vec2\n      },\n      line: `exp(${float0_vec2})`,\n      result: float_ref\n    };\n  },\n\n  log_fp64: () => {\n    const float0 = getRandomFloat64(24);\n    const float_ref = Math.log(float0);\n\n    const float0_vec2 = fp64ify(float0);\n\n    return {\n      uniforms: {\n        a: float0_vec2\n      },\n      line: `log(${float0_vec2})`,\n      result: float_ref\n    };\n  },\n\n  sin_fp64: () => {\n    const float0 = getRandomFloat64(3);\n    const float_ref = Math.sin(float0);\n\n    const float0_vec2 = fp64ify(float0);\n\n    return {\n      uniforms: {\n        a: float0_vec2\n      },\n      line: `sin(${float0_vec2})`,\n      result: float_ref\n    };\n  },\n\n  cos_fp64: () => {\n    const float0 = getRandomFloat64(3);\n    const float_ref = Math.cos(float0);\n\n    const float0_vec2 = fp64ify(float0);\n\n    return {\n      uniforms: {\n        a: float0_vec2\n      },\n      line: `cos(${float0_vec2})`,\n      result: float_ref\n    };\n  },\n\n  tan_fp64: () => {\n    const float0 = getRandomFloat64(3);\n    const float_ref = Math.tan(float0);\n\n    const float0_vec2 = fp64ify(float0);\n\n    return {\n      uniforms: {\n        a: float0_vec2\n      },\n      line: `tan(${float0_vec2})`,\n      result: float_ref\n    };\n  }\n};\n\n// Utilities\n\nfunction initializeGL(canvas) {\n  const gl = createGLContext();\n  gl.viewport(0, 0, 16, 16);\n  gl.clearColor(0, 0, 0, 1);\n  gl.clearDepth(1);\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n  if (!gl.getExtension('OES_texture_float')) {\n    // console.error('no floating point texture support!');\n    throw new Error('no floating point texture support!');\n  }\n\n  return gl;\n}\n\nfunction initializeTexTarget(gl) {\n  const framebuffer = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n  framebuffer.width = 10;\n  framebuffer.height = 10;\n\n  const tex = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, tex);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\n  gl.texImage2D(gl.TEXTURE_2D,\n    0, gl.RGBA, framebuffer.width, framebuffer.height, 0, gl.RGBA, gl.FLOAT, null);\n\n  const renderbuffer = gl.createRenderbuffer();\n  gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);\n  gl.renderbufferStorage(gl.RENDERBUFFER,\n    gl.DEPTH_COMPONENT16, framebuffer.width, framebuffer.height);\n  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex, 0);\n  gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, renderbuffer);\n}\n\nfunction getGPUOutput(gl) {\n  const width = 16;\n  const height = gl.canvas.height;\n  const buf = new Float32Array(width * height * 4);\n  gl.readPixels(0, 0, width, height, gl.RGBA, gl.FLOAT, buf);\n  return buf;\n}\n\nfunction checkError(t, result, reference) {\n  const reference64 = reference[0] + reference[1];\n  const result64 = result[0] + result[1];\n\n  t.comment('------------------------');\n  t.comment(`CPU output: (${reference[0]},${reference[1]}) = ${reference64}`);\n  t.comment(`GPU output: (${result[0]},${result[1]},${result[2]},${result[3]}) = ${result64}`);\n  t.comment(`error: \"${Math.abs((reference64 - result64) / reference64)}\"`);\n}\n\nfunction getProgram(gl, func, uniforms) {\n\n  const functionUnderTest = `${func}${uniforms.b ? '(a, b)' : '(a)'}`;\n\n  const vs = `\nattribute vec3 positions;\nuniform vec2 a;\nuniform vec2 b;\nvarying vec4 vColor;\nvoid main(void) {\n  gl_Position = vec4(positions, 1.0);\n  vec2 result = ${functionUnderTest};\n  vColor = vec4(result.x, result.y, 0.0, 1.0);\n}\n`;\n\n  const fs = `\n#ifdef GL_ES\nprecision highp float;\n#endif\nvarying vec4 vColor;\nvoid main(void) {\n  gl_FragColor = vColor;\n}\n`;\n\n  return new Program(gl, assembleShaders(gl, {\n    vs,\n    fs,\n    modules: ['fp64']\n  }))\n  .setBuffers({\n    positions: new Buffer(gl).setData({\n      data: new Float32Array([1, 1, -1, 1, 1, -1, -1, -1]),\n      size: 2\n    })\n  })\n  .setUniforms({ONE: 1.0})\n  .setUniforms(uniforms);\n}\n\n// Test cases\n\ntest('fp64', t => {\n  // Initialize GL\n  const gl = initializeGL();\n\n  initializeTexTarget(gl);\n\n  let testCount = 0;\n\n  for (const testName in TEST_CASES) {\n\n    const tc = TEST_CASES[testName];\n\n    for (let idx0 = 0; idx0 < TEST_LOOP; idx0++) {\n      t.comment('------------------------');\n      t.comment(`Loop No. ${testCount++} - ${testName}`);\n\n      // Note: Test case is a function that returns object with test data\n      const testData = tc();\n\n      const program = getProgram(gl, testName, testData.uniforms);\n      program.use();\n      gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n\n      const cpuResult = testData.result;\n      const gpuResult = getGPUOutput(gl);\n\n      checkError(gpuResult, cpuResult);\n\n      t.comment('------------------------');\n    }\n  }\n  t.end();\n});\n\n"]}