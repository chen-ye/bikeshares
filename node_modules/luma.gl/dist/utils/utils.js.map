{"version":3,"sources":["../../src/utils/utils.js"],"names":["splat","noop","uid","merge","isPowerOfTwo","a","Array","isArray","uidCounters","id","count","objects","mix","i","l","arguments","length","object","constructor","name","key","op","mp","detach","elem","t","ans","p","n"],"mappings":";;;;;QAOgBA,K,GAAAA,K;QAOAC,I,GAAAA,I;QASAC,G,GAAAA,G;QAWAC,K,GAAAA,K;QAoDAC,Y,GAAAA,Y;;AAtFhB;;;;;;AAEA;;;;;AAKO,SAASJ,KAAT,CAAeK,CAAf,EAAkB;AACvB,SAAOA,IAAKC,MAAMC,OAAN,CAAcF,CAAd,IAAmBA,CAAnB,GAAuB,CAACA,CAAD,CAA5B,GAAmC,EAA1C;AACD;;AAED;;;AAGO,SAASJ,IAAT,GAAgB,CAAE;;AAEzB,IAAMO,cAAc,EAApB;;AAEA;;;;;AAKO,SAASN,GAAT,GAAwB;AAAA,MAAXO,EAAW,uEAAN,IAAM;;AAC7BD,cAAYC,EAAZ,IAAkBD,YAAYC,EAAZ,KAAmB,CAArC;AACA,MAAMC,QAAQF,YAAYC,EAAZ,GAAd;AACA,SAAUA,EAAV,SAAgBC,KAAhB;AACD;;AAED;;;;;AAKO,SAASP,KAAT,CAAeQ,OAAf,EAAwB;AAC7B,MAAMC,MAAM,EAAZ;AACA,OAAK,IAAIC,IAAI,CAAR,EAAWC,IAAIC,UAAUC,MAA9B,EAAsCH,IAAIC,CAA1C,EAA6CD,GAA7C,EAAkD;AAChD,QAAMI,SAASF,UAAUF,CAAV,CAAf;AACA,QAAI,CAACI,MAAD,IAAWA,OAAOC,WAAP,CAAmBC,IAAnB,KAA4B,QAA3C,EAAqD;AACnD;AACA;AACD;AACD,SAAK,IAAMC,GAAX,IAAkBH,MAAlB,EAA0B;AACxB,UAAMI,KAAKJ,OAAOG,GAAP,CAAX;AACA,UAAME,KAAKV,IAAIQ,GAAJ,CAAX;AACA,UAAIE,MAAMD,GAAGH,WAAH,CAAeC,IAAf,KAAwB,QAA9B,IACFG,GAAGJ,WAAH,CAAeC,IAAf,KAAwB,QAD1B,EACoC;AAClCP,YAAIQ,GAAJ,IAAWjB,MAAMmB,EAAN,EAAUD,EAAV,CAAX;AACD,OAHD,MAGO;AACLT,YAAIQ,GAAJ,IAAWG,OAAOF,EAAP,CAAX;AACD;AACF;AACF;AACD,SAAOT,GAAP;AACD;;AAED;;;;;AAKA,SAASW,MAAT,CAAgBC,IAAhB,EAAsB;AACpB,MAAMC,IAAID,KAAKN,WAAL,CAAiBC,IAA3B;AACA,MAAIO,YAAJ;AACA,MAAID,MAAM,QAAV,EAAoB;AAClBC,UAAM,EAAN;AACA,SAAK,IAAMC,CAAX,IAAgBH,IAAhB,EAAsB;AACpBE,UAAIC,CAAJ,IAASJ,OAAOC,KAAKG,CAAL,CAAP,CAAT;AACD;AACF,GALD,MAKO,IAAIF,MAAM,OAAV,EAAmB;AACxBC,UAAM,EAAN;AACA,SAAK,IAAIb,IAAI,CAAR,EAAWC,IAAIU,KAAKR,MAAzB,EAAiCH,IAAIC,CAArC,EAAwCD,GAAxC,EAA6C;AAC3Ca,UAAIb,CAAJ,IAASU,OAAOC,KAAKX,CAAL,CAAP,CAAT;AACD;AACF,GALM,MAKA;AACLa,UAAMF,IAAN;AACD;;AAED,SAAOE,GAAP;AACD;;AAED;;;;;AAKO,SAAStB,YAAT,CAAsBwB,CAAtB,EAAyB;AAC9B,wBAAQ,OAAOA,CAAP,KAAa,QAArB,EAAgC,wBAAhC;AACA,SAAOA,KAAM,CAACA,IAAKA,IAAI,CAAV,MAAkB,CAA/B;AACD","file":"utils.js","sourcesContent":["import assert from 'assert';\n\n/**\n * Wraps the argument in an array if it is not one.\n * @param {object} a - The object to wrap.\n * @return {Array} array\n **/\nexport function splat(a) {\n  return a ? (Array.isArray(a) ? a : [a]) : [];\n}\n\n/**\n* Provides a standard noop function.\n**/\nexport function noop() {}\n\nconst uidCounters = {};\n\n/**\n * Returns a UID.\n * @param {String} id= - Identifier base name\n * @return {number} uid\n **/\nexport function uid(id = 'id') {\n  uidCounters[id] = uidCounters[id] || 1;\n  const count = uidCounters[id]++;\n  return `${id}-${count}`;\n}\n\n/**\n * Merge multiple objects into one.\n * @param {...object} objects - The objects to merge.\n * @return {object} object\n **/\nexport function merge(objects) {\n  const mix = {};\n  for (let i = 0, l = arguments.length; i < l; i++) {\n    const object = arguments[i];\n    if (!object || object.constructor.name !== 'Object') {\n      /* eslint-disable no-continue */\n      continue;\n    }\n    for (const key in object) {\n      const op = object[key];\n      const mp = mix[key];\n      if (mp && op.constructor.name === 'Object' &&\n        mp.constructor.name === 'Object') {\n        mix[key] = merge(mp, op);\n      } else {\n        mix[key] = detach(op);\n      }\n    }\n  }\n  return mix;\n}\n\n/**\n * Internal function for duplicating an object.\n * @param {object} elem - The object to recursively duplicate.\n * @return {object} object\n **/\nfunction detach(elem) {\n  const t = elem.constructor.name;\n  let ans;\n  if (t === 'Object') {\n    ans = {};\n    for (const p in elem) {\n      ans[p] = detach(elem[p]);\n    }\n  } else if (t === 'Array') {\n    ans = [];\n    for (let i = 0, l = elem.length; i < l; i++) {\n      ans[i] = detach(elem[i]);\n    }\n  } else {\n    ans = elem;\n  }\n\n  return ans;\n}\n\n/**\n * Verifies if a given number is power of two or not.\n * @param {object} n - The number to check.\n * @return {Array} Returns true if the given number is power of 2, false otherwise.\n **/\nexport function isPowerOfTwo(n) {\n  assert((typeof n === 'number'), 'Input must be a number');\n  return n && ((n & (n - 1)) === 0);\n}\n"]}