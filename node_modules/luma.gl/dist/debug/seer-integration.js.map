{"version":3,"sources":["../../src/debug/seer-integration.js"],"names":["models","addModel","model","id","listItem","logModel","uniforms","__SEER_INITIALIZED__","throttle","attributesObject","Object","assign","geometry","attributes","uniformsObject","multiUpdate","path","data","removeModel","deleteItem","recursiveSet","obj","value","length","slice","overrides","Map","setOverride","valuePath","has","set","get","getOverrides","overs","forEach","listenFor","payload","itemKey","type","getUniforms","setUniforms"],"mappings":"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","file":"seer-integration.js","sourcesContent":["import seer from 'seer';\n\nimport {window} from '../utils/globals';\n\nconst models = {};\n\n/**\n * Add a model to our cache indexed by id\n */\nexport const addModel = model => {\n  if (models[model.id]) {\n    return;\n  }\n  models[model.id] = model;\n\n  seer.listItem('luma.gl', model.id);\n};\n\n/**\n * Log a model uniforms and attributes.\n */\nexport const logModel = (model, uniforms) => {\n  if (!window.__SEER_INITIALIZED__ || seer.throttle(`luma.gl:${model.id}`, 1E3)) {\n    return;\n  }\n\n  const attributesObject = Object.assign({}, model.geometry.attributes, model.attributes);\n  const uniformsObject = Object.assign({}, model.uniforms, uniforms);\n\n  seer.multiUpdate('luma.gl', model.id, [\n    {path: 'objects.uniforms', data: uniformsObject},\n    {path: 'objects.attributes', data: attributesObject}\n  ]);\n};\n\n/**\n * Remove a previously set model from the cache\n */\nexport const removeModel = id => {\n  delete models[id];\n  seer.deleteItem('luma.gl', id);\n};\n\n/**\n * Recursively traverse an object given a path of properties and set the given value\n */\nconst recursiveSet = (obj, path, value) => {\n  if (!obj) {\n    return;\n  }\n\n  if (path.length > 1) {\n    recursiveSet(obj[path[0]], path.slice(1), value);\n  } else {\n    obj[path[0]] = value;\n  }\n};\n\nconst overrides = new Map();\n\n/**\n * Create an override on the specify layer, indexed by a valuePath array.\n * Do nothing in case Seer as not been initialized to prevent any preformance drawback.\n */\nexport const setOverride = (id, valuePath, value) => {\n  if (!window.__SEER_INITIALIZED__) {\n    return;\n  }\n\n  if (!overrides.has(id)) {\n    overrides.set(id, new Map());\n  }\n\n  const uniforms = overrides.get(id);\n  uniforms.set(valuePath, value);\n};\n\n/**\n * Apply overrides to a specific model's uniforms\n */\nexport const getOverrides = (id, uniforms) => {\n  if (!window.__SEER_INITIALIZED__ || !id) {\n    return;\n  }\n\n  const overs = overrides.get(id);\n  if (!overs) {\n    return;\n  }\n\n  overs.forEach((value, valuePath) => {\n    recursiveSet(uniforms, valuePath, value);\n  });\n};\n\n/**\n * Listen for luma.gl edit events\n */\nseer.listenFor('luma.gl', payload => {\n  const model = models[payload.itemKey];\n  if (!model || payload.type !== 'edit' || payload.valuePath[0] !== 'uniforms') {\n    return;\n  }\n\n  const valuePath = payload.valuePath.slice(1);\n  setOverride(payload.itemKey, valuePath, payload.value);\n\n  const uniforms = model.getUniforms();\n  recursiveSet(uniforms, valuePath, payload.value);\n  model.setUniforms(uniforms);\n});\n"]}