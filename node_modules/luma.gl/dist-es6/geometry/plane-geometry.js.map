{"version":3,"sources":["../../src/geometry/plane-geometry.js"],"names":["Geometry","uid","PlaneGeometry","opts","type","offset","flipCull","unpack","id","coords","split","c1len","c2len","subdivisions1","subdivisions2","numVertices","positions","Float32Array","normals","texCoords","i2","i3","z","x","u","v","numVertsAcross","indices","Uint16Array","index","positions2","length","normals2","texCoords2","undefined","attributes","Object","assign"],"mappings":"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","file":"plane-geometry.js","sourcesContent":["import Geometry from './geometry';\nimport {uid} from '../utils';\n\nexport default class PlaneGeometry extends Geometry {\n\n  // Primitives inspired by TDL http://code.google.com/p/webglsamples/,\n  // copyright 2011 Google Inc. new BSD License\n  // (http://www.opensource.org/licenses/bsd-license.php).\n  /* eslint-disable max-statements, complexity */\n  /* eslint-disable complexity, max-statements */\n  constructor(opts = {}) {\n    const {\n      type = 'x,y',\n      offset = 0,\n      flipCull = false,\n      unpack = false,\n      id = uid('plane-geometry')\n    } = opts;\n\n    const coords = type.split(',');\n    // width, height\n    let c1len = opts[`${coords[0]}len`];\n    const c2len = opts[`${coords[1]}len`];\n    // subdivisionsWidth, subdivisionsDepth\n    const subdivisions1 = opts[`n${coords[0]}`] || 1;\n    const subdivisions2 = opts[`n${coords[1]}`] || 1;\n    const numVertices = (subdivisions1 + 1) * (subdivisions2 + 1);\n\n    let positions = new Float32Array(numVertices * 3);\n    let normals = new Float32Array(numVertices * 3);\n    let texCoords = new Float32Array(numVertices * 2);\n\n    if (flipCull) {\n      c1len = -c1len;\n    }\n\n    let i2 = 0;\n    let i3 = 0;\n    for (let z = 0; z <= subdivisions2; z++) {\n      for (let x = 0; x <= subdivisions1; x++) {\n        const u = x / subdivisions1;\n        const v = z / subdivisions2;\n        texCoords[i2 + 0] = flipCull ? 1 - u : u;\n        texCoords[i2 + 1] = v;\n\n        switch (type) {\n        case 'x,y':\n          positions[i3 + 0] = c1len * u - c1len * 0.5;\n          positions[i3 + 1] = c2len * v - c2len * 0.5;\n          positions[i3 + 2] = offset;\n\n          normals[i3 + 0] = 0;\n          normals[i3 + 1] = 0;\n          normals[i3 + 2] = flipCull ? 1 : -1;\n          break;\n\n        case 'x,z':\n          positions[i3 + 0] = c1len * u - c1len * 0.5;\n          positions[i3 + 1] = offset;\n          positions[i3 + 2] = c2len * v - c2len * 0.5;\n\n          normals[i3 + 0] = 0;\n          normals[i3 + 1] = flipCull ? 1 : -1;\n          normals[i3 + 2] = 0;\n          break;\n\n        case 'y,z':\n          positions[i3 + 0] = offset;\n          positions[i3 + 1] = c1len * u - c1len * 0.5;\n          positions[i3 + 2] = c2len * v - c2len * 0.5;\n\n          normals[i3 + 0] = flipCull ? 1 : -1;\n          normals[i3 + 1] = 0;\n          normals[i3 + 2] = 0;\n          break;\n\n        default:\n          break;\n        }\n\n        i2 += 2;\n        i3 += 3;\n      }\n    }\n\n    const numVertsAcross = subdivisions1 + 1;\n    let indices = new Uint16Array(subdivisions1 * subdivisions2 * 6);\n\n    for (let z = 0; z < subdivisions2; z++) {\n      for (let x = 0; x < subdivisions1; x++) {\n        const index = (z * subdivisions1 + x) * 6;\n        // Make triangle 1 of quad.\n        indices[index + 0] = (z + 0) * numVertsAcross + x;\n        indices[index + 1] = (z + 1) * numVertsAcross + x;\n        indices[index + 2] = (z + 0) * numVertsAcross + x + 1;\n\n        // Make triangle 2 of quad.\n        indices[index + 3] = (z + 1) * numVertsAcross + x;\n        indices[index + 4] = (z + 1) * numVertsAcross + x + 1;\n        indices[index + 5] = (z + 0) * numVertsAcross + x + 1;\n      }\n    }\n\n    // Optionally, unpack indexed geometry\n    if (unpack) {\n      const positions2 = new Float32Array(indices.length * 3);\n      const normals2 = new Float32Array(indices.length * 3);\n      const texCoords2 = new Float32Array(indices.length * 2);\n\n      for (let x = 0; x < indices.length; ++x) {\n        const index = indices[x];\n        positions2[x * 3 + 0] = positions[index * 3 + 0];\n        positions2[x * 3 + 1] = positions[index * 3 + 1];\n        positions2[x * 3 + 2] = positions[index * 3 + 2];\n        normals2[x * 3 + 0] = normals[index * 3 + 0];\n        normals2[x * 3 + 1] = normals[index * 3 + 1];\n        normals2[x * 3 + 2] = normals[index * 3 + 2];\n        texCoords2[x * 2 + 0] = texCoords[index * 2 + 0];\n        texCoords2[x * 2 + 1] = texCoords[index * 2 + 1];\n      }\n\n      positions = positions2;\n      normals = normals2;\n      texCoords = texCoords2;\n      indices = undefined;\n    }\n\n    const attributes = {\n      positions,\n      normals,\n      texCoords\n    };\n\n    if (indices) {\n      attributes.indices = indices;\n    }\n\n    super(Object.assign({}, opts, {attributes, id}));\n  }\n}\n"]}