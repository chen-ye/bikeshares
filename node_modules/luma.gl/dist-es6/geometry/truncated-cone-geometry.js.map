{"version":3,"sources":["../../src/geometry/truncated-cone-geometry.js"],"names":["Geometry","TruncatedConeGeometry","opts","bottomRadius","topRadius","height","nradial","nvertical","topCap","bottomCap","extra","numVertices","slant","Math","atan2","msin","sin","mcos","cos","mpi","PI","cosSlant","sinSlant","start","end","vertsAroundEdge","positions","Float32Array","normals","texCoords","indices","Uint16Array","i3","i2","i","v","y","ringRadius","j","index","Object","assign","attributes"],"mappings":"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","file":"truncated-cone-geometry.js","sourcesContent":["import Geometry from './geometry';\n\nexport default class TruncatedConeGeometry extends Geometry {\n\n  // Primitives inspired by TDL http://code.google.com/p/webglsamples/,\n  // copyright 2011 Google Inc. new BSD License\n  // (http://www.opensource.org/licenses/bsd-license.php).\n  /* eslint-disable max-statements, complexity */\n  constructor(opts = {}) {\n    const {\n      bottomRadius = 0,\n      topRadius = 0,\n      height = 1,\n      nradial = 10,\n      nvertical = 10,\n      topCap = false,\n      bottomCap = false\n    } = opts;\n\n    const extra = (topCap ? 2 : 0) + (bottomCap ? 2 : 0);\n    const numVertices = (nradial + 1) * (nvertical + 1 + extra);\n\n    const slant = Math.atan2(bottomRadius - topRadius, height);\n    const msin = Math.sin;\n    const mcos = Math.cos;\n    const mpi = Math.PI;\n    const cosSlant = mcos(slant);\n    const sinSlant = msin(slant);\n    const start = topCap ? -2 : 0;\n    const end = nvertical + (bottomCap ? 2 : 0);\n    const vertsAroundEdge = nradial + 1;\n\n    const positions = new Float32Array(numVertices * 3);\n    const normals = new Float32Array(numVertices * 3);\n    const texCoords = new Float32Array(numVertices * 2);\n    const indices = new Uint16Array(nradial * (nvertical + extra) * 6);\n\n    let i3 = 0;\n    let i2 = 0;\n    for (let i = start; i <= end; i++) {\n      let v = i / nvertical;\n      let y = height * v;\n      let ringRadius;\n\n      if (i < 0) {\n        y = 0;\n        v = 1;\n        ringRadius = bottomRadius;\n      } else if (i > nvertical) {\n        y = height;\n        v = 1;\n        ringRadius = topRadius;\n      } else {\n        ringRadius = bottomRadius +\n          (topRadius - bottomRadius) * (i / nvertical);\n      }\n      if (i === -2 || i === nvertical + 2) {\n        ringRadius = 0;\n        v = 0;\n      }\n      y -= height / 2;\n      for (let j = 0; j < vertsAroundEdge; j++) {\n        const sin = msin(j * mpi * 2 / nradial);\n        const cos = mcos(j * mpi * 2 / nradial);\n\n        positions[i3 + 0] = sin * ringRadius;\n        positions[i3 + 1] = y;\n        positions[i3 + 2] = cos * ringRadius;\n\n        normals[i3 + 0] = (i < 0 || i > nvertical) ? 0 : (sin * cosSlant);\n        normals[i3 + 1] = (i < 0) ? -1 : (i > nvertical ? 1 : sinSlant);\n        normals[i3 + 2] = (i < 0 || i > nvertical) ? 0 : (cos * cosSlant);\n\n        texCoords[i2 + 0] = j / nradial;\n        texCoords[i2 + 1] = v;\n\n        i2 += 2;\n        i3 += 3;\n      }\n    }\n\n    for (let i = 0; i < nvertical + extra; i++) {\n      for (let j = 0; j < nradial; j++) {\n        const index = (i * nradial + j) * 6;\n        indices[index + 0] = vertsAroundEdge * (i + 0) + 0 + j;\n        indices[index + 1] = vertsAroundEdge * (i + 0) + 1 + j;\n        indices[index + 2] = vertsAroundEdge * (i + 1) + 1 + j;\n        indices[index + 3] = vertsAroundEdge * (i + 0) + 0 + j;\n        indices[index + 4] = vertsAroundEdge * (i + 1) + 1 + j;\n        indices[index + 5] = vertsAroundEdge * (i + 1) + 0 + j;\n      }\n    }\n\n    super(Object.assign({}, opts, {\n      attributes: {\n        positions,\n        normals,\n        texCoords,\n        indices\n      }\n    }));\n  }\n}\n"]}