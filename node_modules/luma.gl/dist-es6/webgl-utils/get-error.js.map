{"version":3,"sources":["../../src/webgl-utils/get-error.js"],"names":["GL_NO_ERROR","GL_INVALID_ENUM","GL_INVALID_VALUE","GL_INVALID_OPERATION","GL_OUT_OF_MEMORY","GL_CONTEXT_LOST_WEBGL","GL_INVALID_FRAMEBUFFER_OPERATION","GL_ERROR_MESSAGES","glGetErrorMessage","gl","glError","glGetError","errorStack","getError","push","length","Error","join","glCheckError","debug","error"],"mappings":";;;;AAAA;AACA;;AAEA;AACA,IAAMA,cAAc,CAApB,C,CAAuB;AACvB,IAAMC,kBAAkB,MAAxB,C,CAAgC;AAChC,IAAMC,mBAAmB,MAAzB,C,CAAiC;AACjC,IAAMC,uBAAuB,MAA7B,C,CAAqC;AACrC,IAAMC,mBAAmB,MAAzB,C,CAAiC;AACjC,IAAMC,wBAAwB,MAA9B,C,CAAsC;AACtC,IAAMC,mCAAmC,MAAzC;;AAEA;;AAEA,IAAMC,kFAIHF,qBAJG,EAIqB,oBAJrB,uCAMHJ,eANG,EAMe,mCANf,uCAQHC,gBARG,EAQgB,qBARhB,uCAUHC,oBAVG,EAUoB,yBAVpB,uCAaHG,gCAbG,EAagC,qCAbhC,uCAeHF,gBAfG,EAegB,qBAfhB,sBAAN;;AAkBA,SAASI,iBAAT,CAA2BC,EAA3B,EAA+BC,OAA/B,EAAwC;AACtC,SAAOH,kBAAkBG,OAAlB,8BAAqDA,OAA5D;AACD;;AAED;AACA,OAAO,SAASC,UAAT,CAAoBF,EAApB,EAAwB;AAC7B;AACA,MAAMG,aAAa,EAAnB;AACA,MAAIF,UAAUD,GAAGI,QAAH,EAAd;AACA,SAAOH,YAAYV,WAAnB,EAAgC;AAC9BY,eAAWE,IAAX,CAAgBN,kBAAkBC,EAAlB,EAAsBC,OAAtB,CAAhB;AACAA,cAAUD,GAAGI,QAAH,EAAV;AACD;AACD,SAAOD,WAAWG,MAAX,GAAoB,IAAIC,KAAJ,CAAUJ,WAAWK,IAAX,CAAgB,IAAhB,CAAV,CAApB,GAAuD,IAA9D;AACD;;AAED,OAAO,SAASC,YAAT,CAAsBT,EAAtB,EAA0B;AAC/B,MAAIA,GAAGU,KAAP,EAAc;AACZ,QAAMC,QAAQT,WAAWF,EAAX,CAAd;AACA,QAAIW,KAAJ,EAAW;AACT,YAAMA,KAAN;AACD;AACF;AACF","file":"get-error.js","sourcesContent":["// Helper definitions for validation of webgl parameters\n/* eslint-disable no-inline-comments, max-len */\n\n// Errors - Constants returned from getError().\nconst GL_NO_ERROR = 0; // Returned from getError.\nconst GL_INVALID_ENUM = 0x0500; //  Returned from getError.\nconst GL_INVALID_VALUE = 0x0501; //  Returned from getError.\nconst GL_INVALID_OPERATION = 0x0502; //  Returned from getError.\nconst GL_OUT_OF_MEMORY = 0x0505; //  Returned from getError.\nconst GL_CONTEXT_LOST_WEBGL = 0x9242; //  Returned from getError.\nconst GL_INVALID_FRAMEBUFFER_OPERATION = 0x0506;\n\n// GL errors\n\nconst GL_ERROR_MESSAGES = {\n  //  If the WebGL context is lost, this error is returned on the\n  // first call to getError. Afterwards and until the context has been\n  // restored, it returns gl.NO_ERROR.\n  [GL_CONTEXT_LOST_WEBGL]: 'WebGL context lost',\n  // An unacceptable value has been specified for an enumerated argument.\n  [GL_INVALID_ENUM]: 'WebGL invalid enumerated argument',\n  // A numeric argument is out of range.\n  [GL_INVALID_VALUE]: 'WebGL invalid value',\n  // The specified command is not allowed for the current state.\n  [GL_INVALID_OPERATION]: 'WebGL invalid operation',\n  // The currently bound framebuffer is not framebuffer complete\n  // when trying to render to or to read from it.\n  [GL_INVALID_FRAMEBUFFER_OPERATION]: 'WebGL invalid framebuffer operation',\n  // Not enough memory is left to execute the command.\n  [GL_OUT_OF_MEMORY]: 'WebGL out of memory'\n};\n\nfunction glGetErrorMessage(gl, glError) {\n  return GL_ERROR_MESSAGES[glError] || `WebGL unknown error ${glError}`;\n}\n\n// Returns an Error representing the Latest webGl error or null\nexport function glGetError(gl) {\n  // Loop to ensure all errors are cleared\n  const errorStack = [];\n  let glError = gl.getError();\n  while (glError !== GL_NO_ERROR) {\n    errorStack.push(glGetErrorMessage(gl, glError));\n    glError = gl.getError();\n  }\n  return errorStack.length ? new Error(errorStack.join('\\n')) : null;\n}\n\nexport function glCheckError(gl) {\n  if (gl.debug) {\n    const error = glGetError(gl);\n    if (error) {\n      throw error;\n    }\n  }\n}\n"]}