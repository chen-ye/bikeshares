{"version":3,"sources":["../../../../src/experimental/probe/test/probe-spec.js"],"names":["Probe","test","getInstance","isEnabled","isPrintEnabled","ignoreEnvironment","probe","log","getLog","row","assert","equals","length","equal","name","total","delta","end","setLevel","probe1","probe2","probe3","deepEqual","map","level","disable","sample","sample1","sample2","sample3","averageTime","count","i","fps","fps1","fps2","fps3","cycles","strictEqual","enable","configure","foo","getOption"],"mappings":";;AAAA;AACA,OAAOA,KAAP,MAAkB,cAAlB;AACA,OAAOC,IAAP,MAAiB,MAAjB;;AAEA,SAASC,WAAT,GAAuB;AACrB,SAAO,IAAIF,KAAJ,CAAU;AACfG,eAAW,IADI;AAEfC,oBAAgB,KAFD;AAGfC,uBAAmB;AAHJ,GAAV,CAAP;AAKD;;AAEDJ,KAAK,aAAL,EAAoB,kBAAU;AAC5B,MAAMK,QAAQJ,aAAd;;AAEAI,QAAMA,KAAN,CAAY,MAAZ;;AAEA,MAAMC,MAAMD,MAAME,MAAN,EAAZ;AACA,MAAMC,MAAMF,IAAI,CAAJ,CAAZ;;AAEAG,SAAOC,MAAP,CAAcJ,IAAIK,MAAlB,EAA0B,CAA1B,EACE,qBADF;AAEAF,SAAOG,KAAP,CAAaJ,IAAIK,IAAjB,EAAuB,MAAvB,EACE,aADF;AAEAJ,SAAOG,KAAP,SAAoBJ,IAAIM,KAAxB,GAA+B,QAA/B,EAAyC,cAAzC;AACAL,SAAOG,KAAP,SAAoBJ,IAAIO,KAAxB,GAA+B,QAA/B,EAAyC,cAAzC;;AAEAN,SAAOO,GAAP;AACD,CAhBD;;AAkBAhB,KAAK,6BAAL,EAAoC,kBAAU;AAC5C,MAAMK,QAAQJ,cAAcgB,QAAd,CAAuB,CAAvB,CAAd;;AAEAZ,QAAMA,KAAN,CAAY,OAAZ;AACAA,QAAMa,MAAN,CAAa,OAAb;AACAb,QAAMc,MAAN,CAAa,OAAb;AACAd,QAAMe,MAAN,CAAa,OAAb;;AAEA,MAAMd,MAAMD,MAAME,MAAN,EAAZ;;AAEAE,SAAOC,MAAP,CAAcJ,IAAIK,MAAlB,EAA0B,CAA1B,EACE,sBADF;AAEAF,SAAOY,SAAP,CACEf,IAAIgB,GAAJ,CAAQ;AAAA,WAAOd,IAAIe,KAAX;AAAA,GAAR,CADF,EAEE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAFF,EAGE,uBAHF;AAIAd,SAAOY,SAAP,CACEf,IAAIgB,GAAJ,CAAQ;AAAA,WAAOd,IAAIK,IAAX;AAAA,GAAR,CADF,EAEE,CAAC,OAAD,EAAU,OAAV,EAAmB,OAAnB,EAA4B,OAA5B,CAFF,EAGE,sBAHF;;AAhB4C;AAAA;AAAA;;AAAA;AAqB5C,yBAAkBP,GAAlB,8HAAuB;AAAA,UAAZE,GAAY;;AACrBC,aAAOG,KAAP,SAAoBJ,IAAIM,KAAxB,GAA+B,QAA/B,EAAyC,cAAzC;AACAL,aAAOG,KAAP,SAAoBJ,IAAIO,KAAxB,GAA+B,QAA/B,EAAyC,cAAzC;AACD;AAxB2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA0B5CN,SAAOO,GAAP;AACD,CA3BD;;AA6BAhB,KAAK,8CAAL,EAAqD,kBAAU;AAC7D,MAAMK,QAAQJ,cAAcgB,QAAd,CAAuB,CAAvB,CAAd;;AAEAZ,QAAMA,KAAN,CAAY,OAAZ;AACAA,QAAMa,MAAN,CAAa,OAAb;AACAb,QAAMc,MAAN,CAAa,OAAb;AACAd,QAAMe,MAAN,CAAa,OAAb;;AAEA,MAAMd,MAAMD,MAAME,MAAN,EAAZ;;AAEAE,SAAOC,MAAP,CAAcJ,IAAIK,MAAlB,EAA0B,CAA1B,EACE,sBADF;AAEAF,SAAOY,SAAP,CACEf,IAAIgB,GAAJ,CAAQ;AAAA,WAAOd,IAAIe,KAAX;AAAA,GAAR,CADF,EAEE,CAAC,CAAD,EAAI,CAAJ,CAFF,EAGE,uBAHF;;AAKAd,SAAOO,GAAP;AACD,CAlBD;;AAoBAhB,KAAK,wBAAL,EAA+B,kBAAU;AACvC,MAAMK,QAAQJ,cAAcuB,OAAd,EAAd;;AAEAnB,QAAMA,KAAN,CAAY,OAAZ;AACAA,QAAMa,MAAN,CAAa,OAAb;AACAb,QAAMc,MAAN,CAAa,OAAb;AACAd,QAAMe,MAAN,CAAa,OAAb;;AAEA,MAAMd,MAAMD,MAAME,MAAN,EAAZ;;AAEAE,SAAOC,MAAP,CAAcJ,IAAIK,MAAlB,EAA0B,CAA1B,EACE,gBADF;;AAGAF,SAAOO,GAAP;AACD,CAdD;;AAgBAhB,KAAK,8BAAL,EAAqC,kBAAU;AAC7C,MAAMK,QAAQJ,cAAcgB,QAAd,CAAuB,CAAvB,CAAd;;AAEAZ,QAAMoB,MAAN,CAAa,OAAb;AACApB,QAAMqB,OAAN,CAAc,OAAd;AACArB,QAAMsB,OAAN,CAAc,OAAd;AACAtB,QAAMuB,OAAN,CAAc,OAAd;;AAEA,MAAMtB,MAAMD,MAAME,MAAN,EAAZ;;AAEAE,SAAOC,MAAP,CAAcJ,IAAIK,MAAlB,EAA0B,CAA1B,EACE,sBADF;AAEAF,SAAOY,SAAP,CACEf,IAAIgB,GAAJ,CAAQ;AAAA,WAAOd,IAAIe,KAAX;AAAA,GAAR,CADF,EAEE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAFF,EAGE,uBAHF;AAIAd,SAAOY,SAAP,CACEf,IAAIgB,GAAJ,CAAQ;AAAA,WAAOd,IAAIK,IAAX;AAAA,GAAR,CADF,EAEE,CAAC,OAAD,EAAU,OAAV,EAAmB,OAAnB,EAA4B,OAA5B,CAFF,EAGE,sBAHF;;AAhB6C;AAAA;AAAA;;AAAA;AAqB7C,0BAAkBP,GAAlB,mIAAuB;AAAA,UAAZE,GAAY;;AACrBC,aAAOG,KAAP,SAAoBJ,IAAIM,KAAxB,GAA+B,QAA/B,EAAyC,cAAzC;AACAL,aAAOG,KAAP,SAAoBJ,IAAIO,KAAxB,GAA+B,QAA/B,EAAyC,cAAzC;AACAN,aAAOG,KAAP,SAAoBJ,IAAIqB,WAAxB,GAAqC,QAArC,EAA+C,iBAA/C;AACD;AAzB4C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA2B7CpB,SAAOO,GAAP;AACD,CA5BD;;AA8BAhB,KAAK,2BAAL,EAAkC,kBAAU;AAC1C,MAAMK,QAAQJ,cAAcgB,QAAd,CAAuB,CAAvB,CAAd;AACA,MAAMa,QAAQ,CAAd;;AAEA,OAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAID,KAApB,EAA2BC,GAA3B,EAAgC;AAC9B1B,UAAM2B,GAAN,CAAU,OAAV,EAAmB,EAACF,YAAD,EAAnB;AACAzB,UAAM4B,IAAN,CAAW,OAAX,EAAoB,EAACH,YAAD,EAApB;AACAzB,UAAM6B,IAAN,CAAW,OAAX,EAAoB,EAACJ,YAAD,EAApB;AACAzB,UAAM8B,IAAN,CAAW,OAAX,EAAoB,EAACL,YAAD,EAApB;AACD;;AAED,MAAMxB,MAAMD,MAAME,MAAN,EAAZ;;AAEAE,SAAOC,MAAP,CAAcJ,IAAIK,MAAlB,EAA0B,CAA1B,EACE,sBADF;AAEAF,SAAOY,SAAP,CACEf,IAAIgB,GAAJ,CAAQ;AAAA,WAAOd,IAAIe,KAAX;AAAA,GAAR,CADF,EAEE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAFF,EAGE,uBAHF;AAIAd,SAAOY,SAAP,CACEf,IAAIgB,GAAJ,CAAQ;AAAA,WAAOd,IAAIK,IAAX;AAAA,GAAR,CADF,EAEE,CAAC,OAAD,EAAU,OAAV,EAAmB,OAAnB,EAA4B,OAA5B,CAFF,EAGE,sBAHF;;AAnB0C;AAAA;AAAA;;AAAA;AAwB1C,0BAAkBP,GAAlB,mIAAuB;AAAA,UAAZE,GAAY;;AACrBC,aAAOG,KAAP,SAAoBJ,IAAIM,KAAxB,GAA+B,QAA/B,EAAyC,cAAzC;AACAL,aAAOG,KAAP,SAAoBJ,IAAIO,KAAxB,GAA+B,QAA/B,EAAyC,cAAzC;AACAN,aAAOG,KAAP,SAAoBJ,IAAIwB,GAAxB,GAA6B,QAA7B,EAAuC,YAAvC;AACD;AA5ByC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA8B1CvB,SAAOO,GAAP;AACD,CA/BD;;AAiCAhB,KAAK,gCAAL,EAAuC,kBAAU;AAC/C,MAAMK,QAAQJ,cAAcgB,QAAd,CAAuB,CAAvB,CAAd;AACA,MAAMa,QAAQ,CAAd;AACA,MAAMM,SAAS,CAAf;;AAEA,OAAK,IAAIL,IAAI,CAAb,EAAgBA,IAAID,QAAQM,MAA5B,EAAoCL,GAApC,EAAyC;AACvC1B,UAAM2B,GAAN,CAAU,MAAV,EAAkB,EAACF,YAAD,EAAlB;AACD;;AAED,MAAMxB,MAAMD,MAAME,MAAN,EAAZ;;AAEAE,SAAOC,MAAP,CAAcJ,IAAIK,MAAlB,EAA0ByB,MAA1B,EACE,sBADF;;AAX+C;AAAA;AAAA;;AAAA;AAc/C,0BAAkB9B,GAAlB,mIAAuB;AAAA,UAAZE,GAAY;;AACrBC,aAAOG,KAAP,SAAoBJ,IAAIM,KAAxB,GAA+B,QAA/B,EAAyC,cAAzC;AACAL,aAAOG,KAAP,SAAoBJ,IAAIO,KAAxB,GAA+B,QAA/B,EAAyC,cAAzC;AACAN,aAAOG,KAAP,SAAoBJ,IAAIwB,GAAxB,GAA6B,QAA7B,EAAuC,YAAvC;AACD;AAlB8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAoB/CvB,SAAOO,GAAP;AACD,CArBD;;AAuBAhB,KAAK,8BAAL,EAAqC,kBAAU;AAC7C,MAAMK,QAAQJ,aAAd;;AAEAQ,SAAO4B,WAAP,CAAmBhC,MAAMH,SAAN,EAAnB,EAAsC,IAAtC,EACE,4BADF;;AAGAG,QAAMmB,OAAN;AACAnB,QAAMA,KAAN,CAAY,eAAZ;;AAEAI,SAAO4B,WAAP,CAAmBhC,MAAMH,SAAN,EAAnB,EAAsC,KAAtC,EACE,4BADF;AAEAO,SAAO4B,WAAP,CAAmBhC,MAAME,MAAN,GAAeI,MAAlC,EAA0C,CAA1C,EACE,eADF;;AAGAN,QAAMiC,MAAN;AACAjC,QAAMA,KAAN,CAAY,cAAZ;;AAEAI,SAAO4B,WAAP,CAAmBhC,MAAMH,SAAN,EAAnB,EAAsC,IAAtC,EACE,4BADF;AAEAO,SAAO4B,WAAP,CAAmBhC,MAAME,MAAN,GAAeI,MAAlC,EAA0C,CAA1C,EACE,YADF;AAEAF,SAAO4B,WAAP,CAAmBhC,MAAME,MAAN,GAAe,CAAf,EAAkBM,IAArC,EAA2C,cAA3C,EACE,2BADF;;AAGAJ,SAAOO,GAAP;AACD,CAzBD;;AA2BAhB,KAAK,iBAAL,EAAwB,kBAAU;AAChC,MAAMK,QAAQJ,cACXsC,SADW,CACD;AACThB,WAAO,CADE;AAETiB,SAAK;AAFI,GADC,CAAd;;AAMA/B,SAAO4B,WAAP,CAAmBhC,MAAMoC,SAAN,CAAgB,OAAhB,CAAnB,EAA6C,CAA7C,EACE,kBADF;AAEAhC,SAAO4B,WAAP,CAAmBhC,MAAMoC,SAAN,CAAgB,KAAhB,CAAnB,EAA2C,KAA3C,EACE,oBADF;;AAGAhC,SAAOO,GAAP;AACD,CAbD","file":"probe-spec.js","sourcesContent":["/* eslint-disable max-statements */\nimport Probe from '../src/probe';\nimport test from 'tape';\n\nfunction getInstance() {\n  return new Probe({\n    isEnabled: true,\n    isPrintEnabled: false,\n    ignoreEnvironment: true\n  });\n}\n\ntest('Probe#probe', assert => {\n  const probe = getInstance();\n\n  probe.probe('test');\n\n  const log = probe.getLog();\n  const row = log[0];\n\n  assert.equals(log.length, 1,\n    'Expected row logged');\n  assert.equal(row.name, 'test',\n    'Name logged');\n  assert.equal(typeof row.total, 'number', 'Start is set');\n  assert.equal(typeof row.delta, 'number', 'Delta is set');\n\n  assert.end();\n});\n\ntest('Probe#probe - level methods', assert => {\n  const probe = getInstance().setLevel(3);\n\n  probe.probe('test0');\n  probe.probe1('test1');\n  probe.probe2('test2');\n  probe.probe3('test3');\n\n  const log = probe.getLog();\n\n  assert.equals(log.length, 4,\n    'Expected rows logged');\n  assert.deepEqual(\n    log.map(row => row.level),\n    [1, 1, 2, 3],\n    'Levels match expected');\n  assert.deepEqual(\n    log.map(row => row.name),\n    ['test0', 'test1', 'test2', 'test3'],\n    'Names match expected');\n\n  for (const row of log) {\n    assert.equal(typeof row.total, 'number', 'Start is set');\n    assert.equal(typeof row.delta, 'number', 'Delta is set');\n  }\n\n  assert.end();\n});\n\ntest('Probe#probe - level methods, lower level set', assert => {\n  const probe = getInstance().setLevel(1);\n\n  probe.probe('test0');\n  probe.probe1('test1');\n  probe.probe2('test2');\n  probe.probe3('test3');\n\n  const log = probe.getLog();\n\n  assert.equals(log.length, 2,\n    'Expected rows logged');\n  assert.deepEqual(\n    log.map(row => row.level),\n    [1, 1],\n    'Levels match expected');\n\n  assert.end();\n});\n\ntest('Probe#probe - disabled', assert => {\n  const probe = getInstance().disable();\n\n  probe.probe('test0');\n  probe.probe1('test1');\n  probe.probe2('test2');\n  probe.probe3('test3');\n\n  const log = probe.getLog();\n\n  assert.equals(log.length, 0,\n    'No rows logged');\n\n  assert.end();\n});\n\ntest('Probe#sample - level methods', assert => {\n  const probe = getInstance().setLevel(3);\n\n  probe.sample('test0');\n  probe.sample1('test1');\n  probe.sample2('test2');\n  probe.sample3('test3');\n\n  const log = probe.getLog();\n\n  assert.equals(log.length, 4,\n    'Expected rows logged');\n  assert.deepEqual(\n    log.map(row => row.level),\n    [1, 1, 2, 3],\n    'Levels match expected');\n  assert.deepEqual(\n    log.map(row => row.name),\n    ['test0', 'test1', 'test2', 'test3'],\n    'Names match expected');\n\n  for (const row of log) {\n    assert.equal(typeof row.total, 'number', 'Start is set');\n    assert.equal(typeof row.delta, 'number', 'Delta is set');\n    assert.equal(typeof row.averageTime, 'number', 'Avg time is set');\n  }\n\n  assert.end();\n});\n\ntest('Probe#fps - level methods', assert => {\n  const probe = getInstance().setLevel(3);\n  const count = 3;\n\n  for (let i = 0; i < count; i++) {\n    probe.fps('test0', {count});\n    probe.fps1('test1', {count});\n    probe.fps2('test2', {count});\n    probe.fps3('test3', {count});\n  }\n\n  const log = probe.getLog();\n\n  assert.equals(log.length, 4,\n    'Expected rows logged');\n  assert.deepEqual(\n    log.map(row => row.level),\n    [1, 1, 2, 3],\n    'Levels match expected');\n  assert.deepEqual(\n    log.map(row => row.name),\n    ['test0', 'test1', 'test2', 'test3'],\n    'Names match expected');\n\n  for (const row of log) {\n    assert.equal(typeof row.total, 'number', 'Start is set');\n    assert.equal(typeof row.delta, 'number', 'Delta is set');\n    assert.equal(typeof row.fps, 'number', 'FPS is set');\n  }\n\n  assert.end();\n});\n\ntest('Probe#fps - log once per count', assert => {\n  const probe = getInstance().setLevel(3);\n  const count = 3;\n  const cycles = 4;\n\n  for (let i = 0; i < count * cycles; i++) {\n    probe.fps('test', {count});\n  }\n\n  const log = probe.getLog();\n\n  assert.equals(log.length, cycles,\n    'Expected rows logged');\n\n  for (const row of log) {\n    assert.equal(typeof row.total, 'number', 'Start is set');\n    assert.equal(typeof row.delta, 'number', 'Delta is set');\n    assert.equal(typeof row.fps, 'number', 'FPS is set');\n  }\n\n  assert.end();\n});\n\ntest('Probe#disable / Probe#enable', assert => {\n  const probe = getInstance();\n\n  assert.strictEqual(probe.isEnabled(), true,\n    'isEnabled matches expected');\n\n  probe.disable();\n  probe.probe('test_disabled');\n\n  assert.strictEqual(probe.isEnabled(), false,\n    'isEnabled matches expected');\n  assert.strictEqual(probe.getLog().length, 0,\n    'No row logged');\n\n  probe.enable();\n  probe.probe('test_enabled');\n\n  assert.strictEqual(probe.isEnabled(), true,\n    'isEnabled matches expected');\n  assert.strictEqual(probe.getLog().length, 1,\n    'Row logged');\n  assert.strictEqual(probe.getLog()[0].name, 'test_enabled',\n    'Row name matches expected');\n\n  assert.end();\n});\n\ntest('Probe#configure', assert => {\n  const probe = getInstance()\n    .configure({\n      level: 2,\n      foo: 'bar'\n    });\n\n  assert.strictEqual(probe.getOption('level'), 2,\n    'Set known option');\n  assert.strictEqual(probe.getOption('foo'), 'bar',\n    'Set unknown option');\n\n  assert.end();\n});\n"]}