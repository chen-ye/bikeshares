{"version":3,"sources":["../../src/utils/typed-array-utils.js"],"names":["GL_BYTE","GL_UNSIGNED_BYTE","GL_SHORT","GL_UNSIGNED_SHORT","GL_INT","GL_UNSIGNED_INT","GL_FLOAT","GL_UNSIGNED_SHORT_4_4_4_4","GL_UNSIGNED_SHORT_5_5_5_1","GL_UNSIGNED_SHORT_5_6_5","ERR_TYPE_DEDUCTION","getGLTypeFromTypedArray","arrayOrType","type","ArrayBuffer","isView","constructor","Float32Array","Uint16Array","Uint32Array","Uint8Array","Uint8ClampedArray","Int8Array","Int16Array","Int32Array","Error","getTypedArrayFromGLType","glType","clamped"],"mappings":"AAAA;AACA,IAAMA,UAAU,MAAhB;AACA,IAAMC,mBAAmB,MAAzB;AACA,IAAMC,WAAW,MAAjB;AACA,IAAMC,oBAAoB,MAA1B;AACA,IAAMC,SAAS,MAAf;AACA,IAAMC,kBAAkB,MAAxB;AACA,IAAMC,WAAW,MAAjB;AACA,IAAMC,4BAA4B,MAAlC;AACA,IAAMC,4BAA4B,MAAlC;AACA,IAAMC,0BAA0B,MAAhC;;AAEA,IAAMC,qBAAqB,+CAA3B;;AAEA;AACA;AACA,OAAO,SAASC,uBAAT,CAAiCC,WAAjC,EAA8C;AACnD;AACA,MAAMC,OAAOC,YAAYC,MAAZ,CAAmBH,WAAnB,IAAkCA,YAAYI,WAA9C,GAA4DJ,WAAzE;AACA,UAAQC,IAAR;AACA,SAAKI,YAAL;AAAmB,aAAOX,QAAP;AACnB,SAAKY,WAAL;AAAkB,aAAOf,iBAAP;AAClB,SAAKgB,WAAL;AAAkB,aAAOd,eAAP;AAClB,SAAKe,UAAL;AAAiB,aAAOnB,gBAAP;AACjB,SAAKoB,iBAAL;AAAwB,aAAOpB,gBAAP;AACxB,SAAKqB,SAAL;AAAgB,aAAOtB,OAAP;AAChB,SAAKuB,UAAL;AAAiB,aAAOrB,QAAP;AACjB,SAAKsB,UAAL;AAAiB,aAAOpB,MAAP;AACjB;AACE,YAAM,IAAIqB,KAAJ,CAAUf,kBAAV,CAAN;AAVF;AAYD;;AAED;AACA;;AAEA;AACA,OAAO,SAASgB,uBAAT,CAAiCC,MAAjC,EAAgE;AAAA,iFAAJ,EAAI;AAAA,0BAAtBC,OAAsB;AAAA,MAAtBA,OAAsB,gCAAZ,IAAY;;AACrE;AACA,UAAQD,MAAR;AACA,SAAKrB,QAAL;AACE,aAAOW,YAAP;AACF,SAAKd,iBAAL;AACA,SAAKM,uBAAL;AACA,SAAKF,yBAAL;AACA,SAAKC,yBAAL;AACE,aAAOU,WAAP;AACF,SAAKb,eAAL;AACE,aAAOc,WAAP;AACF,SAAKlB,gBAAL;AACE,aAAO2B,UAAUP,iBAAV,GAA8BD,UAArC;AACF,SAAKpB,OAAL;AACE,aAAOsB,SAAP;AACF,SAAKpB,QAAL;AACE,aAAOqB,UAAP;AACF,SAAKnB,MAAL;AACE,aAAOoB,UAAP;AACF;AACE,YAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;AAnBF;AAqBD;AACD","file":"typed-array-utils.js","sourcesContent":["// GL Constants\nconst GL_BYTE = 0x1400;\nconst GL_UNSIGNED_BYTE = 0x1401;\nconst GL_SHORT = 0x1402;\nconst GL_UNSIGNED_SHORT = 0x1403;\nconst GL_INT = 0x1404;\nconst GL_UNSIGNED_INT = 0x1405;\nconst GL_FLOAT = 0x1406;\nconst GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;\nconst GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;\nconst GL_UNSIGNED_SHORT_5_6_5 = 0x8363;\n\nconst ERR_TYPE_DEDUCTION = 'Failed to deduce GL constant from typed array';\n\n// Converts TYPED ARRAYS to corresponding GL constant\n// Used to auto deduce gl parameter types\nexport function getGLTypeFromTypedArray(arrayOrType) {\n  // If typed array, look up constructor\n  const type = ArrayBuffer.isView(arrayOrType) ? arrayOrType.constructor : arrayOrType;\n  switch (type) {\n  case Float32Array: return GL_FLOAT;\n  case Uint16Array: return GL_UNSIGNED_SHORT;\n  case Uint32Array: return GL_UNSIGNED_INT;\n  case Uint8Array: return GL_UNSIGNED_BYTE;\n  case Uint8ClampedArray: return GL_UNSIGNED_BYTE;\n  case Int8Array: return GL_BYTE;\n  case Int16Array: return GL_SHORT;\n  case Int32Array: return GL_INT;\n  default:\n    throw new Error(ERR_TYPE_DEDUCTION);\n  }\n}\n\n// Converts GL constant to corresponding TYPED ARRAY\n// Used to auto deduce gl parameter types\n\n/* eslint-disable complexity */\nexport function getTypedArrayFromGLType(glType, {clamped = true} = {}) {\n  // Sorted in some order of likelihood to reduce amount of comparisons\n  switch (glType) {\n  case GL_FLOAT:\n    return Float32Array;\n  case GL_UNSIGNED_SHORT:\n  case GL_UNSIGNED_SHORT_5_6_5:\n  case GL_UNSIGNED_SHORT_4_4_4_4:\n  case GL_UNSIGNED_SHORT_5_5_5_1:\n    return Uint16Array;\n  case GL_UNSIGNED_INT:\n    return Uint32Array;\n  case GL_UNSIGNED_BYTE:\n    return clamped ? Uint8ClampedArray : Uint8Array;\n  case GL_BYTE:\n    return Int8Array;\n  case GL_SHORT:\n    return Int16Array;\n  case GL_INT:\n    return Int32Array;\n  default:\n    throw new Error('Failed to deduce typed array type from GL constant');\n  }\n}\n/* eslint-enable complexity */\n"]}