{"version":3,"sources":["../../src/core/animation-loop.js"],"names":["isBrowser","getPageLoadPromise","resizeDrawingBuffer","createGLContext","deleteGLContext","isWebGL","resetParameters","Framebuffer","requestAnimationFrame","callback","window","setTimeout","cancelAnimationFrame","timerId","clearTimeout","AnimationLoop","onCreateContext","opts","onDeleteContext","gl","onInitialize","onRender","onFinalize","glOptions","preserveDrawingBuffer","width","height","autoResizeViewport","autoResizeCanvas","autoResizeDrawingBuffer","useDevicePixelRatio","start","bind","stop","_renderFrame","setViewParameters","_onCreateContext","_onInitialize","_onRender","_onFinalize","_stopped","_animationFrameId","_startPromise","then","_createWebGLContext","_initializeCallbackData","_updateCallbackData","_resizeCanvasDrawingBuffer","_resizeViewport","_callbackData","_addCallbackData","appContext","_finalizeCallbackData","_onSetupFrame","_resizeFramebuffer","_setupFrame","tick","canvas","framebuffer","tock","aspect","Object","assign","Error","viewport","resize"],"mappings":"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","file":"animation-loop.js","sourcesContent":["/* global window, setTimeout, clearTimeout */\nimport {isBrowser} from '../utils';\nimport {getPageLoadPromise, resizeDrawingBuffer} from '../webgl-utils';\nimport {createGLContext, deleteGLContext, isWebGL, resetParameters} from '../webgl';\nimport {Framebuffer} from '../webgl';\n\n// Node.js polyfills for requestAnimationFrame and cancelAnimationFrame\nexport function requestAnimationFrame(callback) {\n  return isBrowser ? window.requestAnimationFrame(callback) : setTimeout(callback, 1000 / 60);\n}\n\nexport function cancelAnimationFrame(timerId) {\n  return isBrowser ? window.cancelAnimationFrame(timerId) : clearTimeout(timerId);\n}\n\nexport default class AnimationLoop {\n  /*\n   * @param {HTMLCanvasElement} canvas - if provided, width and height will be passed to context\n   */\n  constructor({\n    onCreateContext = opts => createGLContext(opts),\n    onDeleteContext = gl => deleteGLContext(gl),\n    onInitialize = () => {},\n    onRender = () => {},\n    onFinalize = () => {},\n\n    gl = null,\n    glOptions = {\n      preserveDrawingBuffer: true\n    },\n    width = null,\n    height = null,\n\n    // view parameters - can be changed for each start call\n    autoResizeViewport = true,\n    autoResizeCanvas = true,\n    autoResizeDrawingBuffer = true,\n    useDevicePixelRatio = true\n  } = {}) {\n    this.start = this.start.bind(this);\n    this.stop = this.stop.bind(this);\n    this._renderFrame = this._renderFrame.bind(this);\n\n    this.setViewParameters({\n      autoResizeViewport,\n      autoResizeCanvas,\n      autoResizeDrawingBuffer,\n      useDevicePixelRatio\n    });\n\n    this._onCreateContext = onCreateContext;\n    this.glOptions = glOptions;\n\n    this._onInitialize = onInitialize;\n    this._onRender = onRender;\n    this._onFinalize = onFinalize;\n\n    this.width = width;\n    this.height = height;\n\n    this.gl = gl;\n\n    return this;\n  }\n\n  // Update parameters (TODO - should these be specified in `start`?)\n  setViewParameters({\n    autoResizeDrawingBuffer = true,\n    autoResizeCanvas = true,\n    autoResizeViewport = true,\n    useDevicePixelRatio = true\n  }) {\n    this.autoResizeViewport = autoResizeViewport;\n    this.autoResizeCanvas = autoResizeCanvas;\n    this.autoResizeDrawingBuffer = autoResizeDrawingBuffer;\n    this.useDevicePixelRatio = useDevicePixelRatio;\n    return this;\n  }\n\n  // Starts a render loop if not already running\n  // @param {Object} context - contains frame specific info (E.g. tick, width, height, etc)\n  start(opts = {}) {\n    this._stopped = false;\n    // console.debug(`Starting ${this.constructor.name}`);\n    if (!this._animationFrameId) {\n      // Wait for start promise before rendering frame\n      this._startPromise = getPageLoadPromise()\n      .then(() => {\n        if (this._stopped) {\n          return null;\n        }\n\n        // Create the WebGL context\n        this._createWebGLContext(opts);\n\n        // Initialize the callback data\n        this._initializeCallbackData();\n        this._updateCallbackData();\n\n        // Default viewport setup, in case onInitialize wants to render\n        this._resizeCanvasDrawingBuffer();\n        this._resizeViewport();\n\n        // Note: onIntialize can return a promise (in case it needs to load resources)\n        return this._onInitialize(this._callbackData);\n      })\n      .then(appContext => {\n        if (!this._stopped) {\n          this._addCallbackData(appContext || {});\n          if (appContext !== false && !this._animationFrameId) {\n            this._animationFrameId = requestAnimationFrame(this._renderFrame);\n          }\n        }\n      });\n\n    }\n    return this;\n  }\n\n  // Stops a render loop if already running, finalizing\n  stop() {\n    // console.debug(`Stopping ${this.constructor.name}`);\n    if (this._animationFrameId) {\n      this._finalizeCallbackData();\n      cancelAnimationFrame(this._animationFrameId);\n      this._animationFrameId = null;\n      this._stopped = true;\n    }\n    return this;\n  }\n\n  // PRIVATE METHODS\n\n  _setupFrame() {\n    if (this._onSetupFrame) {\n      // call callback\n      this._onSetupFrame(this._callbackData);\n      // end callback\n    } else {\n      this._resizeCanvasDrawingBuffer();\n      this._resizeViewport();\n      this._resizeFramebuffer();\n    }\n  }\n\n  /**\n   * @private\n   * Handles a render loop frame- updates context and calls the application\n   * callback\n   */\n  _renderFrame() {\n    this._setupFrame();\n    this._updateCallbackData();\n\n    // call callback\n    this._onRender(this._callbackData);\n    // end callback\n\n    // Increment tick\n    this._callbackData.tick++;\n\n    // Request another render frame (now )\n    this._animationFrameId = requestAnimationFrame(this._renderFrame);\n  }\n\n  // Initialize the  object that will be passed to app callbacks\n  _initializeCallbackData() {\n    this._callbackData = {\n      gl: this.gl,\n      canvas: this.gl.canvas,\n      framebuffer: this.framebuffer,\n      stop: this.stop,\n      // Initial values\n      tick: 0,\n      tock: 0\n    };\n  }\n\n  // Update the context object that will be passed to app callbacks\n  _updateCallbackData() {\n    // CallbackData width and height represent drawing buffer width and height\n    const {canvas} = this.gl;\n    this._callbackData.width = canvas.width;\n    this._callbackData.height = canvas.height;\n    this._callbackData.aspect = canvas.width / canvas.height;\n  }\n\n  _finalizeCallbackData() {\n    // call callback\n    this._onFinalize(this._callbackData);\n    // end callback\n  }\n\n  // Add application's data to the app context object\n  _addCallbackData(appContext) {\n    if (typeof appContext === 'object' && appContext !== null) {\n      this._callbackData = Object.assign({}, this._callbackData, appContext);\n    }\n  }\n\n  // Either uses supplied or existing context, or calls provided callback to create one\n  _createWebGLContext(opts) {\n    // Create the WebGL context if necessary\n    opts = Object.assign({}, opts, this.glOptions);\n    if (opts.gl) {\n      this.gl = opts.gl;\n    } else {\n      this.gl = this._onCreateContext(opts);\n    }\n    if (!isWebGL(this.gl)) {\n      throw new Error('AnimationLoop.onCreateContext - illegal context returned');\n    }\n\n    // Setup default framebuffer\n    this.framebuffer = new Framebuffer(this.gl);\n    // Reset the WebGL context.\n    resetParameters(this.gl);\n  }\n\n  // Default viewport setup\n  _resizeViewport() {\n    if (this.autoResizeViewport) {\n      this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n    }\n  }\n\n  _resizeFramebuffer() {\n    this.framebuffer.resize({width: this.gl.canvas.width, height: this.gl.canvas.height});\n  }\n\n  // Resize the render buffer of the canvas to match canvas client size\n  // Optionally multiplying with devicePixel ratio\n  _resizeCanvasDrawingBuffer() {\n    if (this.autoResizeDrawingBuffer) {\n      resizeDrawingBuffer(this.gl.canvas, {useDevicePixelRatio: this.useDevicePixelRatio});\n    }\n  }\n}\n"]}