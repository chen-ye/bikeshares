{"version":3,"sources":["../../../../src/packages/math/src/vector2.js"],"names":["MathArray","checkNumber","vec2_set","vec2_add","vec2_subtract","vec2_multiply","vec2_divide","vec2_scale","vec2_scaleAndAdd","vec2_negate","vec2_normalize","vec2_dot","vec2_cross","vec2_lerp","validateVector2","v","length","Number","isFinite","Vector2","x","y","Array","isArray","arguments","copy","set","check","vectors","vector","scale","coeff","operation","args","value"],"mappings":"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","file":"vector2.js","sourcesContent":["import MathArray from './math-array';\nimport {checkNumber} from './common';\n\n// gl-matrix is too big. Cherry-pick individual imports from stack.gl version\n/* eslint-disable camelcase */\nimport vec2_set from 'gl-vec2/set';\nimport vec2_add from 'gl-vec2/add';\nimport vec2_subtract from 'gl-vec2/subtract';\nimport vec2_multiply from 'gl-vec2/multiply';\nimport vec2_divide from 'gl-vec2/divide';\nimport vec2_scale from 'gl-vec2/scale';\nimport vec2_scaleAndAdd from 'gl-vec2/scaleAndAdd';\nimport vec2_negate from 'gl-vec2/negate';\nimport vec2_normalize from 'gl-vec2/normalize';\nimport vec2_dot from 'gl-vec2/dot';\nimport vec2_cross from 'gl-vec2/cross';\nimport vec2_lerp from 'gl-vec2/lerp';\n\nexport function validateVector2(v) {\n  return v.length === 2 &&\n    Number.isFinite(v[0]) && Number.isFinite(v[1]);\n}\n\nexport default class Vector2 extends MathArray {\n  // Creates a new, empty vec2\n  constructor(x = 0, y = 0) {\n    super();\n    if (Array.isArray(x) && arguments.length === 1) {\n      this.copy(x);\n    } else {\n      this.set(x, y);\n    }\n  }\n\n  set(x, y) {\n    vec2_set(this, x, y);\n    this.check();\n    return this;\n  }\n\n  // Getters/setters\n  /* eslint-disable no-multi-spaces, brace-style, no-return-assign */\n  get ELEMENTS() { return 2; }\n  get x()      { return this[0]; }\n  set x(value) { return this[0] = checkNumber(value); }\n  get y()      { return this[1]; }\n  set y(value) { return this[1] = checkNumber(value); }\n  /* eslint-disable no-multi-spaces, brace-style, no-return-assign */\n\n  add(...vectors) {\n    for (const vector of vectors) {\n      vec2_add(this, vector);\n    }\n    return this;\n  }\n\n  subtract(...vectors) {\n    for (const vector of vectors) {\n      vec2_subtract(this, vector);\n    }\n    this.check();\n    return this;\n  }\n\n  multiply(...vectors) {\n    for (const vector of vectors) {\n      vec2_multiply(this, vector);\n    }\n    this.check();\n    return this;\n  }\n\n  divide(...vectors) {\n    for (const vector of vectors) {\n      vec2_divide(this, vector);\n    }\n    this.check();\n    return this;\n  }\n\n  scale(scale) {\n    if (Number.isFinite(scale)) {\n      vec2_scale(this, this, scale);\n    }\n    this.check();\n    return this;\n  }\n\n  scaleAndAdd(vector, scale) {\n    vec2_scaleAndAdd(this, this, vector, scale);\n    this.check();\n    return this;\n  }\n\n  negate() {\n    vec2_negate(this, this);\n    this.check();\n    return this;\n  }\n\n  normalize() {\n    vec2_normalize(this, this);\n    this.check();\n    return this;\n  }\n\n  dot(vector) {\n    return vec2_dot(this, vector);\n  }\n\n  cross(vector) {\n    vec2_cross(this, this, vector);\n    this.check();\n    return this;\n  }\n\n  lerp(vector, coeff) {\n    vec2_lerp(this, this, vector, coeff);\n    this.check();\n    return this;\n  }\n\n  operation(operation, ...args) {\n    operation(this, this, ...args);\n    this.check();\n    return this;\n  }\n}\n"]}