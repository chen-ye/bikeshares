{"version":3,"sources":["../../../../src/packages/math/src/vector4.js"],"names":["MathArray","checkNumber","vec4_set","vec4_distance","vec4_add","vec4_subtract","vec4_multiply","vec4_divide","vec4_scale","vec4_scaleAndAdd","vec4_negate","vec4_inverse","vec4_normalize","vec4_dot","vec4_lerp","validateVector4","v","length","Number","isFinite","Vector4","x","y","z","w","Array","isArray","arguments","copy","set","check","vector","vectors","scale","coeff","value"],"mappings":";;;;;;;;AAAA,OAAOA,SAAP,MAAsB,cAAtB;AACA,SAAQC,WAAR,QAA0B,UAA1B;;AAEA;AACA;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,gBAAP,MAA6B,qBAA7B;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AACA,OAAOC,cAAP,MAA2B,mBAA3B;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA;AACA,OAAOC,SAAP,MAAsB,cAAtB;;AAEA,OAAO,SAASC,eAAT,CAAyBC,CAAzB,EAA4B;AACjC,SAAOA,EAAEC,MAAF,KAAa,CAAb,IACLC,OAAOC,QAAP,CAAgBH,EAAE,CAAF,CAAhB,CADK,IACoBE,OAAOC,QAAP,CAAgBH,EAAE,CAAF,CAAhB,CADpB,IAELE,OAAOC,QAAP,CAAgBH,EAAE,CAAF,CAAhB,CAFK,IAEoBE,OAAOC,QAAP,CAAgBH,EAAE,CAAF,CAAhB,CAF3B;AAGD;;IAEoBI,O;;;AACnB;AACA,qBAAwC;AAAA,QAA5BC,CAA4B,uEAAxB,CAAwB;AAAA,QAArBC,CAAqB,uEAAjB,CAAiB;AAAA,QAAdC,CAAc,uEAAV,CAAU;AAAA,QAAPC,CAAO,uEAAH,CAAG;;AAAA;;AAAA;;AAEtC,QAAIC,MAAMC,OAAN,CAAcL,CAAd,KAAoBM,UAAUV,MAAV,KAAqB,CAA7C,EAAgD;AAC9C,YAAKW,IAAL,CAAUP,CAAV;AACD,KAFD,MAEO;AACL,YAAKQ,GAAL,CAASR,CAAT,EAAYC,CAAZ,EAAeC,CAAf,EAAkBC,CAAlB;AACD;AANqC;AAOvC;;;;wBAEGH,C,EAAGC,C,EAAGC,C,EAAGC,C,EAAG;AACdtB,eAAS,IAAT,EAAemB,CAAf,EAAkBC,CAAlB,EAAqBC,CAArB,EAAwBC,CAAxB;AACA,WAAKM,KAAL;AACA,aAAO,IAAP;AACD;;AAED;AACA;;;;;AAUA;;6BAESC,M,EAAQ;AACf,aAAO5B,cAAc4B,MAAd,CAAP;AACD;;;0BAEe;AAAA,wCAATC,OAAS;AAATA,eAAS;AAAA;;AAAA;AAAA;AAAA;;AAAA;AACd,6BAAqBA,OAArB,8HAA8B;AAAA,cAAnBD,MAAmB;;AAC5B3B,mBAAS,IAAT,EAAe2B,MAAf;AACD;AAHa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAId,WAAKD,KAAL;AACA,aAAO,IAAP;AACD;;;+BAEoB;AAAA,yCAATE,OAAS;AAATA,eAAS;AAAA;;AAAA;AAAA;AAAA;;AAAA;AACnB,8BAAqBA,OAArB,mIAA8B;AAAA,cAAnBD,MAAmB;;AAC5B1B,wBAAc,IAAd,EAAoB0B,MAApB;AACD;AAHkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAInB,WAAKD,KAAL;AACA,aAAO,IAAP;AACD;;;+BAEoB;AAAA,yCAATE,OAAS;AAATA,eAAS;AAAA;;AAAA;AAAA;AAAA;;AAAA;AACnB,8BAAqBA,OAArB,mIAA8B;AAAA,cAAnBD,MAAmB;;AAC5BzB,wBAAc,IAAd,EAAoByB,MAApB;AACD;AAHkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAInB,WAAKD,KAAL;AACA,aAAO,IAAP;AACD;;;6BAEkB;AAAA,yCAATE,OAAS;AAATA,eAAS;AAAA;;AAAA;AAAA;AAAA;;AAAA;AACjB,8BAAqBA,OAArB,mIAA8B;AAAA,cAAnBD,MAAmB;;AAC5BxB,sBAAY,IAAZ,EAAkBwB,MAAlB;AACD;AAHgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIjB,WAAKD,KAAL;AACA,aAAO,IAAP;AACD;;;0BAEKG,M,EAAO;AACXzB,iBAAW,IAAX,EAAiB,IAAjB,EAAuByB,MAAvB;AACA,WAAKH,KAAL;AACA,aAAO,IAAP;AACD;;;gCAEWC,M,EAAQE,K,EAAO;AACzBxB,uBAAiB,IAAjB,EAAuB,IAAvB,EAA6BsB,MAA7B,EAAqCE,KAArC;AACA,WAAKH,KAAL;AACA,aAAO,IAAP;AACD;;;6BAEQ;AACPpB,kBAAY,IAAZ,EAAkB,IAAlB;AACA,WAAKoB,KAAL;AACA,aAAO,IAAP;AACD;;;8BAES;AACRnB,mBAAa,IAAb,EAAmB,IAAnB;AACA,WAAKmB,KAAL;AACA,aAAO,IAAP;AACD;;;gCAEW;AACVlB,qBAAe,IAAf,EAAqB,IAArB;AACA,WAAKkB,KAAL;AACA,aAAO,IAAP;AACD;;;wBAEGC,M,EAAQ;AACV,aAAOlB,SAAS,IAAT,EAAekB,MAAf,CAAP;AACD;;AAED;AACA;AACA;AACA;AACA;;;;yBAEKA,M,EAAQG,K,EAAO;AAClBpB,gBAAU,IAAV,EAAgB,IAAhB,EAAsBiB,MAAtB,EAA8BG,KAA9B;AACA,WAAKJ,KAAL;AACA,aAAO,IAAP;AACD;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wBA7Fe;AAAE,aAAO,CAAP;AAAW;;;wBACf;AAAE,aAAO,KAAK,CAAL,CAAP;AAAiB,K;sBAC1BK,K,EAAO;AAAE,aAAO,KAAK,CAAL,IAAUlC,YAAYkC,KAAZ,CAAjB;AAAsC;;;wBACxC;AAAE,aAAO,KAAK,CAAL,CAAP;AAAiB,K;sBAC1BA,K,EAAO;AAAE,aAAO,KAAK,CAAL,IAAUlC,YAAYkC,KAAZ,CAAjB;AAAsC;;;wBACxC;AAAE,aAAO,KAAK,CAAL,CAAP;AAAiB,K;sBAC1BA,K,EAAO;AAAE,aAAO,KAAK,CAAL,IAAUlC,YAAYkC,KAAZ,CAAjB;AAAsC;;;wBACxC;AAAE,aAAO,KAAK,CAAL,CAAP;AAAiB,K;sBAC1BA,K,EAAO;AAAE,aAAO,KAAK,CAAL,IAAUlC,YAAYkC,KAAZ,CAAjB;AAAsC;;;;EA3BlBnC,S;;eAAhBoB,O","file":"vector4.js","sourcesContent":["import MathArray from './math-array';\nimport {checkNumber} from './common';\n\n// gl-matrix is too big. Cherry-pick individual imports from stack.gl version\n/* eslint-disable camelcase */\nimport vec4_set from 'gl-vec4/set';\nimport vec4_distance from 'gl-vec4/distance';\nimport vec4_add from 'gl-vec4/add';\nimport vec4_subtract from 'gl-vec4/subtract';\nimport vec4_multiply from 'gl-vec4/multiply';\nimport vec4_divide from 'gl-vec4/divide';\nimport vec4_scale from 'gl-vec4/scale';\nimport vec4_scaleAndAdd from 'gl-vec4/scaleAndAdd';\nimport vec4_negate from 'gl-vec4/negate';\nimport vec4_inverse from 'gl-vec4/inverse';\nimport vec4_normalize from 'gl-vec4/normalize';\nimport vec4_dot from 'gl-vec4/dot';\n// import vec4_cross from 'gl-vec4/cross';\nimport vec4_lerp from 'gl-vec4/lerp';\n\nexport function validateVector4(v) {\n  return v.length === 4 &&\n    Number.isFinite(v[0]) && Number.isFinite(v[1]) &&\n    Number.isFinite(v[2]) && Number.isFinite(v[3]);\n}\n\nexport default class Vector4 extends MathArray {\n  // Creates a new, empty vec4\n  constructor(x = 0, y = 0, z = 0, w = 0) {\n    super();\n    if (Array.isArray(x) && arguments.length === 1) {\n      this.copy(x);\n    } else {\n      this.set(x, y, z, w);\n    }\n  }\n\n  set(x, y, z, w) {\n    vec4_set(this, x, y, z, w);\n    this.check();\n    return this;\n  }\n\n  // Getters/setters\n  /* eslint-disable no-multi-spaces, brace-style, no-return-assign */\n  get ELEMENTS() { return 4; }\n  get x()      { return this[0]; }\n  set x(value) { return this[0] = checkNumber(value); }\n  get y()      { return this[1]; }\n  set y(value) { return this[1] = checkNumber(value); }\n  get z()      { return this[2]; }\n  set z(value) { return this[2] = checkNumber(value); }\n  get w()      { return this[3]; }\n  set w(value) { return this[3] = checkNumber(value); }\n  /* eslint-enable no-multi-spaces, brace-style, no-return-assign */\n\n  distance(vector) {\n    return vec4_distance(vector);\n  }\n\n  add(...vectors) {\n    for (const vector of vectors) {\n      vec4_add(this, vector);\n    }\n    this.check();\n    return this;\n  }\n\n  subtract(...vectors) {\n    for (const vector of vectors) {\n      vec4_subtract(this, vector);\n    }\n    this.check();\n    return this;\n  }\n\n  multiply(...vectors) {\n    for (const vector of vectors) {\n      vec4_multiply(this, vector);\n    }\n    this.check();\n    return this;\n  }\n\n  divide(...vectors) {\n    for (const vector of vectors) {\n      vec4_divide(this, vector);\n    }\n    this.check();\n    return this;\n  }\n\n  scale(scale) {\n    vec4_scale(this, this, scale);\n    this.check();\n    return this;\n  }\n\n  scaleAndAdd(vector, scale) {\n    vec4_scaleAndAdd(this, this, vector, scale);\n    this.check();\n    return this;\n  }\n\n  negate() {\n    vec4_negate(this, this);\n    this.check();\n    return this;\n  }\n\n  inverse() {\n    vec4_inverse(this, this);\n    this.check();\n    return this;\n  }\n\n  normalize() {\n    vec4_normalize(this, this);\n    this.check();\n    return this;\n  }\n\n  dot(vector) {\n    return vec4_dot(this, vector);\n  }\n\n  // cross(scale) {\n  //   vec4_cross(this, this, scale);\n  //   this.check();\n  //   return this;\n  // }\n\n  lerp(vector, coeff) {\n    vec4_lerp(this, this, vector, coeff);\n    this.check();\n    return this;\n  }\n\n  /*\n  multiply(...vectors) {\n    for (const vector of vectors) {\n      vec4_multiply(this, vector);\n    }\n    this.check();\n    return this;\n  }\n\n  divide(...vectors) {\n    for (const vector of vectors) {\n      vec4_divide(this, vector);\n    }\n    this.check();\n    return this;\n  }\n\n  ceil() {\n    vec4_ceil(this, this);\n    this.check();\n    return this;\n  }\n\n  floor() {\n    vec4_floor(this, this);\n    this.check();\n    return this;\n  }\n\n  min() {\n    vec4_min(this, this);\n    this.check();\n    return this;\n  }\n\n  max() {\n    vec4_max(this, this);\n    this.check();\n    return this;\n  }\n\n  hermite(scale) {\n    vec4_hermite(this, this, scale);\n    this.check();\n    return this;\n  }\n\n  bezier(scale) {\n    vec4_bezier(this, this, scale);\n    this.check();\n    return this;\n  }\n\n  random(scale) {\n    vec4_random(this, this, scale);\n    this.check();\n    return this;\n  }\n\n  rotateX(origin, angle) {\n    vec4_rotateX(this, this, origin, angle);\n    this.check();\n    return this;\n  }\n\n  rotateY(origin, angle) {\n    vec4_rotateY(this, this, origin, angle);\n    this.check();\n    return this;\n  }\n\n  rotateZ(origin, angle) {\n    vec4_rotateZ(this, this, origin, angle);\n    this.check();\n    return this;\n  }\n  */\n}\n"]}