{"version":3,"sources":["../../../../src/packages/math/src/common.js"],"names":["config","EPSILON","debug","printRowMajor","precision","configure","options","epsilon","checkNumber","value","Number","isFinite","Error","formatValue","parseFloat","toPrecision","isArray","Array","ArrayBuffer","isView","length","undefined","clone","array","map","func","result","i","radians","degrees","Math","PI","sin","angle","cos","tan","asin","acos","atan","clamp","min","max","equals","a","b","abs"],"mappings":"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","file":"common.js","sourcesContent":["/* eslint-disable no-shadow */\n// TODO - remove\nconst config = {};\nconfig.EPSILON = 1e-12;\nconfig.debug = true;\nconfig.printRowMajor = true;\nconfig.precision = 4;\nexport {config};\n\nexport function configure(options) {\n  if ('epsilon' in options) {\n    config.EPSILON = options.epsilon;\n  }\n\n  if ('debug' in options) {\n    config.debug = options.debug;\n  }\n}\n\nexport function checkNumber(value) {\n  if (!Number.isFinite(value)) {\n    throw new Error(`Invalid number ${value}`);\n  }\n  return value;\n}\n\nexport function formatValue(value, precision = config.precision || 4) {\n  return parseFloat(value.toPrecision(precision));\n}\n\n// Returns true if value is either an array or a typed array\n// Note: does not return true for ArrayBuffers and DataViews\nexport function isArray(value) {\n  return Array.isArray(value) || (ArrayBuffer.isView(value) && value.length !== undefined);\n}\n\n// If the array has a clone function, calls it, otherwise returns a copy\nexport function clone(array) {\n  return array.clone ? array.clone() : new Array(array);\n}\n\n// If the argument value is an array, applies the func element wise,\n// otherwise applies func to the argument value\nfunction map(value, func) {\n  if (isArray(value)) {\n    const result = clone(value);\n    for (let i = 0; i < result.length; ++i) {\n      result[i] = func(result[i], i, result);\n    }\n    return result;\n  }\n  return func(value);\n}\n\n//\n// GLSL math function equivalents\n// Works on both single values and vectors\n//\n\nexport function radians(degrees) {\n  return map(degrees, degrees => degrees / 180 * Math.PI);\n}\n\n// GLSL equivalent: Works on single values and vectors\nexport function degrees(radians) {\n  return map(radians, radians => radians * 180 / Math.PI);\n}\n\n// GLSL equivalent: Works on single values and vectors\nexport function sin(radians) {\n  return map(radians, angle => Math.sin(angle));\n}\n\n// GLSL equivalent: Works on single values and vectors\nexport function cos(radians) {\n  return map(radians, angle => Math.cos(angle));\n}\n\n// GLSL equivalent: Works on single values and vectors\nexport function tan(radians) {\n  return map(radians, angle => Math.tan(angle));\n}\n\n// GLSL equivalent: Works on single values and vectors\nexport function asin(radians) {\n  return map(radians, angle => Math.asin(angle));\n}\n\n// GLSL equivalent: Works on single values and vectors\nexport function acos(radians) {\n  return map(radians, angle => Math.acos(angle));\n}\n\n// GLSL equivalent: Works on single values and vectors\nexport function atan(radians) {\n  return map(radians, angle => Math.atan(angle));\n}\n\nexport function clamp(value, min, max) {\n  return map(value, value => Math.max(min, Math.min(max, value)));\n}\n\nexport function equals(a, b) {\n  if (Array.isArray(a) && Array.isArray(b)) {\n    if (a === b) {\n      return true;\n    }\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (let i = 0; i < a.length; ++i) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return Math.abs(a - b) <= config.EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\n"]}