{"version":3,"sources":["../../../../src/packages/math/src/math-array.js"],"names":["formatValue","equals","config","MathArray","Subclass","constructor","clone","copy","check","array","i","ELEMENTS","args","offset","string","name","Float32Array","length","valid","Number","isFinite","debug","validate","Error","len","Array"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAQA,WAAR,EAAqBC,iBAArB,EAA6BC,MAA7B,QAA0C,UAA1C;;IAEqBC,S;;;;;;;;;;;4BAEX;AACN,UAAMC,WAAW,KAAKC,WAAtB;AACA,UAAMC,QAAQ,IAAIF,QAAJ,GAAeG,IAAf,CAAoB,IAApB,CAAd;AACAD,YAAME,KAAN;AACA,aAAOF,KAAP;AACD;;;yBAEIG,K,EAAO;AACV,WAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,KAAKC,QAAzB,EAAmC,EAAED,CAArC,EAAwC;AACtC,aAAKA,CAAL,IAAUD,MAAMC,CAAN,CAAV;AACD;AACD,WAAKF,KAAL;AACA,aAAO,IAAP;AACD;;;0BAEY;AAAA,wCAANI,IAAM;AAANA,YAAM;AAAA;;AACX,WAAK,IAAIF,IAAI,CAAb,EAAgBA,IAAI,KAAKC,QAAzB,EAAmC,EAAED,CAArC,EAAwC;AACtC,aAAKA,CAAL,IAAUE,KAAKF,CAAL,KAAW,CAArB;AACD;AACD,WAAKF,KAAL;AACA,aAAO,IAAP;AACD;;;8BAESC,K,EAAmB;AAAA,UAAZI,MAAY,uEAAH,CAAG;;AAC3B,WAAK,IAAIH,IAAI,CAAb,EAAgBA,IAAI,KAAKC,QAAzB,EAAmC,EAAED,CAArC,EAAwC;AACtC,aAAKA,CAAL,IAAUD,MAAMC,IAAIG,MAAV,CAAV;AACD;AACD,WAAKL,KAAL;AACA,aAAO,IAAP;AACD;;;+BAEU;AACT,UAAIM,SAAS,EAAb;AACA,WAAK,IAAIJ,IAAI,CAAb,EAAgBA,IAAI,KAAKC,QAAzB,EAAmC,EAAED,CAArC,EAAwC;AACtCI,kBAAU,CAACJ,IAAI,CAAJ,GAAQ,IAAR,GAAe,EAAhB,IAAsBV,YAAY,KAAKU,CAAL,CAAZ,CAAhC;AACD;AACD,aAAU,KAAKL,WAAL,CAAiBU,IAA3B,SAAmCD,MAAnC;AACD;;;8BAE+B;AAAA,UAAxBL,KAAwB,uEAAhB,EAAgB;AAAA,UAAZI,MAAY,uEAAH,CAAG;;AAC9B,WAAK,IAAIH,IAAI,CAAb,EAAgBA,IAAI,KAAKC,QAAzB,EAAmC,EAAED,CAArC,EAAwC;AACtCD,cAAMI,SAASH,CAAf,IAAoB,KAAKA,CAAL,CAApB;AACD;AACD,aAAOD,KAAP;AACD;;;qCAEgB;AACf,aAAO,IAAIO,YAAJ,CAAiB,IAAjB,CAAP;AACD;;;2BAEMP,K,EAAO;AACZ,UAAI,CAACA,KAAD,IAAU,KAAKQ,MAAL,KAAgBR,MAAMQ,MAApC,EAA4C;AAC1C,eAAO,KAAP;AACD;AACD,WAAK,IAAIP,IAAI,CAAb,EAAgBA,IAAI,KAAKC,QAAzB,EAAmC,EAAED,CAArC,EAAwC;AACtC,YAAI,CAACT,QAAO,KAAKS,CAAL,CAAP,EAAgBD,MAAMC,CAAN,CAAhB,CAAL,EAAgC;AAC9B,iBAAO,KAAP;AACD;AACF;AACD,aAAO,IAAP;AACD;;;gCAEWD,K,EAAO;AACjB,UAAI,CAACA,KAAD,IAAU,KAAKQ,MAAL,KAAgBR,MAAMQ,MAApC,EAA4C;AAC1C,eAAO,KAAP;AACD;AACD,WAAK,IAAIP,IAAI,CAAb,EAAgBA,IAAI,KAAKC,QAAzB,EAAmC,EAAED,CAArC,EAAwC;AACtC,YAAI,KAAKA,CAAL,MAAYD,MAAMC,CAAN,CAAhB,EAA0B;AACxB,iBAAO,KAAP;AACD;AACF;AACD,aAAO,IAAP;AACD;;;+BAEsB;AAAA,UAAdD,KAAc,uEAAN,IAAM;;AACrB,UAAIS,QAAQT,SAASA,MAAMQ,MAAN,KAAiB,KAAKN,QAA3C;AACA,WAAK,IAAID,IAAI,CAAb,EAAgBA,IAAI,KAAKC,QAAzB,EAAmC,EAAED,CAArC,EAAwC;AACtCQ,gBAAQA,SAASC,OAAOC,QAAP,CAAgBX,MAAMC,CAAN,CAAhB,CAAjB;AACD;AACD,aAAOQ,KAAP;AACD;;;4BAEmB;AAAA,UAAdT,KAAc,uEAAN,IAAM;;AAClB,UAAIP,OAAOmB,KAAP,IAAgB,CAAC,KAAKC,QAAL,CAAcb,KAAd,CAArB,EAA2C;AACzC,cAAM,IAAIc,KAAJ,cAAqB,KAAKlB,WAAL,CAAiBU,IAAtC,CAAN;AACD;AACF;;;gCAEW;AACV,UAAME,SAAS,KAAKO,GAAL,EAAf;AACA,UAAIP,WAAW,CAAf,EAAkB;AAChB,aAAK,IAAIP,IAAI,CAAb,EAAgBA,IAAI,KAAKC,QAAzB,EAAmC,EAAED,CAArC,EAAwC;AACtC,eAAKA,CAAL,KAAWO,MAAX;AACD;AACF;AACD,WAAKT,KAAL;AACA,aAAO,IAAP;AACD;;;;qBAnGoCiB,K;;eAAlBtB,S","file":"math-array.js","sourcesContent":["import {formatValue, equals, config} from './common';\n\nexport default class MathArray extends Array {\n\n  clone() {\n    const Subclass = this.constructor;\n    const clone = new Subclass().copy(this);\n    clone.check();\n    return clone;\n  }\n\n  copy(array) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = array[i];\n    }\n    this.check();\n    return this;\n  }\n\n  set(...args) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = args[i] || 0;\n    }\n    this.check();\n    return this;\n  }\n\n  fromArray(array, offset = 0) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = array[i + offset];\n    }\n    this.check();\n    return this;\n  }\n\n  toString() {\n    let string = '';\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      string += (i > 0 ? ', ' : '') + formatValue(this[i]);\n    }\n    return `${this.constructor.name}(${string})`;\n  }\n\n  toArray(array = [], offset = 0) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      array[offset + i] = this[i];\n    }\n    return array;\n  }\n\n  toFloat32Array() {\n    return new Float32Array(this);\n  }\n\n  equals(array) {\n    if (!array || this.length !== array.length) {\n      return false;\n    }\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      if (!equals(this[i], array[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  exactEquals(array) {\n    if (!array || this.length !== array.length) {\n      return false;\n    }\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      if (this[i] !== array[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  validate(array = this) {\n    let valid = array && array.length === this.ELEMENTS;\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      valid = valid && Number.isFinite(array[i]);\n    }\n    return valid;\n  }\n\n  check(array = this) {\n    if (config.debug && !this.validate(array)) {\n      throw new Error(`Invalid ${this.constructor.name}`);\n    }\n  }\n\n  normalize() {\n    const length = this.len();\n    if (length !== 0) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] /= length;\n      }\n    }\n    this.check();\n    return this;\n  }\n}\n"]}