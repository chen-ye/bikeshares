{"version":3,"sources":["../../../../src/packages/math/src/test.js"],"names":["Vector2","Vector3","Vector4","Matrix4","Quaternion","tapeEquals","test","IDENTITY_MATRIX","INDICES_MATRIX","TRANSPOSED_INDICES_MATRIX","t","equals","end","ok","Array","isArray","VECTOR_METHODS","v","x","y","method","z","w","prototype","toFloat32Array","m","identity","BYTES_PER_ELEMENT","RESULT","set","INPUT","transpose","result","add","scale","translate","q","clone","conjugate","invert","multiply"],"mappings":"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","file":"test.js","sourcesContent":["/* eslint-disable max-statements */\nimport {Vector2, Vector3, Vector4, Matrix4, Quaternion} from './index';\nimport {tapeEquals} from './index';\nimport test from 'tape-catch';\n\nconst IDENTITY_MATRIX = [\n  1, 0, 0, 0,\n  0, 1, 0, 0,\n  0, 0, 1, 0,\n  0, 0, 0, 1\n];\n\nconst INDICES_MATRIX = [\n  1, 2, 3, 4,\n  5, 6, 7, 8,\n  9, 10, 11, 12,\n  13, 14, 15, 16\n];\n\nconst TRANSPOSED_INDICES_MATRIX = [\n  1, 5, 9, 13,\n  2, 6, 10, 14,\n  3, 7, 11, 15,\n  4, 8, 12, 16\n];\n\n// const MATRIX_TEST_CASES = {\n//   identity: {\n//     title: 'identity matrix',\n//     INPUTS: [],\n//     RESULT: IDENTITY_MATRIX\n//   },\n//   set: {}\n// };\n\ntest('Math#types', t => {\n  t.equals(typeof Vector2, 'function');\n  t.equals(typeof Vector3, 'function');\n  t.equals(typeof Vector4, 'function');\n  t.equals(typeof Matrix4, 'function');\n  t.equals(typeof Quaternion, 'function');\n  t.end();\n});\n\ntest('Math#construct and Array.isArray check', t => {\n  t.ok(Array.isArray(new Vector2()));\n  t.ok(Array.isArray(new Vector3()));\n  t.ok(Array.isArray(new Vector4()));\n  t.ok(Array.isArray(new Matrix4()));\n  t.ok(Array.isArray(new Quaternion()));\n  t.end();\n});\n\n// ['add', 'cross'];\nconst VECTOR_METHODS = ['clone'];\n\ntest('Vector2#members and methods', t => {\n  const v = new Vector2();\n  t.equals(v.x, 0);\n  t.equals(v.y, 0);\n\n  for (const method of VECTOR_METHODS) {\n    t.equals(typeof v[method], 'function');\n  }\n  t.end();\n});\n\ntest('Vector3#members and methods', t => {\n  const v = new Vector3();\n  t.equals(v.x, 0);\n  t.equals(v.y, 0);\n  t.equals(v.z, 0);\n\n  for (const method of VECTOR_METHODS) {\n    t.equals(typeof v[method], 'function');\n  }\n  t.end();\n});\n\ntest('Vector4#members and methods', t => {\n  const v = new Vector4();\n  t.equals(v.x, 0);\n  t.equals(v.y, 0);\n  t.equals(v.z, 0);\n  t.equals(v.w, 0);\n\n  for (const method of VECTOR_METHODS) {\n    t.equals(typeof v[method], 'function');\n  }\n  t.end();\n});\n\ntest('Matrix4.toFloat32Array', t => {\n  t.equals(typeof Matrix4.prototype.toFloat32Array, 'function');\n  const m = new Matrix4();\n  m.identity();\n  t.equals(m.toFloat32Array().BYTES_PER_ELEMENT, 4);\n  t.end();\n});\n\ntest('Matrix4#identity (identity matrix)', t => {\n  t.equals(typeof Matrix4.prototype.identity, 'function');\n  const m = new Matrix4();\n  m.identity();\n\n  const RESULT = IDENTITY_MATRIX;\n\n  tapeEquals(t, m, RESULT);\n  t.end();\n});\n\ntest('Matrix4#set', t => {\n  t.equals(typeof Matrix4.prototype.set, 'function');\n\n  const INPUT = INDICES_MATRIX;\n  const RESULT = INDICES_MATRIX;\n\n  const m = new Matrix4()\n    .set(...INPUT);\n\n  tapeEquals(t, m, RESULT, 'set gave the right result');\n  t.end();\n});\n\ntest('Matrix4.transpose', t => {\n  t.equals(typeof Matrix4.prototype.transpose, 'function');\n\n  const INPUT = INDICES_MATRIX;\n  const RESULT = TRANSPOSED_INDICES_MATRIX;\n\n  const m = new Matrix4()\n    .set(...INPUT);\n\n  const result = m.transpose();\n\n  tapeEquals(t, result, RESULT, 'transpose gave the right result');\n  t.end();\n});\n\ntest('Matrix4.add', t => {\n  const RESULT = [\n    2, 0, 0, 0,\n    0, 2, 0, 0,\n    0, 0, 2, 0,\n    0, 0, 0, 2\n  ];\n\n  t.equals(typeof Matrix4.prototype.add, 'function');\n  let m = new Matrix4().identity();\n  m = m.add(m);\n\n  tapeEquals(t, m, RESULT, 'add gave the right result');\n  t.end();\n});\n\ntest('Matrix4.scale', t => {\n  const RESULT = [\n    1, 0, 0, 0,\n    0, 2, 0, 0,\n    0, 0, 3, 0,\n    0, 0, 0, 1\n  ];\n\n  t.equals(typeof Matrix4.prototype.scale, 'function');\n  const m = new Matrix4().identity();\n  const result = m.scale([1, 2, 3]);\n\n  tapeEquals(t, result, RESULT, 'scale gave the right result');\n  t.end();\n});\n\ntest('Matrix4.translate', t => {\n  const RESULT = [\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    1, 2, 3, 1\n  ];\n\n  t.equals(typeof Matrix4.prototype.translate, 'function');\n  const m = new Matrix4().identity();\n  const result = m.translate([1, 2, 3]);\n\n  tapeEquals(t, result, RESULT, 'translate gave the right result');\n  t.end();\n});\n\n// test('Matrix4.invert', t => {\n//   t.equals(typeof Matrix4.prototype.invert, 'function');\n//   const m = new Matrix4();\n//   m.identity();\n//   const ans = m.frustum(-1, 1, -1, 1, 0.1, 100).invert();\n//   t.ok(abs(ans.n11 - 9.99999999) < delta);\n//   t.ok(abs(ans.n12 - 0) < delta);\n//   t.ok(abs(ans.n13 - 0) < delta);\n//   t.ok(abs(ans.n14 - 0) < delta);\n//   t.ok(abs(ans.n21 - 0) < delta);\n//   t.ok(abs(ans.n22 - 9.99999999) < delta);\n//   t.ok(abs(ans.n23 - 0) < delta);\n//   t.ok(abs(ans.n24 - 0) < delta);\n//   t.ok(abs(ans.n31 - 0) < delta);\n//   t.ok(abs(ans.n32 - 0) < delta);\n//   t.ok(abs(ans.n33 - 0) < delta);\n//   t.ok(abs(ans.n34 - -1) < delta);\n//   t.ok(abs(ans.n41 - 0) < delta);\n//   t.ok(abs(ans.n42 - 0) < delta);\n//   t.ok(abs(ans.n43 - -4.995) < delta);\n//   t.ok(abs(ans.n44 - 5.005) < delta);\n//   t.end();\n// });\n\n// test('Matrix4.mulVector3', t => {\n//   t.equals(typeof Matrix4.prototype.mulVector3, 'function');\n//   const v = new Vector3(1, 1, 1);\n//   const m = new Matrix4();\n//   const ans = m.mulVector3(v);\n\n//   t.equals(ans[0], 1);\n//   t.equals(ans[1], 1);\n//   t.equals(ans[2], 1);\n//   t.end();\n// });\n\n// test('Matrix4.$mulVector3', t => {\n//   t.equals(typeof Matrix4.prototype.$mulVector3, 'function');\n//   const v = new Vector3(1, 1, 1);\n//   const m = new Matrix4();\n\n//   m.$mulVector3(v);\n\n//   t.equals(v[0], 1);\n//   t.equals(v[1], 1);\n//   t.equals(v[2], 1);\n//   t.end();\n// });\n\n// test('Matrix4.mulMatrix42', t => {\n//   t.equals(typeof Matrix4.prototype.mulMatrix42, 'function');\n//   const m1 = new Matrix4();\n//   m1.set(1, 2, 3, 4,\n//          5, 6, 7, 8,\n//          9, 10, 11, 12,\n//          13, 14, 15, 16);\n\n//   const m2 = new Matrix4();\n//   m2.set(1, 2, 3, 4,\n//          5, 6, 7, 8,\n//          9, 10, 11, 12,\n//          13, 14, 15, 16).$transpose();\n\n//   const ans = new Matrix4();\n//   ans.mulMatrix42(m1, m2);\n//   t.ok(abs(ans.n11 - 30) < delta);\n//   t.ok(abs(ans.n12 - 70) < delta);\n//   t.ok(abs(ans.n13 - 110) < delta);\n//   t.ok(abs(ans.n14 - 150) < delta);\n//   t.ok(abs(ans.n21 - 70) < delta);\n//   t.ok(abs(ans.n22 - 174) < delta);\n//   t.ok(abs(ans.n23 - 278) < delta);\n//   t.ok(abs(ans.n24 - 382) < delta);\n//   t.ok(abs(ans.n31 - 110) < delta);\n//   t.ok(abs(ans.n32 - 278) < delta);\n//   t.ok(abs(ans.n33 - 446) < delta);\n//   t.ok(abs(ans.n34 - 614) < delta);\n//   t.ok(abs(ans.n41 - 150) < delta);\n//   t.ok(abs(ans.n42 - 382) < delta);\n//   t.ok(abs(ans.n43 - 614) < delta);\n//   t.ok(abs(ans.n44 - 846) < delta);\n//   t.end();\n// });\n\n// test('Matrix4.lookAt', t => {\n//   t.equals(typeof Matrix4.prototype.lookAt, 'function');\n//   t.end();\n// });\n\n// test('Matrix4.perspective', t => {\n//   t.equals(typeof Matrix4.prototype.perspective, 'function');\n//   t.end();\n// });\n\n// test('Matrix4.frustum', t => {\n//   t.equals(typeof Matrix4.prototype.frustum, 'function');\n//   const m = new Matrix4();\n//   m.identity();\n//   const ans = m.frustum(-1, 1, -1, 1, 0.1, 100);\n//   t.ok(abs(ans.n11 - 0.1) < delta);\n//   t.ok(abs(ans.n12 - 0) < delta);\n//   t.ok(abs(ans.n13 - 0) < delta);\n//   t.ok(abs(ans.n14 - 0) < delta);\n//   t.ok(abs(ans.n21 - 0) < delta);\n//   t.ok(abs(ans.n22 - 0.1) < delta);\n//   t.ok(abs(ans.n23 - 0) < delta);\n//   t.ok(abs(ans.n24 - 0) < delta);\n//   t.ok(abs(ans.n31 - 0) < delta);\n//   t.ok(abs(ans.n32 - 0) < delta);\n//   t.ok(abs(ans.n33 - -1.002002002002002) < delta);\n//   t.ok(abs(ans.n34 - -0.20020020020020018) < delta);\n//   t.ok(abs(ans.n41 - 0) < delta);\n//   t.ok(abs(ans.n42 - 0) < delta);\n//   t.ok(abs(ans.n43 - -1) < delta);\n//   t.ok(abs(ans.n44 - 0) < delta);\n//   t.end();\n// });\n\n// test('Matrix4.rotateAxis', t => {\n//   t.equals(typeof Matrix4.prototype.rotateAxis, 'function');\n//   const v = [1, 2, 3];\n//   const len = Math.sqrt(1 * 1 + 2 * 2 + 3 * 3);\n//   const theta = Math.PI / 4;\n//   const m = new Matrix4();\n\n//   v[0] /= len;\n//   v[1] /= len;\n//   v[2] /= len;\n\n//   const ans = m.rotateAxis(theta, v);\n//   t.ok(abs(ans.n11 - 0.7280277013778687) < delta);\n//   t.ok(abs(ans.n12 - -0.525104820728302) < delta);\n//   t.ok(abs(ans.n13 - 0.4407272934913635) < delta);\n//   t.ok(abs(ans.n14 - 0) < delta);\n//   t.ok(abs(ans.n21 - 0.6087885979157627) < delta);\n//   t.ok(abs(ans.n22 - 0.7907905578613281) < delta);\n//   t.ok(abs(ans.n23 - -0.06345657259225845) < delta);\n//   t.ok(abs(ans.n24 - 0) < delta);\n//   t.ok(abs(ans.n31 - -0.3152016404063445) < delta);\n//   t.ok(abs(ans.n32 - 0.3145079017103789) < delta);\n//   t.ok(abs(ans.n33 - 0.8953952789306641) < delta);\n//   t.ok(abs(ans.n34 - 0) < delta);\n//   t.ok(abs(ans.n41 - 0) < delta);\n//   t.ok(abs(ans.n42 - 0) < delta);\n//   t.ok(abs(ans.n43 - 0) < delta);\n//   t.ok(abs(ans.n44 - 1) < delta);\n//   t.end();\n// });\n\n// test('Matrix4.rotateXYZ', t => {\n//   t.equals(typeof Matrix4.prototype.rotateXYZ, 'function');\n//   const m = new Matrix4();\n//   m.identity();\n//   const ans = m.rotateXYZ(1, 2, 3);\n//   t.ok(abs(ans.n11 - 0.411982245665683) < delta);\n//   t.ok(abs(ans.n12 - -0.8337376517741568) < delta);\n//   t.ok(abs(ans.n13 - -0.36763046292489926) < delta);\n//   t.ok(abs(ans.n14 - 0) < delta);\n//   t.ok(abs(ans.n21 - -0.05872664492762098) < delta);\n//   t.ok(abs(ans.n22 - -0.42691762127620736) < delta);\n//   t.ok(abs(ans.n23 - 0.9023815854833308) < delta);\n//   t.ok(abs(ans.n24 - 0) < delta);\n//   t.ok(abs(ans.n31 - -0.9092974268256817) < delta);\n//   t.ok(abs(ans.n32 - -0.35017548837401463) < delta);\n//   t.ok(abs(ans.n33 - -0.2248450953661529) < delta);\n//   t.ok(abs(ans.n34 - 0) < delta);\n//   t.ok(abs(ans.n41 - 0) < delta);\n//   t.ok(abs(ans.n42 - 0) < delta);\n//   t.ok(abs(ans.n43 - 0) < delta);\n//   t.ok(abs(ans.n44 - 1) < delta);\n//   t.end();\n// });\n\ntest('Quaternion#methods', t => {\n  const q = new Quaternion();\n  t.equals(q[0], 0);\n  t.equals(q[1], 0);\n  t.equals(q[2], 0);\n  t.equals(q[3], 1);\n  t.equals(typeof q.add, 'function');\n  t.equals(typeof q.clone, 'function');\n  t.equals(typeof q.conjugate, 'function');\n  // t.equals(typeof q.divQuaternion, 'function');\n  t.equals(typeof q.invert, 'function');\n  t.equals(typeof q.multiply, 'function');\n  // t.equals(typeof q.negate, 'function');\n  // t.equals(typeof q.norm, 'function');\n  // t.equals(typeof q.normSq, 'function');\n  t.equals(typeof q.scale, 'function');\n  t.equals(typeof q.set, 'function');\n  // t.equals(typeof q.setQuaternion, 'function');\n  // t.equals(typeof q.sub, 'function');\n  // t.equals(typeof q.unit, 'function');\n  t.end();\n});\n\n// test('Quaternion.fromAxisRotation', t => {\n//   let q = Quaternion.fromAxisRotation(new Vector3(0, 0, 1), Math.PI);\n//   t.equals(q[0], 0);\n//   t.equals(q[1], 0);\n//   t.equals(q[2], 1);\n//   t.equals(q[3], Math.cos(Math.PI / 2));\n\n//   q = Quaternion.fromAxisRotation(new Vector3(0, 1, 0), Math.PI);\n//   t.equals(q[0], 0);\n//   t.equals(q[1], 1);\n//   t.equals(q[2], 0);\n//   t.equals(q[3], Math.cos(Math.PI / 2));\n\n//   q = Quaternion.fromAxisRotation(new Vector3(1, 0, 0), Math.PI);\n//   t.equals(q[0], 1);\n//   t.equals(q[1], 0);\n//   t.equals(q[2], 0);\n//   t.equals(q[3], Math.cos(Math.PI / 2));\n\n//   const q1 = Quaternion.fromAxisRotation(new Vector3(5, 0, -2), Math.PI / 3);\n//   const q2 = Quaternion.fromAxisRotation(new Vector3(1, 3, 0), Math.PI / 4);\n//   q1.$mulQuaternion(q2);\n//   t.equals(q1[0], 0.6011183144537015);\n//   t.equals(q1[1], 0.29193457751898655);\n//   t.equals(q1[2], -0.0030205353559888126);\n//   t.equals(q1[3], 0.7439232829017486);\n//   t.end();\n// });\n"]}