{"version":3,"sources":["../../src/deprecated/media.js"],"names":["postProcessImage","length","camera","fov","aspect","near","far","position","program","fromTexture","toFrameBuffer","toScreen","width","height","viewportX","viewportY","aspectRatio","Math","max","textures","opt","framebuffer","screen","app","canvas","x","y","plane","gl","type","xlen","ylen","offset","update","scene","models","add","fbo","FrameBuffer","bindToTexture","parameters","name","value","mipmap","bindToRenderBuffer","bind","viewport","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","setUniforms","uniforms","renderToTexture","setFrameBuffer","use","render"],"mappings":"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","file":"media.js","sourcesContent":["// media has utility functions for image, video and audio manipulation (and\n// maybe others like device, etc).\n\n/* eslint-disable */ // TODO - this file needs cleanup\nimport {Program} from '../webgl';\nimport {Plane} from '../models';\nimport {PerspectiveCamera} from './camera';\nimport Scene from './scene';\nimport {splat} from '../utils';\n\n// length given a 45 fov angle, and 0.2 distance to camera\nconst length = 0.16568542494923805;\nconst camera = new PerspectiveCamera({\n  fov: 45,\n  aspect: 1,\n  near: 0.1,\n  far: 500,\n  position: [0, 0, 0.2]\n});\n\n// post process an image by setting it to a texture with a specified fragment\n// and vertex shader.\nexport function postProcessImage({\n  program,\n  fromTexture,\n  toFrameBuffer,\n  toScreen,\n  width,\n  height,\n  viewportX = 0,\n  viewportY = 0,\n  aspectRatio = Math.max(height / width, width / height)\n} = {}) {\n  var textures = opt.fromTexture ? splat(opt.fromTexture) : [];\n  var framebuffer = opt.toFrameBuffer;\n  var screen = !!opt.toScreen;\n  var width = opt.width || app.canvas.width;\n  var height = opt.height || app.canvas.height;\n  var x = opt.viewportX;\n  var y = opt.viewportY;\n\n  const plane = new Plane(gl, {\n    program,\n    type: 'x,y',\n    xlen: length,\n    ylen: length,\n    offset: 0\n  });\n  plane.textures = textures;\n  plane.program = program;\n\n  camera.aspect = opt.aspectRatio;\n  camera.update();\n\n  const scene = new Scene(app, program, camera);\n  scene.program = program;\n\n  if (!scene.models.length) {\n    scene.add(plane);\n  }\n\n  var fbo = new FrameBuffer(framebuffer, {\n    width: width,\n    height: height,\n    bindToTexture: {\n      parameters: [{\n        name: 'TEXTURE_MAG_FILTER',\n        value: 'LINEAR'\n      }, {\n        name: 'TEXTURE_MIN_FILTER',\n        value: 'LINEAR',\n        mipmap: false\n      }]\n    },\n    bindToRenderBuffer: false\n  });\n\n  fbo.bind();\n  gl.viewport(x, y, width, height);\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n  program.setUniforms(opt.uniforms || {});\n  scene.renderToTexture(framebuffer);\n  app.setFrameBuffer(framebuffer, false);\n\n  if (screen) {\n    program.use();\n    gl.viewport(x, y, width, height);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    program.setUniforms(opt.uniforms || {});\n    scene.render();\n  }\n\n  return this;\n}\n"]}