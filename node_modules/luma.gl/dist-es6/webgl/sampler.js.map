{"version":3,"sources":["../../src/webgl/sampler.js"],"names":["GL","isWebGL2","assertWebGL2Context","Resource","Sampler","gl","handle","isSampler","opts","Object","seal","unit","bindSampler","createSampler","deleteSampler","pname","value","getSamplerParameter","param","TEXTURE_MIN_LOD","TEXTURE_MAX_LOD","samplerParameterf","samplerParameteri"],"mappings":";;;;;;;;AAAA;AACA,OAAOA,EAAP,MAAe,OAAf;AACA,SAAQC,QAAR,EAAkBC,mBAAlB,QAA4C,WAA5C;AACA,OAAOC,QAAP,MAAqB,YAArB;;IAEqBC,O;;;;;gCAEAC,E,EAAI;AACrB,aAAOJ,SAASI,EAAT,CAAP;AACD;;;6BAEeC,M,EAAQ;AACtB,aAAO,KAAKD,EAAL,CAAQE,SAAR,CAAkB,KAAKD,MAAvB,CAAP;AACD;;;AAED,mBAAYD,EAAZ,EAAgBG,IAAhB,EAAsB;AAAA;;AACpBN,wBAAoBG,EAApB;;AADoB,kHAEdA,EAFc,EAEVG,IAFU;;AAGpBC,WAAOC,IAAP;AAHoB;AAIrB;;AAED;;;;;;;;;yBAKKC,I,EAAM;AACT,WAAKN,EAAL,CAAQO,WAAR,CAAoBD,IAApB,EAA0B,KAAKL,MAA/B;AACA,aAAO,IAAP;AACD;;AAED;;;;;;;;2BAKOK,I,EAAM;AACX,WAAKN,EAAL,CAAQO,WAAR,CAAoBD,IAApB,EAA0B,IAA1B;AACA,aAAO,IAAP;AACD;;AAED;;;;oCAEgB;AACd,aAAO,KAAKN,EAAL,CAAQQ,aAAR,EAAP;AACD;;;oCAEe;AACd,WAAKR,EAAL,CAAQS,aAAR,CAAsB,KAAKR,MAA3B;AACD;;;kCAEaS,K,EAAO;AACnB,UAAMC,QAAQ,KAAKX,EAAL,CAAQY,mBAAR,CAA4B,KAAKX,MAAjC,EAAyCS,KAAzC,CAAd;AACA,aAAOC,KAAP;AACD;;;kCAEaD,K,EAAOG,K,EAAO;AAC1B;AACA;AACA;AACA,cAAQH,KAAR;AACA,aAAKf,GAAGmB,eAAR;AACA,aAAKnB,GAAGoB,eAAR;AACE,eAAKf,EAAL,CAAQgB,iBAAR,CAA0B,KAAKf,MAA/B,EAAuCS,KAAvC,EAA8CG,KAA9C;AACA;AACF;AACE,eAAKb,EAAL,CAAQiB,iBAAR,CAA0B,KAAKhB,MAA/B,EAAuCS,KAAvC,EAA8CG,KAA9C;AACA;AAPF;AASA,aAAO,IAAP;AACD;;;;EAjEkCf,Q;;eAAhBC,O","file":"sampler.js","sourcesContent":["/* eslint-disable no-inline-comments */\nimport GL from './api';\nimport {isWebGL2, assertWebGL2Context} from './context';\nimport Resource from './resource';\n\nexport default class Sampler extends Resource {\n\n  static isSupported(gl) {\n    return isWebGL2(gl);\n  }\n\n  static isHandle(handle) {\n    return this.gl.isSampler(this.handle);\n  }\n\n  constructor(gl, opts) {\n    assertWebGL2Context(gl);\n    super(gl, opts);\n    Object.seal(this);\n  }\n\n  /**\n   * Bind to the same texture unit as a texture to control sampling for that texture\n   * @param {GLuint} unit - texture unit index\n   * @return {Sampler} - returns self to enable chaining\n   */\n  bind(unit) {\n    this.gl.bindSampler(unit, this.handle);\n    return this;\n  }\n\n  /**\n   * Bind to the same texture unit as a texture to control sampling for that texture\n   * @param {GLuint} unit - texture unit index\n   * @return {Sampler} - returns self to enable chaining\n   */\n  unbind(unit) {\n    this.gl.bindSampler(unit, null);\n    return this;\n  }\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createSampler();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteSampler(this.handle);\n  }\n\n  _getParameter(pname) {\n    const value = this.gl.getSamplerParameter(this.handle, pname);\n    return value;\n  }\n\n  _setParameter(pname, param) {\n    // Apparently there are some conversion integer/float rules that made\n    // the WebGL committe expose two parameter setting functions in JavaScript.\n    // For now, pick the float version for parameters specified as GLfloat.\n    switch (pname) {\n    case GL.TEXTURE_MIN_LOD:\n    case GL.TEXTURE_MAX_LOD:\n      this.gl.samplerParameterf(this.handle, pname, param);\n      break;\n    default:\n      this.gl.samplerParameteri(this.handle, pname, param);\n      break;\n    }\n    return this;\n  }\n\n}\n"]}