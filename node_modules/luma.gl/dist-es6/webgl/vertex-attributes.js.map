{"version":3,"sources":["../../src/webgl/vertex-attributes.js"],"names":["glGet","assertWebGLContext","assertWebGL2Context","isWebGL2","log","assert","glGetLumaInfo","gl","luma","extensions","getExtension","getMaxAttributes","getParameter","MAX_VERTEX_ATTRIBS","hasDivisor","Boolean","isEnabled","location","get","VERTEX_ATTRIB_ARRAY_ENABLED","getBuffer","VERTEX_ATTRIB_ARRAY_BUFFER_BINDING","getGeneric","CURRENT_VERTEX_ATTRIB","getSize","VERTEX_ATTRIB_ARRAY_SIZE","getType","VERTEX_ATTRIB_ARRAY_TYPE","isNormalized","VERTEX_ATTRIB_ARRAY_NORMALIZED","isInteger","VERTEX_ATTRIB_ARRAY_INTEGER","getStride","VERTEX_ATTRIB_ARRAY_STRIDE","getOffset","pname","VERTEX_ATTRIB_ARRAY_POINTER","getVertexAttribOffset","getVertexAttrib","enable","enableVertexAttribArray","disable","disableVertexAttribArray","setDivisor","divisor","vertexAttribDivisor","ext","vertexAttribDivisorANGLE","Error","getDivisor","VERTEX_ATTRIB_ARRAY_DIVISOR","VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE","setBuffer","buffer","target","layout","undefined","bind","ARRAY_BUFFER","integer","vertexAttribPointer","size","type","normalized","stride","offset","vertexAttribIPointer","unbind","setGeneric","array","warn","Float32Array","vertexAttrib4fv","Int32Array","vertexAttribI4iv","Uint32Array","vertexAttribI4uiv","setGenericValues","v0","v1","v2","v3","arguments","length","vertexAttrib1f","vertexAttrib2f","vertexAttrib3f","vertexAttrib4f"],"mappings":"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","file":"vertex-attributes.js","sourcesContent":["/* eslint-disable dot-notation*/\nimport {glGet} from './api';\nimport {assertWebGLContext, assertWebGL2Context, isWebGL2} from './context';\nimport {log} from '../utils';\nimport assert from 'assert';\n\n/**\n * Methods for manipulating the vertex attributes array, which is where\n * vertex data is staged for shader execution.\n *\n * Vertex attributes are stored in \"arrays\" with indices from 0 and up.\n * During shader execution, these indices (or 'locations') are matched to\n * the indices assigned to shader attributes during WebGLProgram linking.\n *\n * Note: The global state contains an implicit vertex attribute array which\n * the methods in this class manipulate by default. It is also possible to\n * create and bind a VertexArray to manage multiple arrays.\n *\n * Each vertex attribute has these properties:\n * - Can be enabled or disabled (Only enable attrs actually used by a program)\n * - Has an instance `divisor` (usually 1 or 0 to enable/disable instancing)\n * - Have a size (1-4 values per vertex)\n * - Has a value or values that is accessible in shaders\n *\n * Attribute values are either\n * - Generic: a constant value for all vertices/instances, or\n * - Bound to a WebGLBuffer with unique values for each vertex/instance\n *\n * When binding to a WebGLBuffer it is necessary to specify the layout of\n * data in the buffer:\n * - size (1-4 values per vertex)\n * - data type (e.g. gl.FLOAT)\n * - stride, offset, and integer normalization policy can also be specified\n *\n * Note: All methods in this class take a `location` index to specify which\n * vertex attribute in the array they are operating on.\n *\n * Note: Attribute 0 can sometimes be treated specially by the driver,\n * to be safe we avoid disabling it.\n *\n * Note: WebGL2\n * - Improves support for integer attributes, both generic and buffered.\n * - Setting instance \"divisors\" no longer require using a WebGL extension.\n *\n */\n\nfunction glGetLumaInfo(gl) {\n  gl.luma = gl.luma || {};\n  gl.luma.extensions = gl.luma.extensions || {};\n  gl.luma.extensions['ANGLE_instanced_arrays'] =\n    gl.luma.extensions['ANGLE_instanced_arrays'] || gl.getExtension('ANGLE_instanced_arrays');\n  return gl.luma;\n}\n\n// ACCESSORS\n\n/**\n * The max number of attributes in the vertex attribute array is an\n * implementation defined limit, but never smaller than 8\n * @param {WebGLRenderingContext} gl - webgl context\n * @returns {GLuint} - (max) number of attributes in the vertex attribute array\n */\nexport function getMaxAttributes(gl) {\n  assertWebGLContext(gl);\n  return gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n}\n\n/**\n * Is instance divisor availble (checks for WebGL2 or ANGLE extension)\n * @param {WebGLRenderingContext} gl - webgl context\n * @returns {Boolean} - is divisor available?\n */\nexport function hasDivisor(gl) {\n  assertWebGLContext(gl);\n  return Boolean(\n    isWebGL2(gl) ||\n    gl.getExtension(gl, 'ANGLE_instanced_arrays')\n  );\n}\n\n/**\n * Returns true if the vertex attribute is enabled at this index.\n * @param {WebGLRenderingContext} gl - webgl context\n * @param {GLuint} location - ordinal number of the attribute\n * @returns {Boolean} - enabled status\n */\nexport function isEnabled(gl, location) {\n  return Boolean(get(gl, location, gl.VERTEX_ATTRIB_ARRAY_ENABLED));\n}\n\n/**\n * Returns the currently bound buffer\n * @param {WebGLRenderingContext} gl - webgl context\n * @param {GLuint} location - ordinal number of the attribute\n * @returns {WebGLBuffer} Returns the currently bound buffer\n */\nexport function getBuffer(gl, location) {\n  return get(gl, location, gl.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING);\n}\n\n/**\n * Get values for generic vertex attributes\n * @param {WebGLRenderingContext} gl - webgl context\n * @param {GLuint} location - ordinal number of the attribute\n * @returns {Float32Array} (with 4 elements) representing the current value\n * of the vertex attribute at the given index.\n */\nexport function getGeneric(gl, location) {\n  return get(gl, gl.CURRENT_VERTEX_ATTRIB);\n}\n\n/**\n * @param {WebGLRenderingContext} gl - webgl context\n * @param {GLuint} location - ordinal number of the attribute\n */\n// @returns {GLint} the size of an element of the vertex array.\nexport function getSize(gl, location) {\n  return get(location, gl.VERTEX_ATTRIB_ARRAY_SIZE);\n}\n\n/**\n * @param {WebGLRenderingContext} gl - webgl context\n * @param {GLuint} location - ordinal number of the attribute\n */\n// @returns {GLenum} representing the array type.\nexport function getType(gl, location) {\n  return get(location, gl.VERTEX_ATTRIB_ARRAY_TYPE);\n}\n\n/**\n * @param {WebGLRenderingContext} gl - webgl context\n * @param {GLuint} location - ordinal number of the attribute\n */\n// @returns {GLboolean} true if fixed-point data types are normalized\n// for the vertex attribute array at the given index.\nexport function isNormalized(gl, location) {\n  return get(location, gl.VERTEX_ATTRIB_ARRAY_NORMALIZED);\n}\n\n/**\n * check if an integer data type in the vertex attribute at index\n * @param {WebGLRenderingContext} gl - webgl context\n * @param {GLuint} location - index of the vertex attribute.\n * @returns {GLboolean} - true if an integer data type is in the\n * vertex attribute array at the given index.\n */\nexport function isInteger(gl, location) {\n  assertWebGL2Context(gl);\n  return get(location, gl.VERTEX_ATTRIB_ARRAY_INTEGER);\n}\n\n/**\n * @param {WebGLRenderingContext} gl - webgl context\n * @param {GLuint} location - ordinal number of the attribute\n * @returns {GLint} number of bytes between successive elements in the array.\n * 0 means that the elements are sequential.\n */\nexport function getStride(gl, location) {\n  return get(location, gl.VERTEX_ATTRIB_ARRAY_STRIDE);\n}\n\n/**\n * @param {WebGLRenderingContext} gl - webgl context\n * @param {GLuint} location - ordinal number of the attribute\n * @param {GLuint} pname - enum specifying which offset to return\n * @returns {GLuint} the address of a specified vertex attribute.\n */\nexport function getOffset(\n  gl, location, pname = gl.VERTEX_ATTRIB_ARRAY_POINTER\n) {\n  return gl.getVertexAttribOffset(location, pname);\n}\n\n/**\n * @private\n * Generic getter for information about a vertex attribute at a given position\n * @param {WebGLRenderingContext} gl - webgl context\n * @param {GLuint} location - index of the vertex attribute.\n * @param {GLenum} pname - specifies the information to query.\n * @returns {*} - requested vertex attribute information (specified by pname)\n */\nfunction get(gl, location, pname) {\n  assertWebGLContext(gl);\n  return gl.getVertexAttrib(location, pname);\n}\n\n// MODIFIERS\n\n/**\n * Enable the attribute\n * Note: By default all attributes are disabled. Only attributes\n * used by a program's shaders should be enabled.\n *\n * @param {WebGLRenderingContext} gl - webgl context\n * @param {GLuint} location - ordinal number of the attribute\n */\nexport function enable(gl, location) {\n  gl.enableVertexAttribArray(location);\n}\n\n/**\n * Disable the attribute\n * Note: Only attributes used by a program's shaders should be enabled.\n *\n * @param {WebGLRenderingContext} gl - webgl context\n * @param {GLuint} location - ordinal number of the attribute\n */\nexport function disable(gl, location) {\n  // Don't disable location 0\n  if (location > 0) {\n    gl.disableVertexAttribArray(location);\n  }\n}\n\n/**\n * Set the frequency divisor used for instanced rendering.\n * Note: Usually simply set to 1 or 0 to enable/disable instanced rendering\n * for a specific attribute.\n *\n * @param {WebGLRenderingContext} gl - webgl context\n * @param {GLuint} location - ordinal number of the attribute\n * @param {GLuint} divisor - instances that pass between updates of attribute\n */\nexport function setDivisor(gl, location, divisor) {\n  if (isWebGL2(gl)) {\n    gl.vertexAttribDivisor(location, divisor);\n    return;\n  }\n  const ext = glGetLumaInfo(gl).extensions['ANGLE_instanced_arrays'];\n  if (ext) {\n    ext.vertexAttribDivisorANGLE(location, divisor);\n    return;\n  }\n  // Accept divisor 0 even if instancing is not supported (0 = no instancing)\n  if (divisor !== 0) {\n    throw new Error('WebGL instanced rendering not supported');\n  }\n}\n\n/**\n * Returns the frequency divisor used for instanced rendering.\n * @param {WebGLRenderingContext} gl - webgl context\n * @param {GLuint} location - ordinal number of the attribute\n * @returns {GLuint} divisor\n */\nexport function getDivisor(gl, location) {\n  assert(location > 0);\n  if (isWebGL2(gl)) {\n    const divisor = get(location, gl.VERTEX_ATTRIB_ARRAY_DIVISOR);\n    return divisor;\n  }\n  const ext = glGetLumaInfo(gl).extensions['ANGLE_instanced_arrays'];\n  if (ext) {\n    const divisor = get(location, ext.VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE);\n    return divisor;\n  }\n  // if instancing is not available, return 0 meaning divisor has not been set\n  return 0;\n}\n\n/**\n * Set a location in vertex attributes array to a buffer, specifying\n * its data layout and integer to float conversion and normalization flags\n *\n * @param {WebGLRenderingContext} gl - webgl context\n * @param {GLuint} location - ordinal number of the attribute\n * @param {WebGLBuffer|Buffer} buffer - WebGL buffer to set as value\n * @param {GLuint} target=gl.ARRAY_BUFFER - which target to bind to\n * @param {Object} layout= Optional data layout, defaults to buffer's layout\n * @param {GLuint} layout.size - number of values per element (1-4)\n * @param {GLuint} layout.type - type of values (e.g. gl.FLOAT)\n * @param {GLbool} layout.normalized=false - normalize integers to [-1,1], [0,1]\n * @param {GLuint} layout.integer=false - WebGL2 only, disable int-to-float conv\n * @param {GLuint} layout.stride=0 - supports strided arrays\n * @param {GLuint} layout.offset=0 - supports strided arrays\n */\nexport function setBuffer({\n  gl,\n  location,\n  buffer,\n  target,\n  layout\n} = {}) {\n  assertWebGLContext(gl);\n\n  // Copy main data characteristics from buffer\n  target = glGet(target !== undefined ? target : buffer.target);\n  layout = layout !== undefined ? layout : buffer.layout;\n  assert(target, 'setBuffer needs target');\n  assert(layout, 'setBuffer called on uninitialized buffer');\n\n  // a non-zero named buffer object must be bound to the GL_ARRAY_BUFFER target\n  buffer.bind({target: gl.ARRAY_BUFFER});\n\n  // Attach bound ARRAY_BUFFER with specified buffer format to location\n  if (!layout.integer) {\n    gl.vertexAttribPointer(\n      location,\n      layout.size,\n      glGet(layout.type),\n      layout.normalized,\n      layout.stride,\n      layout.offset\n    );\n  } else {\n    // specifies *integer* data formats and locations of vertex attributes\n    // For glVertexAttribIPointer, Values are always left as integer values.\n    // Only accepts the integer types gl.BYTE, gl.UNSIGNED_BYTE,\n    // gl.SHORT, gl.UNSIGNED_SHORT, gl.INT, gl.UNSIGNED_INT\n    assertWebGL2Context(gl);\n    gl.vertexAttribIPointer(\n      location,\n      layout.size,\n      glGet(layout.type),\n      layout.stride,\n      layout.offset\n    );\n  }\n\n  buffer.unbind({target: gl.ARRAY_BUFFER});\n}\n\n/*\n * Specify values for generic vertex attributes\n * Generic vertex attributes are constant for all vertices\n * Up to 4 values depending on attribute size\n *\n * @param {WebGLRenderingContext} gl - webgl context\n * @param {GLuint} location - ordinal number of the attribute\n * @param {GLuint} divisor - instances that pass between updates of attribute\n */\nexport function setGeneric({gl, location, array}) {\n  log.warn(0, 'VertexAttributes.setGeneric is not well tested');\n  // throw new Error('vertex attribute size must be between 1 and 4');\n\n  if (array instanceof Float32Array) {\n    gl.vertexAttrib4fv(location, array);\n  } else if (array instanceof Int32Array) {\n    assertWebGL2Context(gl);\n    gl.vertexAttribI4iv(location, array);\n  } else if (array instanceof Uint32Array) {\n    assertWebGL2Context(gl);\n    gl.vertexAttribI4uiv(location, array);\n  }\n}\n\n/*\n * Specify values for generic vertex attributes\n * Generic vertex attributes are constant for all vertices\n * Up to 4 values depending on attribute size\n *\n * @param {GLuint} location - ordinal number of the attribute\n * @param {GLuint} divisor - instances that pass between updates of attribute\n */\n/* eslint-disable max-params */\nexport function setGenericValues(gl, location, v0, v1, v2, v3) {\n  log.warn(0, 'VertexAttributes.setGenericValues is not well tested');\n  switch (arguments.length - 1) {\n  case 1: gl.vertexAttrib1f(location, v0); break;\n  case 2: gl.vertexAttrib2f(location, v0, v1); break;\n  case 3: gl.vertexAttrib3f(location, v0, v1, v2); break;\n  case 4: gl.vertexAttrib4f(location, v0, v1, v2, v3); break;\n  default:\n    throw new Error('vertex attribute size must be between 1 and 4');\n  }\n\n  // assert(gl instanceof WebGL2RenderingContext, 'WebGL2 required');\n  // Looks like these will check how many arguments were supplied?\n  // gl.vertexAttribI4i(location, v0, v1, v2, v3);\n  // gl.vertexAttribI4ui(location, v0, v1, v2, v3);\n}\n"]}