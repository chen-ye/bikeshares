{"version":3,"sources":["../../../src/webgl/helpers/format-glsl-error.js"],"names":["GL","shaderName","formatGLSLCompilerError","errLog","src","shaderType","errorStrings","split","errors","i","length","errorString","lineNo","parseInt","isNaN","message","lines","addLineNumbers","line","e","substr","join","trim","name","type","getShaderTypeName","string","start","delim","maxDigits","String","map","lineNumber","digits","prefix","padLeft","result","FRAGMENT_SHADER","VERTEX_SHADER"],"mappings":"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","file":"format-glsl-error.js","sourcesContent":["/* eslint-disable no-continue, max-statements */\nimport GL from '../api';\nimport shaderName from 'glsl-shader-name';\n\n/**\n * Formats a GLSL shader compiler error and generates a string\n * showing the source code around the error.\n *\n * From https://github.com/wwwtyro/gl-format-compiler-error (public domain)\n *\n * @param {String} errLog - error log from gl.getShaderInfoLog\n * @param {String} src - original shader source code\n * @param {Number} shaderType - shader type (GL constant)\n * @return {String} - Formatted strings has the error marked inline with src.\n */\nexport default function formatGLSLCompilerError(errLog, src, shaderType) {\n  const errorStrings = errLog.split(/\\r?\\n/);\n  const errors = {};\n\n  // Parse the error - note: browser and driver dependent\n  for (let i = 0; i < errorStrings.length; i++) {\n    const errorString = errorStrings[i];\n    if (errorString.length <= 1) {\n      continue;\n    }\n    const lineNo = parseInt(errorString.split(':')[2], 10);\n    if (isNaN(lineNo)) {\n      return `Could not parse GLSL compiler error: ${errLog}`;\n    }\n    errors[lineNo] = errorString;\n  }\n\n  // Format the error inline with the code\n  let message = '';\n  const lines = addLineNumbers(src).split(/\\r?\\n/);\n\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i];\n    if (!errors[i + 3] && !errors[i + 2] && !errors[i + 1]) {\n      continue;\n    }\n    message += `${line}\\n`;\n    if (errors[i + 1]) {\n      let e = errors[i + 1];\n      e = e.substr(e.split(':', 3).join(':').length + 1).trim();\n      message += `^^^ ${e}\\n\\n`;\n    }\n  }\n\n  const name = shaderName(src) || 'unknown name (see npm glsl-shader-name)';\n  const type = getShaderTypeName(shaderType);\n  return `GLSL error in ${type} shader ${name}\\n${message}`;\n}\n\n/**\n * Prepends line numbers to each line of a string.\n * The line numbers will be left-padded with spaces to ensure an\n * aligned layout when rendered using monospace fonts.\n *\n * Adapted from https://github.com/Jam3/add-line-numbers, MIT license\n *\n * @param {String} string - multi-line string to add line numbers to\n * @param {Number} start=1 - number of spaces to add\n * @param {String} delim =': ' - injected between line number and original line\n * @return {String} string - The original string with line numbers added\n */\nfunction addLineNumbers(string, start = 1, delim = ': ') {\n  const lines = string.split(/\\r?\\n/);\n  const maxDigits = String(lines.length + start - 1).length;\n  return lines.map((line, i) => {\n    const lineNumber = i + start;\n    const digits = String(lineNumber).length;\n    const prefix = padLeft(lineNumber, maxDigits - digits);\n    return prefix + delim + line;\n  }).join('\\n');\n}\n\n/**\n * Pads a string with a number of spaces (space characters) to the left\n * @param {String} string - string to pad\n * @param {Number} digits - number of spaces to add\n * @return {String} string - The padded string\n */\nfunction padLeft(string, digits) {\n  let result = '';\n  for (let i = 0; i < digits; ++i) {\n    result += ' ';\n  }\n  return `${result}${string}`;\n}\n\nfunction getShaderTypeName(type) {\n  switch (type) {\n  case GL.FRAGMENT_SHADER: return 'fragment';\n  case GL.VERTEX_SHADER: return 'vertex';\n  default: return 'unknown type';\n  }\n}\n"]}