{"version":3,"sources":["../../src/webgl/uniform-buffer-layout.js"],"names":["assert","ERR_ARGUMENT","GL_INT","GL_INT_VEC2","GL_INT_VEC3","GL_INT_VEC4","GL_FLOAT","GL_FLOAT_VEC2","GL_FLOAT_VEC3","GL_FLOAT_VEC4","GL_BOOL","GL_BOOL_VEC2","GL_BOOL_VEC3","GL_BOOL_VEC4","GL_UNSIGNED_INT","GL_UNSIGNED_INT_VEC2","GL_UNSIGNED_INT_VEC3","GL_UNSIGNED_INT_VEC4","GL_FLOAT_MAT2","GL_FLOAT_MAT3","GL_FLOAT_MAT4","GL_FLOAT_MAT2x3","GL_FLOAT_MAT2x4","GL_FLOAT_MAT3x2","GL_FLOAT_MAT3x4","GL_FLOAT_MAT4x2","GL_FLOAT_MAT4x3","UNIFORM_TYPES","UniformBufferLayout","layout","size","key","_addUniform","data","Float32Array","typedArray","Int32Array","buffer","Uint32Array","index","offset","undefined","begin","offsets","end","sizes","subarray","values","_setValue","value","type","set","uniformType","definition","count","_alignTo"],"mappings":";;;;;;;;;;AAAA;AACA,OAAOA,MAAP,MAAmB,QAAnB;;AAEA,IAAMC,eAAe,sCAArB;;AAEA;AACA,IAAMC,SAAS,MAAf;AACA,IAAMC,cAAc,MAApB;AACA,IAAMC,cAAc,MAApB;AACA,IAAMC,cAAc,MAApB;;AAEA,IAAMC,WAAW,MAAjB;AACA,IAAMC,gBAAgB,MAAtB;AACA,IAAMC,gBAAgB,MAAtB;AACA,IAAMC,gBAAgB,MAAtB;;AAEA,IAAMC,UAAU,MAAhB;AACA,IAAMC,eAAe,MAArB;AACA,IAAMC,eAAe,MAArB;AACA,IAAMC,eAAe,MAArB;;AAEA,IAAMC,kBAAkB,MAAxB;AACA,IAAMC,uBAAuB,MAA7B;AACA,IAAMC,uBAAuB,MAA7B;AACA,IAAMC,uBAAuB,MAA7B;;AAEA,IAAMC,gBAAgB,MAAtB;AACA,IAAMC,gBAAgB,MAAtB;AACA,IAAMC,gBAAgB,MAAtB;;AAEA,IAAMC,kBAAkB,MAAxB;AACA,IAAMC,kBAAkB,MAAxB;AACA,IAAMC,kBAAkB,MAAxB;AACA,IAAMC,kBAAkB,MAAxB;AACA,IAAMC,kBAAkB,MAAxB;AACA,IAAMC,kBAAkB,MAAxB;;AAEA;AACA,IAAMC,sEAGHrB,QAHG,EAGQ,CAACA,QAAD,EAAW,CAAX,CAHR,mCAIHC,aAJG,EAIa,CAACD,QAAD,EAAW,CAAX,CAJb,mCAKHE,aALG,EAKa,CAACF,QAAD,EAAW,CAAX,CALb,mCAMHG,aANG,EAMa,CAACH,QAAD,EAAW,CAAX,CANb,mCAQHJ,MARG,EAQM,CAACA,MAAD,EAAS,CAAT,CARN,mCASHC,WATG,EASW,CAACD,MAAD,EAAS,CAAT,CATX,mCAUHE,WAVG,EAUW,CAACF,MAAD,EAAS,CAAT,CAVX,mCAWHG,WAXG,EAWW,CAACH,MAAD,EAAS,CAAT,CAXX,mCAaHY,eAbG,EAae,CAACA,eAAD,EAAkB,CAAlB,CAbf,mCAcHC,oBAdG,EAcoB,CAACD,eAAD,EAAkB,CAAlB,CAdpB,mCAeHE,oBAfG,EAeoB,CAACF,eAAD,EAAkB,CAAlB,CAfpB,mCAgBHG,oBAhBG,EAgBoB,CAACH,eAAD,EAAkB,CAAlB,CAhBpB,mCAkBHJ,OAlBG,EAkBO,CAACJ,QAAD,EAAW,CAAX,CAlBP,mCAmBHK,YAnBG,EAmBY,CAACL,QAAD,EAAW,CAAX,CAnBZ,mCAoBHM,YApBG,EAoBY,CAACN,QAAD,EAAW,CAAX,CApBZ,mCAqBHO,YArBG,EAqBY,CAACP,QAAD,EAAW,CAAX,CArBZ,mCAuBHY,aAvBG,EAuBa,CAACZ,QAAD,EAAW,CAAX,CAvBb,mCAwBHe,eAxBG,EAwBe,CAACf,QAAD,EAAW,CAAX,CAxBf,mCAyBHgB,eAzBG,EAyBe,CAAChB,QAAD,EAAW,CAAX,CAzBf,mCA2BHa,aA3BG,EA2Ba,CAACb,QAAD,EAAW,EAAX,CA3Bb,mCA4BHiB,eA5BG,EA4Be,CAACjB,QAAD,EAAW,EAAX,CA5Bf,mCA6BHkB,eA7BG,EA6Be,CAAClB,QAAD,EAAW,EAAX,CA7Bf,mCA+BHc,aA/BG,EA+Ba,CAACd,QAAD,EAAW,EAAX,CA/Bb,mCAgCHmB,eAhCG,EAgCe,CAACnB,QAAD,EAAW,EAAX,CAhCf,mCAiCHoB,eAjCG,EAiCe,CAACpB,QAAD,EAAW,EAAX,CAjCf,kBAAN;;AAoCA;;IACqBsB,mB;AACnB,+BAAYC,MAAZ,EAAoB;AAAA;;AAAA;;AAClB,SAAKA,MAAL,GAAc,EAAd;AACA,SAAKC,IAAL,GAAY,CAAZ;;AAEA;AACA,SAAK,IAAMC,GAAX,IAAkBF,MAAlB,EAA0B;AACxB,WAAKG,WAAL,CAAiBD,GAAjB,EAAsBF,OAAOE,GAAP,CAAtB;AACD;;AAED;AACA,QAAME,OAAO,IAAIC,YAAJ,CAAiB,KAAKJ,IAAtB,CAAb;AACA,SAAKK,UAAL,mDACG7B,QADH,EACc2B,IADd,gCAEG/B,MAFH,EAEY,IAAIkC,UAAJ,CAAeH,KAAKI,MAApB,CAFZ,gCAGGvB,eAHH,EAGqB,IAAIwB,WAAJ,CAAgBL,KAAKI,MAArB,CAHrB;AAKD;;AAED;;;;;+BACW;AACT,aAAO,KAAKP,IAAL,GAAY,CAAnB;AACD;;AAED;;;;8BACU;AACR,aAAO,KAAKK,UAAL,CAAgB7B,QAAhB,CAAP;AACD;;AAED;;;;+BACWiC,K,EAAO;AAChB,UAAIN,aAAJ;AACA,UAAIO,eAAJ;AACA,UAAID,UAAUE,SAAd,EAAyB;AACvBR,eAAO,KAAKA,IAAZ;AACAO,iBAAS,CAAT;AACD,OAHD,MAGO;AACL,YAAME,QAAQ,KAAKC,OAAL,CAAaJ,KAAb,CAAd;AACA,YAAMK,MAAMF,QAAQ,KAAKG,KAAL,CAAWN,KAAX,CAApB;AACAN,eAAO,KAAKA,IAAL,CAAUa,QAAV,CAAmBJ,KAAnB,EAA0BE,GAA1B,CAAP;AACAJ,iBAASE,QAAQ,CAAjB;AACD;AACD,aAAO,EAACT,UAAD,EAAOO,cAAP,EAAP;AACD;;AAED;;;;gCACYO,M,EAAQ;AAClB,WAAK,IAAMhB,GAAX,IAAkBgB,MAAlB,EAA0B;AACxB,aAAKC,SAAL,CAAejB,GAAf,EAAoBgB,OAAOhB,GAAP,CAApB;AACD;AACD,aAAO,IAAP;AACD;;;8BAESA,G,EAAKkB,K,EAAO;AACpB,UAAMpB,SAAS,KAAKA,MAAL,CAAYE,GAAZ,CAAf;AACA/B,aAAO6B,MAAP,EAAe,sCAAf;AACA,UAAMM,aAAa,KAAKA,UAAL,CAAgBN,OAAOqB,IAAvB,CAAnB;AACA,UAAIrB,OAAOC,IAAP,KAAgB,CAApB,EAAuB;AACrB;AACAK,mBAAWN,OAAOW,MAAlB,IAA4BS,KAA5B;AACD,OAHD,MAGO;AACL;AACAd,mBAAWgB,GAAX,CAAeF,KAAf,EAAsBpB,OAAOW,MAA7B;AACD;AACF;;;gCAEWT,G,EAAKqB,W,EAAa;AAC5B,UAAMC,aAAa1B,cAAcyB,WAAd,CAAnB;AACApD,aAAOqD,UAAP,EAAmBpD,YAAnB;;AAF4B,uCAGNoD,UAHM;AAAA,UAGrBH,IAHqB;AAAA,UAGfI,KAHe;;AAK5B;;;AACA,UAAMd,SAAS,KAAKV,IAApB;AACA;AACA,WAAKA,IAAL,GAAY,KAAKyB,QAAL,CAAc,KAAKzB,IAAnB,EAAyBwB,KAAzB,CAAZ;AACA;AACA,WAAKxB,IAAL,IAAawB,KAAb;;AAEA,WAAKzB,MAAL,CAAYE,GAAZ,IAAmB,EAACmB,UAAD,EAAOpB,MAAMwB,KAAb,EAAoBd,cAApB,EAAnB;AACD;;AAED;;;;6BACSV,I,EAAMwB,K,EAAO;AACpB,cAAQA,KAAR;AACA,aAAK,CAAL;AAAQ,iBAAOxB,IAAP,CADR,CACqB;AACrB,aAAK,CAAL;AAAQ,iBAAOA,OAAOA,OAAO,CAArB,CAFR,CAEgC;AAChC;AAAS,iBAAOA,OAAO,CAAC,IAAIA,OAAO,CAAZ,IAAiB,CAA/B,CAHT,CAG2C;AAH3C;AAKD;;;;;;eAxFkBF,mB","file":"uniform-buffer-layout.js","sourcesContent":["/* eslint-disable camelcase */\nimport assert from 'assert';\n\nconst ERR_ARGUMENT = 'UniformBufferLayout illegal argument';\n\n// Local constants - these will \"collapse\" during minification\nconst GL_INT = 0x1404;\nconst GL_INT_VEC2 = 0x8B53;\nconst GL_INT_VEC3 = 0x8B54;\nconst GL_INT_VEC4 = 0x8B55;\n\nconst GL_FLOAT = 0x1406;\nconst GL_FLOAT_VEC2 = 0x8B50;\nconst GL_FLOAT_VEC3 = 0x8B51;\nconst GL_FLOAT_VEC4 = 0x8B52;\n\nconst GL_BOOL = 0x8B56;\nconst GL_BOOL_VEC2 = 0x8B57;\nconst GL_BOOL_VEC3 = 0x8B58;\nconst GL_BOOL_VEC4 = 0x8B59;\n\nconst GL_UNSIGNED_INT = 0x1405;\nconst GL_UNSIGNED_INT_VEC2 = 0x8DC6;\nconst GL_UNSIGNED_INT_VEC3 = 0x8DC7;\nconst GL_UNSIGNED_INT_VEC4 = 0x8DC8;\n\nconst GL_FLOAT_MAT2 = 0x8B5A;\nconst GL_FLOAT_MAT3 = 0x8B5B;\nconst GL_FLOAT_MAT4 = 0x8B5C;\n\nconst GL_FLOAT_MAT2x3 = 0x8B65;\nconst GL_FLOAT_MAT2x4 = 0x8B66;\nconst GL_FLOAT_MAT3x2 = 0x8B67;\nconst GL_FLOAT_MAT3x4 = 0x8B68;\nconst GL_FLOAT_MAT4x2 = 0x8B69;\nconst GL_FLOAT_MAT4x3 = 0x8B6A;\n\n// Uniform table for std140\nconst UNIFORM_TYPES = {\n  // No samplers in uniform blocks\n\n  [GL_FLOAT]: [GL_FLOAT, 1],\n  [GL_FLOAT_VEC2]: [GL_FLOAT, 2],\n  [GL_FLOAT_VEC3]: [GL_FLOAT, 3],\n  [GL_FLOAT_VEC4]: [GL_FLOAT, 4],\n\n  [GL_INT]: [GL_INT, 1],\n  [GL_INT_VEC2]: [GL_INT, 2],\n  [GL_INT_VEC3]: [GL_INT, 3],\n  [GL_INT_VEC4]: [GL_INT, 4],\n\n  [GL_UNSIGNED_INT]: [GL_UNSIGNED_INT, 1],\n  [GL_UNSIGNED_INT_VEC2]: [GL_UNSIGNED_INT, 2],\n  [GL_UNSIGNED_INT_VEC3]: [GL_UNSIGNED_INT, 3],\n  [GL_UNSIGNED_INT_VEC4]: [GL_UNSIGNED_INT, 4],\n\n  [GL_BOOL]: [GL_FLOAT, 1],\n  [GL_BOOL_VEC2]: [GL_FLOAT, 2],\n  [GL_BOOL_VEC3]: [GL_FLOAT, 3],\n  [GL_BOOL_VEC4]: [GL_FLOAT, 4],\n\n  [GL_FLOAT_MAT2]: [GL_FLOAT, 8], // 4\n  [GL_FLOAT_MAT2x3]: [GL_FLOAT, 8], // 6\n  [GL_FLOAT_MAT2x4]: [GL_FLOAT, 8], // 8\n\n  [GL_FLOAT_MAT3]: [GL_FLOAT, 12], // 9\n  [GL_FLOAT_MAT3x2]: [GL_FLOAT, 12], // 6\n  [GL_FLOAT_MAT3x4]: [GL_FLOAT, 12], // 12\n\n  [GL_FLOAT_MAT4]: [GL_FLOAT, 16], // 16\n  [GL_FLOAT_MAT4x2]: [GL_FLOAT, 16], // 8\n  [GL_FLOAT_MAT4x3]: [GL_FLOAT, 16] // 12\n};\n\n// Std140 layout for uniforms\nexport default class UniformBufferLayout {\n  constructor(layout) {\n    this.layout = {};\n    this.size = 0;\n\n    // Add layout (type, size and offset) definitions for each uniform in the layout\n    for (const key in layout) {\n      this._addUniform(key, layout[key]);\n    }\n\n    // Allocate three typed arrays pointing at same memory\n    const data = new Float32Array(this.size);\n    this.typedArray = {\n      [GL_FLOAT]: data,\n      [GL_INT]: new Int32Array(data.buffer),\n      [GL_UNSIGNED_INT]: new Uint32Array(data.buffer)\n    };\n  }\n\n  // Get number of bytes needed for buffer allocation\n  getBytes() {\n    return this.size * 4;\n  }\n\n  // Get the current data as Float32Array, for bufferSubData\n  getData() {\n    return this.typedArray[GL_FLOAT];\n  }\n\n  // Get offset and data for one object (for bufferSubData)\n  getSubData(index) {\n    let data;\n    let offset;\n    if (index === undefined) {\n      data = this.data;\n      offset = 0;\n    } else {\n      const begin = this.offsets[index];\n      const end = begin + this.sizes[index];\n      data = this.data.subarray(begin, end);\n      offset = begin * 4;\n    }\n    return {data, offset};\n  }\n\n  // Set a map of values\n  setUniforms(values) {\n    for (const key in values) {\n      this._setValue(key, values[key]);\n    }\n    return this;\n  }\n\n  _setValue(key, value) {\n    const layout = this.layout[key];\n    assert(layout, 'UniformLayoutStd140 illegal argument');\n    const typedArray = this.typedArray[layout.type];\n    if (layout.size === 1) {\n      // single value -> just set it\n      typedArray[layout.offset] = value;\n    } else {\n      // vector/matrix -> copy the supplied (typed) array, starting from offset\n      typedArray.set(value, layout.offset);\n    }\n  }\n\n  _addUniform(key, uniformType) {\n    const definition = UNIFORM_TYPES[uniformType];\n    assert(definition, ERR_ARGUMENT);\n    const [type, count] = definition;\n\n    // Get the current offset and calculate the next offset based on aligned size of this element\n    const offset = this.size;\n    // First, align (bump) current offset to an even multiple of current object (1, 2, 4)\n    this.size = this._alignTo(this.size, count);\n    // Then, add our object's padded size ((1, 2, multiple of 4) to the current offset\n    this.size += count;\n\n    this.layout[key] = {type, size: count, offset};\n  }\n\n  // Align offset to 1, 2 or 4 elements (4, 8 or 16 bytes)\n  _alignTo(size, count) {\n    switch (count) {\n    case 1: return size; // Pad upwards to even multiple of 2\n    case 2: return size + size % 2; // Pad upwards to even multiple of 2\n    default: return size + (4 - size % 4) % 4; // Pad upwards to even multiple of 4\n    }\n  }\n}\n"]}