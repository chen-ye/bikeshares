{"version":3,"sources":["../../../src/webgl/api/debug-parameters.js"],"names":["GL","Buffer","FenceSync","Framebuffer","Program","Renderbuffer","Sampler","Texture","GLenum","GLfloat","GLint","GLuint","GLboolean","BUFFER_PARAMETERS","BUFFER_SIZE","webgl1","BUFFER_USAGE","FENCE_SYNC_PARAMETERS","OBJECT_TYPE","SYNC_STATUS","SYNC_CONDITION","SYNC_FLAGS","FRAMEBUFFER_ATTACHMENT_PARAMETERS","FRAMEBUFFER_ATTACHMENT_OBJECT_NAME","FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE","FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE","FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL","FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING","FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER","FRAMEBUFFER_ATTACHMENT_RED_SIZE","FRAMEBUFFER_ATTACHMENT_GREEN_SIZE","FRAMEBUFFER_ATTACHMENT_BLUE_SIZE","FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE","FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE","FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE","FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE","FRAMEBUFFER_STATUS","FRAMEBUFFER_COMPLETE","FRAMEBUFFER_INCOMPLETE_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_DIMENSIONS","FRAMEBUFFER_UNSUPPORTED","FRAMEBUFFER_INCOMPLETE_MULTISAMPLE","PROGRAM_PARAMETERS","DELETE_STATUS","LINK_STATUS","VALIDATE_STATUS","ATTACHED_SHADERS","ACTIVE_ATTRIBUTES","ACTIVE_UNIFORMS","TRANSFORM_FEEDBACK_BUFFER_MODE","webgl2","TRANSFORM_FEEDBACK_VARYINGS","ACTIVE_UNIFORM_BLOCKS","RENDERBUFFER_PARAMETERS","RENDERBUFFER_WIDTH","RENDERBUFFER_HEIGHT","RENDERBUFFER_INTERNAL_FORMAT","type","RGBA4","RENDERBUFFER_GREEN_SIZE","RENDERBUFFER_BLUE_SIZE","RENDERBUFFER_RED_SIZE","RENDERBUFFER_ALPHA_SIZE","RENDERBUFFER_DEPTH_SIZE","RENDERBUFFER_STENCIL_SIZE","RENDERBUFFER_SAMPLES","SAMPLER_PARAMETERS","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_WRAP_R","TEXTURE_BASE_LEVEL","TEXTURE_MAX_LEVEL","TEXTURE_COMPARE_FUNC","TEXTURE_COMPARE_MODE","TEXTURE_MIN_LOD","TEXTURE_MAX_LOD","TEXTURE_PARAMETERS","LINEAR","NEAREST_MIPMAP_LINEAR","REPEAT","LEQUAL","NONE","TEXTURE_WIDTH","TEXTURE_HEIGHT","installParameterDefinitions","PARAMETERS","ATTACHMENT_PARAMETERS","STATUS"],"mappings":"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","file":"debug-parameters.js","sourcesContent":["// Parameter support.\n// Installs definitions that enable querying an object for all its parameters\n// with resource.getParameters(). This is mainly useful during debugging.\n// Note: Kept separate to avoid bundling in production applications\n\nimport GL from '../../webgl-utils/constants';\n\n// TODO - separate install parameter definitions function from api metadata\nimport Buffer from '../buffer';\nimport FenceSync from '../fence-sync';\nimport Framebuffer from '../framebuffer';\nimport Program from '../program';\nimport Renderbuffer from '../renderbuffer';\nimport Sampler from '../sampler';\n// import Shader from './shader';\nimport Texture from '../texture';\n\n// WebGL specification 'types'\nexport const GLenum = 'GLenum';\nexport const GLfloat = 'GLfloat';\nexport const GLint = 'GLint';\nexport const GLuint = 'GLint';\nexport const GLboolean = 'GLboolean';\n\n/*\n TODO - will most likely remove some of these fields from the main struct\n but they can be useful for debugging/seer integration, so keep them here for now\nexport const DBG_PARAMETERS = {\n  blend: {\n    type: GLboolean,\n    params: GL.BLEND,\n    value: false,\n    setter: (gl, value) => value ? gl.enable(GL.BLEND) : gl.disable(GL.BLEND)\n  },\n\n  blendColor: {\n    type: new Float32Array(4),\n    value: new Float32Array([0, 0, 0, 0]),\n    params: GL.BLEND_COLOR,\n    setter: (gl, value) => gl.blendColor(...value)\n  },\n\n  blendEquation: {\n    type: [GLenum, GLenum],\n    object: ['rgb', 'alpha'],\n    alias: 'blendEquationSeparate',\n    value: [GL.FUNC_ADD, GL.FUNC_ADD],\n    params: [GL.BLEND_EQUATION_RGB, GL.BLEND_EQUATION_ALPHA],\n    setter: (gl, value) => gl.blendEquationSeparate(...value),\n    normalizeArgs: args => isArray(args) ? args : [args, args]\n  },\n\n  // blend func\n  blendFunc: {\n    type: [GLenum, GLenum, GLenum, GLenum],\n    object: ['srcRgb', 'dstRgb', 'srcAlpha', 'dstAlpha'],\n    value: [GL.ONE, GL.ZERO, GL.ONE, GL.ZERO],\n    params: [GL.BLEND_SRC_RGB, GL.BLEND_DST_RGB, GL.BLEND_SRC_ALPHA, GL.BLEND_DST_ALPHA],\n    setter: (gl, value) => gl.blendFuncSeparate(...value),\n    normalizeArgs: args => isArray(args) && args.length === 3 ? [...args, ...args] : args\n  },\n\n  clearColor: {\n    type: new Float32Array(4),\n    params: GL.COLOR_CLEAR_VALUE,\n    value: new Float32Array([0, 0, 0, 0]), // TBD\n    setter: (gl, value) => gl.clearColor(...value)\n  },\n\n  colorMask: {\n    type: [GLboolean, GLboolean, GLboolean, GLboolean],\n    params: GL.COLOR_WRITEMASK,\n    value: [true, true, true, true],\n    setter: (gl, value) => gl.colorMask(...value)\n  },\n\n  // TODO - We have a name clash here\n  cullFace: {\n    type: GLboolean,\n    params: GL.CULL_FACE,\n    value: false,\n    setter: (gl, value) => value ? gl.enable(GL.CULL_FACE) : gl.disable(GL.CULL_FACE)\n  },\n\n  cullFaceMode: {\n    type: GLenum,\n    params: GL.CULL_FACE_MODE,\n    value: GL.BACK,\n    setter: (gl, value) => gl.cullFace(value)\n  },\n\n  depthTest: {\n    type: GLboolean,\n    params: GL.DEPTH_TEST,\n    value: false,\n    setter: (gl, value) => value ? gl.enable(GL.DEPTH_TEST) : gl.disable(GL.DEPTH_TEST)\n  },\n\n  depthClearValue: {\n    type: GLfloat,\n    params: GL.DEPTH_CLEAR_VALUE,\n    value: 1,\n    setter: (gl, value) => gl.clearDepth(value)\n  },\n\n  depthFunc: {\n    type: GLenum,\n    params: GL.DEPTH_FUNC,\n    value: GL.LESS,\n    setter: (gl, value) => gl.depthFunc(value)\n  },\n\n  depthRange: {\n    type: new Float32Array(2),\n    object: ['min', 'max'],\n    params: GL.DEPTH_RANGE,\n    value: new Float32Array([0, 1]), // TBD\n    setter: (gl, value) => gl.depthRange(...value)\n  },\n\n  depthWritemask: {\n    type: GLboolean,\n    params: GL.DEPTH_WRITEMASK,\n    value: true,\n    setter: (gl, value) => gl.depthMask(value)\n  },\n\n  dither: {\n    type: GLboolean,\n    params: GL.DITHER,\n    value: true,\n    setter: (gl, value) => value ? gl.enable(GL.DITHER) : gl.disable(GL.DITHER)\n  },\n\n  fragmentShaderDerivativeHint: {\n    type: GLenum,\n    params: GL.FRAGMENT_SHADER_DERIVATIVE_HINT,\n    value: GL.DONT_CARE,\n    setter: (gl, value) => gl.hint(GL.FRAGMENT_SHADER_DERIVATIVE_HINT, value),\n    gl1: 'OES_standard_derivatives'\n  },\n\n  frontFace: {\n    type: GLenum,\n    params: GL.FRONT_FACE,\n    value: GL.CCW,\n    setter: (gl, value) => gl.frontFace(value)\n  },\n\n  // Hint for quality of images generated with glGenerateMipmap\n  generateMipmapHint: {\n    type: GLenum,\n    params: GL.GENERATE_MIPMAP_HINT,\n    value: GL.DONT_CARE,\n    setter: (gl, value) => gl.hint(GL.GENERATE_MIPMAP_HINT, value)\n  },\n\n  lineWidth: {\n    type: GLfloat,\n    params: GL.LINE_WIDTH,\n    value: 1,\n    setter: (gl, value) => gl.lineWidth(value)\n  },\n\n  polygonOffsetFill: {\n    type: GLboolean,\n    params: GL.POLYGON_OFFSET_FILL,\n    value: false,\n    setter: (gl, value) =>\n      value ? gl.enable(GL.POLYGON_OFFSET_FILL) : gl.disable(GL.POLYGON_OFFSET_FILL)\n  },\n\n  // Add small offset to fragment depth values (by factor × DZ + r × units)\n  // Useful for rendering hidden-line images, for applying decals to surfaces,\n  // and for rendering solids with highlighted edges.\n  // https://www.khronos.org/opengles/sdk/docs/man/xhtml/glPolygonOffset.xml\n  polygonOffset: {\n    type: [GLfloat, GLfloat],\n    object: ['factor', 'units'],\n    params: [GL.POLYGON_OFFSET_FACTOR, GL.POLYGON_OFFSET_UNITS],\n    value: [0, 0],\n    setter: (gl, value) => gl.polygonOffset(...value)\n  },\n\n  // TODO - enabling multisampling\n  // glIsEnabled with argument GL_SAMPLE_ALPHA_TO_COVERAGE\n  // glIsEnabled with argument GL_SAMPLE_COVERAGE\n\n  // specify multisample coverage parameters\n  // https://www.khronos.org/opengles/sdk/docs/man/xhtml/glSampleCoverage.xml\n  sampleCoverage: {\n    type: [GLfloat, GLboolean],\n    object: ['value', 'invert'],\n    params: [GL.SAMPLE_COVERAGE_VALUE, GL.SAMPLE_COVERAGE_INVERT],\n    value: [1.0, false],\n    setter: (gl, value) => gl.sampleCoverage(...value)\n  },\n\n  scissorTest: {\n    type: GLboolean,\n    params: GL.SCISSOR_TEST,\n    value: false,\n    setter: (gl, value) => value ? gl.enable(GL.SCISSOR_TEST) : gl.disable(GL.SCISSOR_TEST)\n  },\n\n  scissorBox: {\n    type: new Int32Array(4),\n    object: ['x', 'y', 'width', 'height'],\n    // When scissor test enabled we expect users to set correct scissor box,\n    // otherwise we default to following value array.\n    params: GL.SCISSOR_BOX,\n    value: new Int32Array([0, 0, 1024, 1024]),\n    setter: (gl, value) => gl.scissor(...value)\n  },\n\n  stencilTest: {\n    type: GLboolean,\n    params: GL.STENCIL_TEST,\n    value: false,\n    setter: (gl, value) => value ? gl.enable(GL.STENCIL_TEST) : gl.disable(GL.STENCIL_TEST)\n  },\n\n  // Sets index used when stencil buffer is cleared.\n  stencilClearValue: {\n    type: GLint,\n    params: GL.STENCIL_CLEAR_VALUE,\n    value: 0,\n    setter: (gl, value) => gl.clearStencil(value)\n  },\n\n  // Sets bit mask enabling writing of individual bits in the stencil planes\n  // https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilMaskSeparate.xml\n  stencilMask: {\n    type: [GLuint, GLuint],\n    object: ['mask', 'backMask'],\n    value: [0xFFFFFFFF, 0xFFFFFFFF],\n    params: [GL.STENCIL_WRITEMASK, GL.STENCIL_BACK_WRITEMASK],\n    setter: (gl, value) => {\n      value = isArray(value) ? value : [value, value];\n      const [mask, backMask] = value;\n      gl.stencilMaskSeparate(GL.FRONT, mask);\n      gl.stencilMaskSeparate(GL.BACK, backMask);\n    }\n  },\n\n  // Set stencil testing function, reference value and mask for front and back\n  // https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilFuncSeparate.xml\n  stencilFunc: {\n    type: [GLenum, GLint, GLuint, GLenum, GLint, GLuint],\n    object: [\n      'func', 'ref', 'valueMask', 'backFunc', 'backRef', 'backValueMask'\n    ],\n    value: [GL.ALWAYS, 0, 0xFFFFFFFF, GL.ALWAYS, 0, 0xFFFFFFFF],\n    params: [\n      // front\n      GL.STENCIL_FUNC,\n      GL.STENCIL_REF,\n      GL.STENCIL_VALUE_MASK,\n      // back\n      GL.STENCIL_BACK_FUNC,\n      GL.STENCIL_BACK_REF,\n      GL.STENCIL_BACK_VALUE_MASK\n    ],\n    setter: (gl, value) => {\n      const [func, ref, mask, backFunc, backRef, backMask] = value;\n      gl.stencilFuncSeparate(GL.FRONT, func, ref, mask);\n      gl.stencilFuncSeparate(GL.BACK, backFunc, backRef, backMask);\n    }\n  },\n\n  // Specifies the action to take when the stencil test fails, front and back.\n  // Stencil test fail action, depth test fail action, pass action\n  // GL.KEEP, GL.ZERO, GL.REPLACE, GL.INCR, GL.INCR_WRAP, GL.DECR, GL.DECR_WRAP,\n  // and GL.INVERT\n  // https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilOpSeparate.xml\n  stencilOp: {\n    type: [GLenum, GLenum, GLenum, GLenum, GLenum, GLenum],\n    object: [\n      'fail', 'passDepthFail', 'passDepthPass',\n      'backFail', 'backPassDepthFail', 'backPassDepthPass'\n    ],\n    params: [\n      // front\n      GL.STENCIL_FAIL,\n      GL.STENCIL_PASS_DEPTH_FAIL,\n      GL.STENCIL_PASS_DEPTH_PASS,\n      // back\n      GL.STENCIL_BACK_FAIL,\n      GL.STENCIL_BACK_PASS_DEPTH_FAIL,\n      GL.STENCIL_BACK_PASS_DEPTH_PASS\n    ],\n    value: [GL.KEEP, GL.KEEP, GL.KEEP, GL.KEEP, GL.KEEP, GL.KEEP],\n    setter: (gl, value) => {\n      const [sfail, dpfail, dppass, backSfail, backDpfail, backDppass] = value;\n      gl.stencilOpSeparate(GL.FRONT, sfail, dpfail, dppass);\n      gl.stencilOpSeparate(GL.BACK, backSfail, backDpfail, backDppass);\n    }\n  },\n\n  viewport: {\n    type: new Int32Array(4),\n    object: ['x', 'y', 'width', 'height'],\n    // We use [0, 0, 1024, 1024] as default, but usually this is updated in each frame.\n    params: GL.VIEWPORT,\n    value: new Int32Array([0, 0, 1024, 1024]),\n    setter: (gl, value) => gl.viewport(...value)\n  },\n\n  // WEBGL1 PIXEL PACK/UNPACK MODES\n\n  // Packing of pixel data in memory (1,2,4,8)\n  [GL.PACK_ALIGNMENT]: {\n    type: GLint,\n    params: GL.PACK_ALIGNMENT,\n    value: 4,\n    setter: (gl, value) => gl.pixelStorei(GL.PACK_ALIGNMENT, value)\n  },\n  // Unpacking pixel data from memory(1,2,4,8)\n  [GL.UNPACK_ALIGNMENT]: {\n    type: GLint,\n    params: GL.UNPACK_ALIGNMENT,\n    value: 4,\n    setter: (gl, value) => gl.pixelStorei(GL.UNPACK_ALIGNMENT, value)\n  },\n  // Flip source data along its vertical axis\n  [GL.UNPACK_FLIP_Y_WEBGL]: {\n    type: GLboolean,\n    params: GL.UNPACK_FLIP_Y_WEBGL,\n    value: false,\n    setter: (gl, value) => gl.pixelStorei(GL.UNPACK_FLIP_Y_WEBGL, value)\n  },\n  // Multiplies the alpha channel into the other color channels\n  [GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL]: {\n    type: GLboolean,\n    params: GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL,\n    value: false,\n    setter: (gl, value) => gl.pixelStorei(GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL, value)\n  },\n  // Default color space conversion or no color space conversion.\n  [GL.UNPACK_COLORSPACE_CONVERSION_WEBGL]: {\n    type: GLenum,\n    params: GL.UNPACK_COLORSPACE_CONVERSION_WEBGL,\n    value: GL.BROWSER_DEFAULT_WEBGL,\n    setter: (gl, value) => gl.pixelStorei(GL.UNPACK_COLORSPACE_CONVERSION_WEBGL, value)\n  },\n\n  // WEBGL2 PIXEL PACK/UNPACK MODES\n\n  // Number of pixels in a row.\n  [GL.PACK_ROW_LENGTH]: {\n    type: GLint,\n    params: GL.PACK_ROW_LENGTH,\n    value: 0,\n    setter: (gl, value) => gl.pixelStorei(GL.PACK_ROW_LENGTH, value),\n    webgl2: true\n  },\n  // Number of pixels skipped before the first pixel is written into memory.\n  [GL.PACK_SKIP_PIXELS]: {\n    type: GLint,\n    params: GL.PACK_SKIP_PIXELS,\n    value: 0,\n    setter: (gl, value) => gl.pixelStorei(GL.PACK_SKIP_PIXELS, value),\n    webgl2: true\n  },\n  // Number of rows of pixels skipped before first pixel is written to memory.\n  [GL.PACK_SKIP_ROWS]: {\n    type: GLint,\n    params: GL.PACK_SKIP_ROWS,\n    value: 0,\n    setter: (gl, value) => gl.pixelStorei(GL.PACK_SKIP_ROWS, value),\n    webgl2: true\n  },\n  // Number of pixels in a row.\n  [GL.UNPACK_ROW_LENGTH]: {\n    type: GLint,\n    params: GL.UNPACK_ROW_LENGTH,\n    value: 0,\n    setter: (gl, value) => gl.pixelStorei(GL.UNPACK_ROW_LENGTH, value),\n    webgl2: true\n  },\n  // Image height used for reading pixel data from memory\n  [GL.UNPACK_IMAGE_HEIGHT]: {\n    type: GLint,\n    params: GL.UNPACK_IMAGE_HEIGHT,\n    value: 0,\n    setter: (gl, value) => gl.pixelStorei(GL.UNPACK_IMAGE_HEIGHT, value),\n    webgl2: true\n  },\n  // Number of pixel images skipped before first pixel is read from memory\n  [GL.UNPACK_SKIP_PIXELS]: {\n    type: GLint,\n    params: GL.UNPACK_SKIP_PIXELS,\n    value: 0,\n    setter: (gl, value) => gl.pixelStorei(GL.UNPACK_SKIP_PIXELS, value),\n    webgl2: true\n  },\n  // Number of rows of pixels skipped before first pixel is read from memory\n  [GL.UNPACK_SKIP_ROWS]: {\n    type: GLint,\n    params: GL.UNPACK_SKIP_ROWS,\n    value: 0,\n    setter: (gl, value) => gl.pixelStorei(GL.UNPACK_SKIP_ROWS, value),\n    webgl2: true\n  },\n  // Number of pixel images skipped before first pixel is read from memory\n  [GL.UNPACK_SKIP_IMAGES]: {\n    type: GLint,\n    params: GL.UNPACK_SKIP_IMAGES,\n    value: 0,\n    setter: (gl, value) => gl.pixelStorei(GL.UNPACK_SKIP_IMAGES, value),\n    webgl2: true\n  }\n};\n*/\n\nconst BUFFER_PARAMETERS = {\n  [GL.BUFFER_SIZE]: {webgl1: 0}, // GLint indicating the size of the buffer in bytes.\n  [GL.BUFFER_USAGE]: {webgl1: 0} // GLenum indicating the usage pattern of the buffer.\n};\n\nconst FENCE_SYNC_PARAMETERS = [\n  GL.OBJECT_TYPE, // GLenum, type of sync object (always GL.SYNC_FENCE).\n  GL.SYNC_STATUS, // GLenum, status of sync object (GL.SIGNALED/GL.UNSIGNALED)\n  GL.SYNC_CONDITION, // GLenum. object condition (always GL.SYNC_GPU_COMMANDS_COMPLETE).\n  GL.SYNC_FLAGS // GLenum, flags sync object was created with (always 0)\n];\n\nconst FRAMEBUFFER_ATTACHMENT_PARAMETERS = [\n  GL.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME, // WebGLRenderbuffer or WebGLTexture\n  GL.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE, // GL.RENDERBUFFER, GL.TEXTURE, GL.NONE\n  GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE, // GL.TEXTURE_CUBE_MAP_POSITIVE_X, etc.\n  GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL, // GLint\n  // EXT_sRGB or WebGL2\n  GL.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING, // GL.LINEAR, GL.SRBG\n  // WebGL2\n  GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_RED_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE\n  // GL.FLOAT, GL.INT, GL.UNSIGNED_INT, GL.SIGNED_NORMALIZED, OR GL.UNSIGNED_NORMALIZED.\n];\n\nconst FRAMEBUFFER_STATUS = {\n  [GL.FRAMEBUFFER_COMPLETE]:\n    'Success. Framebuffer is correctly set up',\n  [GL.FRAMEBUFFER_INCOMPLETE_ATTACHMENT]:\n    'Framebuffer attachment types mismatched or some attachment point not attachment complete',\n  [GL.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT]:\n    'Framebuffer has no attachment',\n  [GL.FRAMEBUFFER_INCOMPLETE_DIMENSIONS]:\n    'Framebuffer attachments do not have the same size',\n  [GL.FRAMEBUFFER_UNSUPPORTED]:\n    'Framebuffer attachment format not supported or depth and stencil attachments are not same',\n  // When using a WebGL 2 context, the following values can be returned\n  [GL.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE]:\n    'Framebuffer attachement SAMPLES differs among renderbuffers, or are mixed with textures'\n};\n\nconst PROGRAM_PARAMETERS = {\n  [GL.DELETE_STATUS]: {webgl1: 0}, // GLboolean\n  [GL.LINK_STATUS]: {webgl1: 0}, // GLboolean\n  [GL.VALIDATE_STATUS]: {webgl1: 0}, // GLboolean\n  [GL.ATTACHED_SHADERS]: {webgl1: 0}, // GLint\n  [GL.ACTIVE_ATTRIBUTES]: {webgl1: 0}, // GLint\n  [GL.ACTIVE_UNIFORMS]: {webgl1: 0}, // GLint\n  [GL.TRANSFORM_FEEDBACK_BUFFER_MODE]: {webgl2: 0}, // SEPARATE_ATTRIBS/INTERLEAVED_ATTRIBS\n  [GL.TRANSFORM_FEEDBACK_VARYINGS]: {webgl2: 0}, // GLint\n  [GL.ACTIVE_UNIFORM_BLOCKS]: {webgl2: 0} // GLint\n};\n\n//  parameters\nconst RENDERBUFFER_PARAMETERS = {\n  // WebGL1 parameters\n  [GL.RENDERBUFFER_WIDTH]: {webgl1: 0}, // {GLint} - height of the image of renderbuffer.\n  [GL.RENDERBUFFER_HEIGHT]: {webgl1: 0}, // {GLint} - height of the image of renderbuffer.\n\n  // Internal format of the currently bound renderbuffer.\n  // The default is GL.RGBA4. Possible return values:\n  // GL.RGBA4: 4 red bits, 4 green bits, 4 blue bits 4 alpha bits.\n  // GL.RGB565: 5 red bits, 6 green bits, 5 blue bits.\n  // GL.RGB5_A1: 5 red bits, 5 green bits, 5 blue bits, 1 alpha bit.\n  // GL.DEPTH_COMPONENT16: 16 depth bits.\n  // GL.STENCIL_INDEX8: 8 stencil bits.\n  [GL.RENDERBUFFER_INTERNAL_FORMAT]: {type: 'GLenum', webgl1: GL.RGBA4},\n\n  [GL.RENDERBUFFER_GREEN_SIZE]: {webgl1: 0}, // {GLint} - resolution (bits) of green color\n  [GL.RENDERBUFFER_BLUE_SIZE]: {webgl1: 0}, // {GLint} - resolution (bits) of blue color\n  [GL.RENDERBUFFER_RED_SIZE]: {webgl1: 0}, // {GLint} - resolution (bits) of red color\n  [GL.RENDERBUFFER_ALPHA_SIZE]: {webgl1: 0}, // {GLint} - resolution (bits) of alpha component\n  [GL.RENDERBUFFER_DEPTH_SIZE]: {webgl1: 0}, // {GLint} - resolution (bits) of depth component\n  [GL.RENDERBUFFER_STENCIL_SIZE]: {webgl1: 0}, // {GLint} - resolution (bits) of stencil component\n\n  // When using a WebGL 2 context, the following value is available\n  [GL.RENDERBUFFER_SAMPLES]: {webgl2: 1}\n};\n\nconst SAMPLER_PARAMETERS = {\n  [GL.TEXTURE_MAG_FILTER]: {webgl2: true}, // texture magnification filter\n  [GL.TEXTURE_MIN_FILTER]: {webgl2: true}, // texture minification filter\n  [GL.TEXTURE_WRAP_S]: {webgl2: true}, // texture wrapping function for texture coordinate s\n  [GL.TEXTURE_WRAP_T]: {webgl2: true}, // texture wrapping function for texture coordinate t\n  [GL.TEXTURE_WRAP_R]: {webgl2: true}, // texture wrapping function for texture coordinate r\n  [GL.TEXTURE_BASE_LEVEL]: {webgl2: true}, // Texture mipmap level\n  [GL.TEXTURE_MAX_LEVEL]: {webgl2: true}, // Maximum texture mipmap array level\n  [GL.TEXTURE_COMPARE_FUNC]: {webgl2: true}, // texture comparison function\n  [GL.TEXTURE_COMPARE_MODE]: {webgl2: true}, // texture comparison mode\n  [GL.TEXTURE_MIN_LOD]: {webgl2: true}, // minimum level-of-detail value\n  [GL.TEXTURE_MAX_LOD]: {webgl2: true} // maximum level-of-detail value\n\n  // [GL.TEXTURE_MAX_ANISOTROPY_EXT]: {webgl2: 'EXT_texture_filter_anisotropic'}\n};\n\n// const SHADER_PARAMETERS = [\n//   GL.DELETE_STATUS, // GLboolean - whether shader is flagged for deletion.\n//   GL.COMPILE_STATUS, // GLboolean - was last shader compilation successful.\n//   GL.SHADER_TYPE // GLenum - GL.VERTEX_SHADER or GL.FRAGMENT_SHADER.\n// ];\n\nconst TEXTURE_PARAMETERS = {\n  // WEBGL1\n  [GL.TEXTURE_MAG_FILTER]: {type: 'GLenum', webgl1: GL.LINEAR}, // texture magnification filter\n  [GL.TEXTURE_MIN_FILTER]: {type: 'GLenum', webgl1: GL.NEAREST_MIPMAP_LINEAR}, // minification filt.\n  [GL.TEXTURE_WRAP_S]: {type: 'GLenum', webgl1: GL.REPEAT}, // texture wrapping for coordinate s\n  [GL.TEXTURE_WRAP_T]: {type: 'GLenum', webgl1: GL.REPEAT}, // texture wrapping for texture t\n\n  // WEBGL2\n  [GL.TEXTURE_WRAP_R]: {type: 'GLenum', webgl2: GL.REPEAT}, // texture wrapping for texture r\n  [GL.TEXTURE_BASE_LEVEL]: {webgl2: 0}, // Texture mipmap level\n  [GL.TEXTURE_MAX_LEVEL]: {webgl2: 1000}, // Maximum texture mipmap array level\n  [GL.TEXTURE_COMPARE_FUNC]: {type: 'GLenum', webgl2: GL.LEQUAL}, // texture comparison function\n  [GL.TEXTURE_COMPARE_MODE]: {type: 'GLenum', webgl2: GL.NONE}, // texture comparison mode\n  [GL.TEXTURE_MIN_LOD]: {webgl2: -1000}, // minimum level-of-detail value\n  [GL.TEXTURE_MAX_LOD]: {webgl2: 1000}, // maximum level-of-detail value\n\n  // WebGL Extensions\n  // [GL.TEXTURE_MAX_ANISOTROPY_EXT]: {webgl1: 1.0, extension: 'EXT_texture_filter_anisotropic'},\n\n  // Emulated parameters - These OpenGL parameters are not supported by OpenGL ES\n  [GL.TEXTURE_WIDTH]: {webgl1: 0},\n  [GL.TEXTURE_HEIGHT]: {webgl1: 0}\n};\n\nexport function installParameterDefinitions() {\n  Buffer.PARAMETERS = BUFFER_PARAMETERS;\n  FenceSync.PARAMETERS = FENCE_SYNC_PARAMETERS;\n  Framebuffer.ATTACHMENT_PARAMETERS = FRAMEBUFFER_ATTACHMENT_PARAMETERS;\n  Framebuffer.STATUS = FRAMEBUFFER_STATUS;\n  Program.PARAMETERS = PROGRAM_PARAMETERS;\n  Renderbuffer.PARAMETERS = RENDERBUFFER_PARAMETERS;\n  Sampler.PARAMETERS = SAMPLER_PARAMETERS;\n  // Shader.PARAMETERS = SHADER_PARAMETERS;\n  Texture.PARAMETERS = TEXTURE_PARAMETERS;\n}\n"]}