{"version":3,"sources":["../../src/webgl/texture-cube.js"],"names":["GL","Texture","assert","FACES","TEXTURE_CUBE_MAP_POSITIVE_X","TEXTURE_CUBE_MAP_NEGATIVE_X","TEXTURE_CUBE_MAP_POSITIVE_Y","TEXTURE_CUBE_MAP_NEGATIVE_Y","TEXTURE_CUBE_MAP_POSITIVE_Z","TEXTURE_CUBE_MAP_NEGATIVE_Z","TextureCube","gl","opts","Object","assign","target","TEXTURE_CUBE_MAP","initialize","seal","format","RGBA","mipmaps","width","height","type","UNSIGNED_BYTE","dataFormat","_deduceParameters","_deduceImageSize","data","setCubeMapImageData","generateMipmap","face","x","y","mipmapLevel","_subImage","pixels","border","bind","texImage2D","index","undefined","activeTexture","TEXTURE0","bindTexture","handle"],"mappings":"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","file":"texture-cube.js","sourcesContent":["import {GL} from './gl-constants';\nimport Texture from './texture';\n// import {withParameters} from './context';\nimport assert from 'assert';\n\nconst FACES = [\n  GL.TEXTURE_CUBE_MAP_POSITIVE_X,\n  GL.TEXTURE_CUBE_MAP_NEGATIVE_X,\n  GL.TEXTURE_CUBE_MAP_POSITIVE_Y,\n  GL.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n  GL.TEXTURE_CUBE_MAP_POSITIVE_Z,\n  GL.TEXTURE_CUBE_MAP_NEGATIVE_Z\n];\n\nexport default class TextureCube extends Texture {\n  constructor(gl, opts = {}) {\n    super(gl, Object.assign({}, opts, {target: GL.TEXTURE_CUBE_MAP}));\n    this.initialize(opts);\n    Object.seal(this);\n  }\n\n  /* eslint-disable max-len, max-statements */\n  initialize(opts = {}) {\n    const {\n      format = GL.RGBA,\n      mipmaps = true\n    } = opts;\n\n    let {\n      width = 1,\n      height = 1,\n      type = GL.UNSIGNED_BYTE,\n      dataFormat\n    } = opts;\n\n    // Deduce width and height based on one of the faces\n    ({type, dataFormat} = this._deduceParameters({format, type, dataFormat}));\n    ({width, height} = this._deduceImageSize({\n      data: opts[GL.TEXTURE_CUBE_MAP_POSITIVE_X], width, height\n    }));\n\n    // Enforce cube\n    assert(width === height);\n\n    // Temporarily apply any pixel store paramaters and build textures\n    // withParameters(this.gl, opts, () => {\n    //   for (const face of CUBE_MAP_FACES) {\n    //     this.setImageData({\n    //       target: face,\n    //       data: opts[face],\n    //       width, height, format, type, dataFormat, border, mipmaps\n    //     });\n    //   }\n    // });\n\n    this.setCubeMapImageData(opts);\n\n    // Called here so that GL.\n    // TODO - should genMipmap() be called on the cubemap or on the faces?\n    if (mipmaps) {\n      this.generateMipmap(opts);\n    }\n\n    // Store opts for accessors\n    this.opts = opts;\n  }\n\n  subImage({face, data, x = 0, y = 0, mipmapLevel = 0}) {\n    return this._subImage({target: face, data, x, y, mipmapLevel});\n  }\n\n  /* eslint-disable max-statements, max-len */\n  setCubeMapImageData({\n    width,\n    height,\n    pixels,\n    data,\n    border = 0,\n    format = GL.RGBA,\n    type = GL.UNSIGNED_BYTE,\n    generateMipmap = false\n  }) {\n    const {gl} = this;\n    pixels = pixels || data;\n    this.bind();\n    if (this.width || this.height) {\n      for (const face of FACES) {\n        gl.texImage2D(face, 0, format, width, height, border, format, type, pixels[face]);\n      }\n    } else {\n      for (const face of FACES) {\n        gl.texImage2D(face, 0, format, format, type, pixels[face]);\n      }\n    }\n  }\n\n  bind({index} = {}) {\n    if (index !== undefined) {\n      this.gl.activeTexture(GL.TEXTURE0 + index);\n    }\n    this.gl.bindTexture(GL.TEXTURE_CUBE_MAP, this.handle);\n    return index;\n  }\n\n  unbind() {\n    this.gl.bindTexture(GL.TEXTURE_CUBE_MAP, null);\n    return this;\n  }\n}\n\nTextureCube.FACES = FACES;\n"]}