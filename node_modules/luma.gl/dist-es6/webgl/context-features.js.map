{"version":3,"sources":["../../src/webgl/context-features.js"],"names":["isWebGL2","assert","WEBGL_FEATURES","VERTEX_ARRAY_OBJECT","TIMER_QUERY","INSTANCED_RENDERING","MULTIPLE_RENDER_TARGETS","ELEMENT_INDEX_UINT32","BLEND_EQUATION_MINMAX","COLOR_ENCODING_SRGB","TEXTURE_DEPTH","TEXTURE_FLOAT","TEXTURE_HALF_FLOAT","TEXTURE_FILTER_LINEAR_FLOAT","TEXTURE_FILTER_LINEAR_HALF_FLOAT","TEXTURE_FILTER_ANISOTROPIC","COLOR_ATTACHMENT_RGBA32F","COLOR_ATTACHMENT_FLOAT","COLOR_ATTACHMENT_HALF_FLOAT","GLSL_FRAG_DATA","GLSL_FRAG_DEPTH","GLSL_DERIVATIVES","GLSL_TEXTURE_LOD","FEATURES","Object","keys","forEach","key","getFeature","gl","cap","feature","extensionName","value","Boolean","getExtension","hasFeature","hasFeatures","features","Array","isArray","every","getFeatures","luma","caps","webgl2","TEST_EXPORTS"],"mappings":"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","file":"context-features.js","sourcesContent":["// Feature detection for WebGL\n//\n// Provides a function that enables simple checking of which WebGL features are\n// available in an WebGL1 or WebGL2 environment.\n\n/* eslint-disable no-inline-comments, max-len */\nimport {isWebGL2} from './context';\nimport assert from 'assert';\n\n// Defines luma.gl \"feature\" names and semantics\nconst WEBGL_FEATURES = {\n  // API SUPPORT\n  VERTEX_ARRAY_OBJECT: ['OES_vertex_array_object', true],\n  TIMER_QUERY: ['EXT_disjoint_timer_query', 'EXT_disjoint_timer_query_webgl2'],\n  INSTANCED_RENDERING: ['ANGLE_instanced_arrays', true],\n  MULTIPLE_RENDER_TARGETS: ['WEBGL_draw_buffers', true],\n\n  // FEATURES\n  ELEMENT_INDEX_UINT32: ['OES_element_index_uint', true],\n  BLEND_EQUATION_MINMAX: ['EXT_blend_minmax', true],\n\n  // TEXTURES, RENDERBUFFERS\n  COLOR_ENCODING_SRGB: ['EXT_sRGB', true],\n\n  // TEXTURES\n  TEXTURE_DEPTH: ['WEBGL_depth_texture', true],\n  TEXTURE_FLOAT: ['OES_texture_float', true],\n  TEXTURE_HALF_FLOAT: ['OES_texture_half_float', true],\n\n  TEXTURE_FILTER_LINEAR_FLOAT: ['OES_texture_float_linear'],\n  TEXTURE_FILTER_LINEAR_HALF_FLOAT: ['OES_texture_half_float_linear'],\n  TEXTURE_FILTER_ANISOTROPIC: ['EXT_texture_filter_anisotropic'],\n\n  // FRAMEBUFFERS, TEXTURES AND RENDERBUFFERS\n  COLOR_ATTACHMENT_RGBA32F: ['WEBGL_color_buffer_float', 'EXT_color_buffer_float'],\n  COLOR_ATTACHMENT_FLOAT: [false, 'EXT_color_buffer_float'],\n  COLOR_ATTACHMENT_HALF_FLOAT: [false, 'EXT_color_buffer_half_float'],\n\n  // GLSL extensions\n  GLSL_FRAG_DATA: ['WEBGL_draw_buffers', true],\n  GLSL_FRAG_DEPTH: ['EXT_frag_depth', true],\n  GLSL_DERIVATIVES: ['OES_standard_derivatives', true],\n  GLSL_TEXTURE_LOD: ['EXT_shader_texture_lod', true]\n};\n\n// Create a key-mirrored FEATURES array\nconst FEATURES = {};\nObject.keys(WEBGL_FEATURES).forEach(key => {\n  FEATURES[key] = key;\n});\nexport {FEATURES};\n\n// TODO - cache the value\nfunction getFeature(gl, cap) {\n  const feature = WEBGL_FEATURES[cap];\n  assert(feature, cap);\n\n  // Get extension name from table\n  const extensionName = isWebGL2(gl) ?\n    feature[1] || feature[0] :\n    feature[0];\n\n  // Check if the value is dependent on checking an extension\n  const value = typeof extensionName === 'string' ?\n    Boolean(gl.getExtension(extensionName)) :\n    extensionName;\n\n  assert(value === false || value === true);\n\n  return value;\n}\n\n// capability can be a WebGL extension name or a luma capability name\nexport function hasFeature(gl, feature) {\n  return hasFeatures(gl, feature);\n}\n\nexport function hasFeatures(gl, features) {\n  features = Array.isArray(features) ? features : [features];\n  return features.every(feature => {\n    return getFeature(gl, feature);\n  });\n}\n\nexport function getFeatures(gl) {\n  gl.luma = gl.luma || {};\n\n  if (!gl.luma.caps) {\n    gl.luma.caps = {};\n    gl.luma.caps.webgl2 = isWebGL2(gl);\n    for (const cap in WEBGL_FEATURES) {\n      gl.luma.caps[cap] = getFeature(gl, cap);\n    }\n\n  }\n  return gl.luma.caps;\n}\n\nexport const TEST_EXPORTS = {\n  WEBGL_FEATURES\n};\n"]}