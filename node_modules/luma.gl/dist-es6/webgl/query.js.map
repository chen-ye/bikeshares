{"version":3,"sources":["../../src/webgl/query.js"],"names":["Resource","queryManager","FEATURES","hasFeatures","isWebGL2","polyfillContext","noop","x","ERR_GPU_DISJOINT","ERR_TIMER_QUERY_NOT_SUPPORTED","GL_QUERY_COUNTER_BITS_EXT","GL_QUERY_RESULT","GL_QUERY_RESULT_AVAILABLE","GL_TIME_ELAPSED_EXT","GL_TIMESTAMP_EXT","GL_GPU_DISJOINT_EXT","GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN","GL_ANY_SAMPLES_PASSED","GL_ANY_SAMPLES_PASSED_CONSERVATIVE","Query","gl","queries","timers","timestamps","webgl2","hasTimerQueries","TIMER_QUERY","supported","queryCounterBits","getQuery","opts","onComplete","onError","target","promise","Object","seal","begin","conservative","beginQuery","queryCounter","handle","error","rejectQuery","ext","endQuery","end","cancelQuery","getQueryParameter","result","Number","isFinite","isSupported","createQuery","deleteQuery","poll","setInvalidator","queryType","errorMessage","checkInvalid","getParameter"],"mappings":"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","file":"query.js","sourcesContent":["// WebGL2 Query (also handles disjoint timer extensions)\n\nimport Resource from './resource';\nimport queryManager from './helpers/query-manager';\nimport {FEATURES, hasFeatures} from './context-features';\nimport {isWebGL2} from './context';\nimport {polyfillContext} from '../webgl-utils';\n\nconst noop = x => x;\n\nconst ERR_GPU_DISJOINT = 'Disjoint GPU operation invalidated timer queries';\nconst ERR_TIMER_QUERY_NOT_SUPPORTED = 'Timer queries require \"EXT_disjoint_timer_query\" extension';\n\nconst GL_QUERY_COUNTER_BITS_EXT = 0x8864; // # bits in query result for the given target.\n\nconst GL_QUERY_RESULT = 0x8866;           // Returns a GLuint containing the query result.\nconst GL_QUERY_RESULT_AVAILABLE = 0x8867; // whether query result is available.\n\nconst GL_TIME_ELAPSED_EXT = 0x88BF;       // Elapsed time (in nanoseconds).\nconst GL_TIMESTAMP_EXT = 0x8E28;          // The current time.\nconst GL_GPU_DISJOINT_EXT = 0x8FBB;       // Whether GPU performed any disjoint operation.\n\nconst GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88; // #primitives written to feedback buffers\nconst GL_ANY_SAMPLES_PASSED = 0x8C2F;             // Occlusion query (if drawing passed depth test)\nconst GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A;  // Occlusion query less accurate/faster version\n\nexport default class Query extends Resource {\n\n  // Returns true if Query is supported by the WebGL implementation\n  // Can also check whether timestamp queries are available.\n  static isSupported(gl, {\n    queries = false,\n    timers = false,\n    timestamps = false\n  } = {}) {\n    const webgl2 = isWebGL2(gl);\n    const hasTimerQueries = hasFeatures(gl, FEATURES.TIMER_QUERY);\n\n    let supported = webgl2 || hasTimerQueries;\n    if (queries) {\n      supported = supported && webgl2;\n    }\n\n    if (timers) {\n      supported = supported && hasTimerQueries;\n    }\n\n    if (timestamps) {\n      polyfillContext(gl);\n      const queryCounterBits = gl.getQuery(GL_TIMESTAMP_EXT, GL_QUERY_COUNTER_BITS_EXT);\n      supported = supported && (queryCounterBits > 0);\n    }\n\n    return supported;\n  }\n\n  // Create a query class\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    const {\n      onComplete = noop,\n      onError = noop\n    } = opts;\n\n    this.target = null;\n    this.onComplete = onComplete;\n    this.onError = onError;\n\n    // query manager needs a promise field\n    this.promise = null;\n\n    Object.seal(this);\n  }\n\n  // Shortcut for timer query (dependent on extension in both WebGL1 and 2)\n  // Measures GPU time delta between this call and a matching `end` call in the\n  // GPU instruction stream.\n  beginTimeElapsedQuery() {\n    return this.begin(GL_TIME_ELAPSED_EXT);\n  }\n\n  // Shortcut for occlusion queries\n  beginOcclusionQuery({conservative = false} = {}) {\n    return this.begin(conservative ? GL_ANY_SAMPLES_PASSED_CONSERVATIVE : GL_ANY_SAMPLES_PASSED);\n  }\n\n  // Shortcut for transformFeedbackQuery\n  beginTransformFeedbackQuery() {\n    return this.begin(GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN);\n  }\n\n  // Generates a GPU time stamp when the GPU instruction stream reaches this instruction.\n  // To measure time deltas, two timestamp queries are needed.\n  // Note: timestamp() queries may not be available even when the timer query extension is.\n  getTimestamp() {\n    queryManager.beginQuery(this, this.onComplete, this.onError);\n    try {\n      this.gl.queryCounter(this.handle, GL_TIMESTAMP_EXT);\n    } catch (error) {\n      queryManager.rejectQuery(this, ERR_TIMER_QUERY_NOT_SUPPORTED);\n    }\n    return this;\n  }\n\n  // Due to OpenGL API limitations, after calling `begin()` on one Query\n  // instance, `end()` must be called on that same instance before\n  // calling `begin()` on another query. While there can be multiple\n  // outstanding queries representing disjoint `begin()`/`end()` intervals.\n  // It is not possible to interleave or overlap `begin` and `end` calls.\n  begin(target) {\n    // - Triggering a new query when a Query is already tracking an\n    //   unresolved query causes that query to be cancelled.\n    queryManager.beginQuery(this, this.onComplete, this.onError);\n    this.target = target;\n\n    try {\n      this.gl.beginQuery(this.target, this.handle);\n    } catch (error) {\n      queryManager.rejectQuery(this, 'Query not supported');\n    }\n    return this;\n  }\n\n  // ends the current query\n  end() {\n    // Note: calling end does not affect the pending promise\n    if (this.target) {\n      this.ext.endQuery(this.target);\n      this.target = null;\n    }\n    return this;\n  }\n\n  // Cancels a pending query\n  cancel() {\n    this.end();\n    queryManager.cancelQuery(this);\n    return this;\n  }\n\n  // Returns true if the query result is available\n  isResultAvailable() {\n    return this.gl.getQueryParameter(this.handle, GL_QUERY_RESULT_AVAILABLE);\n  }\n\n  // Returns the query result, converted to milliseconds to match JavaScript conventions.\n  // TODO - what about non-timer queries\n  getResult() {\n    const result = this.gl.getQueryParameter(this.handle, GL_QUERY_RESULT);\n    return Number.isFinite(result) ? result / 1e6 : 0;\n  }\n\n  static poll(gl) {\n    queryManager.poll(gl);\n  }\n\n  _createHandle() {\n    return Query.isSupported(this.gl) ? this.gl.createQuery() : null;\n  }\n\n  _deleteHandle() {\n    queryManager.deleteQuery(this);\n    this.gl.deleteQuery(this.handle);\n  }\n}\n\n// NOTE: This call lets the queryManager know how to detect disjoint GPU state\n// It will check dsjoint state on polls and before adding a new query\n// and reject any outstanding TimerQueries with our supplied error message.\nqueryManager.setInvalidator({\n  queryType: Query,\n  errorMessage: ERR_GPU_DISJOINT,\n  // Note: Querying the disjoint state resets it\n  checkInvalid: gl => gl.getParameter(GL_GPU_DISJOINT_EXT)\n});\n"]}