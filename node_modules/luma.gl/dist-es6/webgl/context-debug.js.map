{"version":3,"sources":["../../src/webgl/context-debug.js"],"names":["WebGLDebug","log","installParameterDefinitions","getContextData","gl","luma","enableDebug","debug","makeDebugContext","getDebugContext","getRealContext","data","realContext","debugContext","WebGLDebugContext","throwOnError","validateArgsAndLog","Object","assign","prototype","getFunctionString","functionName","functionArgs","args","glFunctionArgsToString","slice","length","err","nothrow","errorMessage","glEnumToString","Error","functionString","priority","info","break","isBreakpoint","every","indexOf","breakOn","arg","undefined"],"mappings":"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","file":"context-debug.js","sourcesContent":["// Khronos Debug support module\nimport WebGLDebug from 'webgl-debug';\nimport {log} from '../utils';\nimport {installParameterDefinitions} from './api/debug-parameters';\n\ninstallParameterDefinitions();\n\n// Helper to get shared context data\nfunction getContextData(gl) {\n  gl.luma = gl.luma || {};\n  return gl.luma;\n}\n\n// Enable or disable debug checks in debug contexts\n// Non-debug contexts do not have checks (to ensure performance)\n// Turning off debug for debug contexts removes most of the performance penalty\nexport function enableDebug(debug) {\n  log.debug = debug;\n}\n\n// Returns (a potentially new) context with debug instrumentation turned off or on.\n// Note that this actually returns a new context\nexport function makeDebugContext(gl, {debug} = {}) {\n  if (gl === null) { // Return to ensure we don't create a context in this case.\n    return null;\n  }\n\n  return debug ? getDebugContext(gl) : getRealContext(gl);\n}\n\n// Returns the real context from either of the real/debug contexts\nexport function getRealContext(gl) {\n  if (gl === null) { // Return to ensure we don't create a context in this case.\n    return null;\n  }\n\n  const data = getContextData(gl);\n  // If the context has a realContext member, it is a debug context so return the realContext\n  return data.realContext ? data.realContext : gl;\n}\n\n// Returns the debug context from either of the real/debug contexts\nexport function getDebugContext(gl) {\n  if (gl === null) { // Return to ensure we don't create a context in this case.\n    return null;\n  }\n\n  const data = getContextData(gl);\n  // If this *is* a debug context, return itself\n  if (data.realContext) {\n    return gl;\n  }\n\n  // If this already has a debug context, return it.\n  if (data.debugContext) {\n    return data.debugContext;\n  }\n\n  // Create a new debug context\n  class WebGLDebugContext {}\n  const debugContext = WebGLDebug.makeDebugContext(gl, throwOnError, validateArgsAndLog);\n  Object.assign(WebGLDebugContext.prototype, debugContext);\n\n  // Store the debug context\n  data.debugContext = debugContext;\n  debugContext.debug = true;\n\n  // Return it\n  return debugContext;\n}\n\n// DEBUG TRACING\n\nfunction getFunctionString(functionName, functionArgs) {\n  let args = WebGLDebug.glFunctionArgsToString(functionName, functionArgs);\n  args = `${args.slice(0, 100)}${args.length > 100 ? '...' : ''}`;\n  return `gl.${functionName}(${args})`;\n}\n\nfunction throwOnError(err, functionName, args) {\n  if (!log.nothrow) {\n    const errorMessage = WebGLDebug.glEnumToString(err);\n    const functionArgs = WebGLDebug.glFunctionArgsToString(functionName, args);\n    throw new Error(`${errorMessage} in gl.${functionName}(${functionArgs})`);\n  }\n}\n\n// Don't generate function string until it is needed\nfunction validateArgsAndLog(functionName, functionArgs) {\n  if (!log.debug) {\n    return;\n  }\n\n  let functionString;\n  if (log.priority >= 4) {\n    functionString = getFunctionString(functionName, functionArgs);\n    log.info(4, `${functionString}`);\n  }\n\n  if (log.break) {\n    functionString = functionString || getFunctionString(functionName, functionArgs);\n    const isBreakpoint = log.break &&\n      log.break.every(breakOn => functionString.indexOf(breakOn) !== -1);\n    if (isBreakpoint) {\n      /* eslint-disable no-debugger */\n      debugger;\n      /* eslint-enable no-debugger */\n    }\n  }\n\n  for (const arg of functionArgs) {\n    if (arg === undefined) {\n      functionString = functionString || getFunctionString(functionName, functionArgs);\n      throw new Error(`Undefined argument: ${functionString}`);\n    }\n  }\n}\n"]}