{"version":3,"sources":["../../../src/shadertools/lib/shader-cache.js"],"names":["VertexShader","FragmentShader","assert","ERR_SOURCE","ERR_CONTEXT","ShaderCache","gl","vertexShaders","fragmentShaders","source","shader"],"mappings":";;;;AAAA,SAAQA,YAAR,EAAsBC,cAAtB,QAA2C,oBAA3C;AACA,OAAOC,MAAP,MAAmB,QAAnB;;AAEA,IAAMC,aAAa,oCAAnB;AACA,IAAMC,cAAc,+DAApB;;IAEqBC,W;;AAEnB;;;;;;AAMA,yBAAuB;AAAA,mFAAJ,EAAI;AAAA,QAAVC,EAAU,QAAVA,EAAU;;AAAA;;AACrB,SAAKA,EAAL,GAAUA,EAAV;AACA,SAAKC,aAAL,GAAqB,EAArB;AACA,SAAKC,eAAL,GAAuB,EAAvB;AACD;;AAED;;;;;;;;8BAIS;AACP;AACA,aAAO,IAAP;AACD;;AAED;;;;;;;;;;;oCAQgBF,E,EAAIG,M,EAAQ;AAC1BP,aAAO,OAAOO,MAAP,KAAkB,QAAzB,EAAmCN,UAAnC;;AAEA,UAAIO,SAAS,KAAKH,aAAL,CAAmBE,MAAnB,CAAb;AACAP,aAAO,CAACQ,MAAD,IAAWA,OAAOJ,EAAP,KAAcA,EAAhC,EAAoCF,WAApC;;AAEA,UAAI,CAACM,MAAL,EAAa;AACXA,iBAAS,IAAIV,YAAJ,CAAiBM,EAAjB,EAAqBG,MAArB,CAAT;AACA,aAAKF,aAAL,CAAmBE,MAAnB,IAA6BC,MAA7B;AACD;AACD,aAAOA,MAAP;AACD;;AAED;;;;;;;;;;;sCAQkBJ,E,EAAIG,M,EAAQ;AAC5BP,aAAO,OAAOO,MAAP,KAAkB,QAAzB,EAAmCN,UAAnC;;AAEA,UAAIO,SAAS,KAAKF,eAAL,CAAqBC,MAArB,CAAb;AACAP,aAAO,CAACQ,MAAD,IAAWA,OAAOJ,EAAP,KAAcA,EAAhC,EAAoCF,WAApC;;AAEA,UAAI,CAACM,MAAL,EAAa;AACXA,iBAAS,IAAIT,cAAJ,CAAmBK,EAAnB,EAAuBG,MAAvB,CAAT;AACA,aAAKD,eAAL,CAAqBC,MAArB,IAA+BC,MAA/B;AACD;AACD,aAAOA,MAAP;AACD;;;;;;eA/DkBL,W","file":"shader-cache.js","sourcesContent":["import {VertexShader, FragmentShader} from '../../webgl/shader';\nimport assert from 'assert';\n\nconst ERR_SOURCE = 'ShaderCache expects source strings';\nconst ERR_CONTEXT = 'ShaderCache does not support caching across multiple contexts';\n\nexport default class ShaderCache {\n\n  /**\n   * A cache of compiled shaders, keyed by shader source strings.\n   * Compilation of long shaders can be time consuming.\n   * By using this class, the application can ensure that each shader\n   * is only compiled once.\n   */\n  constructor({gl} = {}) {\n    this.gl = gl;\n    this.vertexShaders = {};\n    this.fragmentShaders = {};\n  }\n\n  /**\n   * Deletes shader references\n   * @return {ShaderCache} - returns this for chaining\n   */\n  delete() {\n    // TODO - requires reference counting to avoid deleting shaders in use\n    return this;\n  }\n\n  /**\n   * Returns a compiled `VertexShader` object corresponding to the supplied\n   * GLSL source code string, if possible from cache.\n   *\n   * @param {WebGLRenderingContext} gl - gl context\n   * @param {String} source - Source code for shader\n   * @return {VertexShader} - a compiled vertex shader\n   */\n  getVertexShader(gl, source) {\n    assert(typeof source === 'string', ERR_SOURCE);\n\n    let shader = this.vertexShaders[source];\n    assert(!shader || shader.gl === gl, ERR_CONTEXT);\n\n    if (!shader) {\n      shader = new VertexShader(gl, source);\n      this.vertexShaders[source] = shader;\n    }\n    return shader;\n  }\n\n  /**\n   * Returns a compiled `VertexShader` object corresponding to the supplied\n   * GLSL source code string, if possible from cache.\n   *\n   * @param {WebGLRenderingContext} gl - gl context\n   * @param {String} source - Source code for shader\n   * @return {FragmentShader} - a compiled fragment shader, possibly from chache\n   */\n  getFragmentShader(gl, source) {\n    assert(typeof source === 'string', ERR_SOURCE);\n\n    let shader = this.fragmentShaders[source];\n    assert(!shader || shader.gl === gl, ERR_CONTEXT);\n\n    if (!shader) {\n      shader = new FragmentShader(gl, source);\n      this.fragmentShaders[source] = shader;\n    }\n    return shader;\n  }\n}\n"]}