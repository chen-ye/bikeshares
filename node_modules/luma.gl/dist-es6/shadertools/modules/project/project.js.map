{"version":3,"sources":["../../../../src/shadertools/modules/project/project.js"],"names":["Matrix4","IDENTITY_MATRIX","DEFAULT_MODULE_OPTIONS","modelMatrix","viewMatrix","projectionMatrix","cameraPositionWorld","getUniforms","opts","prevUniforms","uniforms","undefined","viewProjectionMatrix","multiplyRight","common","vs","fs","name"],"mappings":"AAAA,SAAQA,OAAR,QAAsB,wBAAtB;;AAEA,IAAMC,kBAAkB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,EAAqC,CAArC,EAAwC,CAAxC,EAA2C,CAA3C,EAA8C,CAA9C,CAAxB;;AAEA,IAAMC,yBAAyB;AAC7BC,eAAaF,eADgB;AAE7BG,cAAYH,eAFiB;AAG7BI,oBAAkBJ,eAHW;AAI7BK,uBAAqB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP;AAJQ,CAA/B;;AAOA,SAASC,WAAT,GAAuE;AAAA,MAAlDC,IAAkD,uEAA3CN,sBAA2C;AAAA,MAAnBO,YAAmB,uEAAJ,EAAI;;AACrE;AACA;AACA;;AAEA,MAAMC,WAAW,EAAjB;AACA,MAAIF,KAAKL,WAAL,KAAqBQ,SAAzB,EAAoC;AAClCD,aAASP,WAAT,GAAuBK,KAAKL,WAA5B;AACD;AACD,MAAIK,KAAKJ,UAAL,KAAoBO,SAAxB,EAAmC;AACjCD,aAASN,UAAT,GAAsBI,KAAKJ,UAA3B;AACD;AACD,MAAII,KAAKH,gBAAL,KAA0BM,SAA9B,EAAyC;AACvCD,aAASL,gBAAT,GAA4BG,KAAKH,gBAAjC;AACD;AACD,MAAIG,KAAKF,mBAAL,KAA6BK,SAAjC,EAA4C;AAC1CD,aAASJ,mBAAT,GAA+BE,KAAKF,mBAApC;AACD;;AAED;AACA,MAAIE,KAAKH,gBAAL,KAA0BM,SAA1B,IAAuCH,KAAKJ,UAAL,KAAoBO,SAA/D,EAA0E;AACxED,aAASE,oBAAT,GAAgC,IAAIZ,OAAJ,CAAYQ,KAAKH,gBAAjB,EAC7BQ,aAD6B,CACfL,KAAKJ,UADU,CAAhC;AAED;;AAED,SAAOM,QAAP;AACD;;AAED,IAAMI,uOAAN;;AAaA,IAAMC,KACJD,MADI,swCAAN;;AAwDA,IAAME,YACJF,MADF;;AAIA,eAAe;AACbG,QAAM,SADO;AAEbV,0BAFa;AAGbQ,QAHa;AAIbC;AAJa,CAAf","file":"project.js","sourcesContent":["import {Matrix4} from '../../../packages/math';\n\nconst IDENTITY_MATRIX = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n\nconst DEFAULT_MODULE_OPTIONS = {\n  modelMatrix: IDENTITY_MATRIX,\n  viewMatrix: IDENTITY_MATRIX,\n  projectionMatrix: IDENTITY_MATRIX,\n  cameraPositionWorld: [0, 0, 0]\n};\n\nfunction getUniforms(opts = DEFAULT_MODULE_OPTIONS, prevUniforms = {}) {\n  // const viewProjectionInverse = viewProjection.invert();\n  // viewInverseMatrix: view.invert(),\n  // viewProjectionInverseMatrix: viewProjectionInverse\n\n  const uniforms = {};\n  if (opts.modelMatrix !== undefined) {\n    uniforms.modelMatrix = opts.modelMatrix;\n  }\n  if (opts.viewMatrix !== undefined) {\n    uniforms.viewMatrix = opts.viewMatrix;\n  }\n  if (opts.projectionMatrix !== undefined) {\n    uniforms.projectionMatrix = opts.projectionMatrix;\n  }\n  if (opts.cameraPositionWorld !== undefined) {\n    uniforms.cameraPositionWorld = opts.cameraPositionWorld;\n  }\n\n  // COMPOSITE UNIFORMS\n  if (opts.projectionMatrix !== undefined || opts.viewMatrix !== undefined) {\n    uniforms.viewProjectionMatrix = new Matrix4(opts.projectionMatrix)\n      .multiplyRight(opts.viewMatrix);\n  }\n\n  return uniforms;\n}\n\nconst common = `\\\nvarying vec4 project_vPositionWorld;\nvarying vec3 project_vNormalWorld;\n\nvec4 project_getPosition_World() {\n  return project_vPositionWorld;\n}\n\nvec3 project_getNormal_World() {\n  return project_vNormalWorld;\n}\n`;\n\nconst vs = `\\\n${common}\n\n// Unprefixed uniforms\nuniform mat4 modelMatrix;\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewProjectionMatrix;\nuniform vec3 cameraPositionWorld;\n\nstruct World {\n  vec3 position;\n  vec3 normal;\n};\n\nWorld world;\n\nvoid project_setPosition(vec4 position) {\n  project_vPositionWorld = position;\n}\n\nvoid project_setNormal(vec3 normal) {\n  project_vNormalWorld = normal;\n}\n\nvoid project_setPositionAndNormal_World(vec3 position, vec3 normal) {\n  world.position = position;\n  world.normal = normal;\n}\n\nvoid project_setPositionAndNormal_Model(vec3 position, vec3 normal) {\n  world.position = (modelMatrix * vec4(position, 1.)).xyz;\n  world.normal = mat3(modelMatrix) * normal;\n}\n\nvec4 project_model_to_clipspace(vec4 position) {\n  return viewProjectionMatrix * modelMatrix * position;\n}\n\nvec4 project_model_to_clipspace(vec3 position) {\n  return viewProjectionMatrix * modelMatrix * vec4(position, 1.);\n}\n\nvec4 project_world_to_clipspace(vec3 position) {\n  return viewProjectionMatrix * vec4(position, 1.);\n}\n\nvec4 project_view_to_clipspace(vec3 position) {\n  return projectionMatrix * vec4(position, 1.);\n}\n\nvec4 project_to_clipspace(vec3 position) {\n  return viewProjectionMatrix * vec4(position, 1.);\n}\n`;\n\nconst fs = `\n${common}\\\n`;\n\nexport default {\n  name: 'project',\n  getUniforms,\n  vs,\n  fs\n};\n"]}