{"version":3,"sources":["../../../../src/shadertools/modules/picking/picking.js"],"names":["DEFAULT_HIGHLIGHT_COLOR","Uint8Array","DEFAULT_MODULE_OPTIONS","pickingSelectedColor","pickingHighlightColor","pickingThreshold","pickingActive","pickingValid","getUniforms","opts","uniforms","picking_uValid","undefined","selectedColor","picking_uSelectedPickingColor","picking_uHighlightColor","picking_uThreshold","picking_uActive","vs","fs","name"],"mappings":"AAAA,IAAMA,0BAA0B,IAAIC,UAAJ,CAAe,CAAC,CAAD,EAAI,EAAJ,EAAQ,GAAR,EAAa,EAAb,CAAf,CAAhC;;AAEA,IAAMC,yBAAyB;AAC7BC,wBAAsB,IADO,EACD;AAC5BC,yBAAuBJ,uBAFM,EAEmB;AAChDK,oBAAkB,GAHW;AAI7BC,iBAAe,KAJc,EAIP;AACtBC,gBAAc;AALe,CAA/B;;AAQA;AACA,SAASC,WAAT,GAAoD;AAAA,MAA/BC,IAA+B,uEAAxBP,sBAAwB;;AAClD,MAAMQ,WAAW,EAAjB;AACAA,WAASC,cAAT,GAA0BF,KAAKF,YAAL,GAAoB,CAApB,GAAwB,CAAlD;AACA,MAAIE,KAAKN,oBAAL,KAA8BS,SAAlC,EAA6C;AAC3C,QAAIH,KAAKN,oBAAT,EAA+B;AAC7B,UAAMU,gBAAgB,CACpBJ,KAAKN,oBAAL,CAA0B,CAA1B,CADoB,EAEpBM,KAAKN,oBAAL,CAA0B,CAA1B,CAFoB,EAGpBM,KAAKN,oBAAL,CAA0B,CAA1B,CAHoB,CAAtB;AAKA;AACAO,eAASI,6BAAT,GAAyCD,aAAzC;AACD;AACF;AACD,MAAIJ,KAAKL,qBAAL,KAA+BQ,SAAnC,EAA8C;AAC5CF,aAASK,uBAAT,GAAmCN,KAAKL,qBAAxC;AACD;AACD;AACA,MAAIK,KAAKJ,gBAAL,KAA0BO,SAA9B,EAAyC;AACvCF,aAASM,kBAAT,GAA8BP,KAAKJ,gBAAnC;AACD;AACD,MAAII,KAAKH,aAAL,KAAuBM,SAA3B,EAAsC;AACpCF,aAASO,eAAT,GAA2BR,KAAKH,aAAL,GAAqB,CAArB,GAAyB,CAApD;AACD;AACD,SAAOI,QAAP;AACD;;AAED,IAAMQ,46BAAN;;AA2BA,IAAMC,guBAAN;;AA0BA,eAAe;AACbC,QAAM,SADO;AAEbF,QAFa;AAGbC,QAHa;AAIbX;AAJa,CAAf","file":"picking.js","sourcesContent":["const DEFAULT_HIGHLIGHT_COLOR = new Uint8Array([0, 64, 128, 64]);\n\nconst DEFAULT_MODULE_OPTIONS = {\n  pickingSelectedColor: null, //  Set to a picking color to visually highlight that item\n  pickingHighlightColor: DEFAULT_HIGHLIGHT_COLOR, // Color of visual highlight of \"selected\" item\n  pickingThreshold: 1.0,\n  pickingActive: false, // Set to true when rendering to off-screen \"picking\" buffer\n  pickingValid: false\n};\n\n/* eslint-disable camelcase */\nfunction getUniforms(opts = DEFAULT_MODULE_OPTIONS) {\n  const uniforms = {};\n  uniforms.picking_uValid = opts.pickingValid ? 1 : 0;\n  if (opts.pickingSelectedColor !== undefined) {\n    if (opts.pickingSelectedColor) {\n      const selectedColor = [\n        opts.pickingSelectedColor[0],\n        opts.pickingSelectedColor[1],\n        opts.pickingSelectedColor[2]\n      ];\n      // console.log('selected picking color', selectedColor);\n      uniforms.picking_uSelectedPickingColor = selectedColor;\n    }\n  }\n  if (opts.pickingHighlightColor !== undefined) {\n    uniforms.picking_uHighlightColor = opts.pickingHighlightColor;\n  }\n  // TODO - major hack - decide on normalization and remove\n  if (opts.pickingThreshold !== undefined) {\n    uniforms.picking_uThreshold = opts.pickingThreshold;\n  }\n  if (opts.pickingActive !== undefined) {\n    uniforms.picking_uActive = opts.pickingActive ? 1 : 0;\n  }\n  return uniforms;\n}\n\nconst vs = `\\\nuniform vec3 picking_uSelectedPickingColor;\nuniform float picking_uThreshold;\nuniform bool picking_uValid;\n\nvarying vec4 picking_vRGBcolor_Aselected;\n\nconst float COLOR_SCALE = 1. / 256.;\n\nbool isVertexPicked(vec3 vertexColor, vec3 pickedColor, bool pickingValid) {\n  return\n    pickingValid &&\n    abs(vertexColor.r - pickedColor.r) < picking_uThreshold &&\n    abs(vertexColor.g - pickedColor.g) < picking_uThreshold &&\n    abs(vertexColor.b - pickedColor.b) < picking_uThreshold;\n}\n\nvoid picking_setPickingColor(vec3 pickingColor) {\n  // Do the comparison with selected item color in vertex shader as it should mean fewer compares\n  picking_vRGBcolor_Aselected.a =\n    float(isVertexPicked(pickingColor, picking_uSelectedPickingColor, picking_uValid));\n\n  // Stores the picking color so that the fragment shader can render it during picking\n  picking_vRGBcolor_Aselected.rgb = pickingColor * COLOR_SCALE;\n}\n`;\n\nconst fs = `\\\nuniform bool picking_uActive; // true during rendering to offscreen picking buffer\nuniform vec3 picking_uSelectedPickingColor;\nuniform vec4 picking_uHighlightColor;\n\nvarying vec4 picking_vRGBcolor_Aselected;\n\nconst float COLOR_SCALE = 1. / 256.;\n\n/*\n * Returns highlight color if this item is selected.\n */\nvec4 picking_filterHighlightColor(vec4 color) {\n  bool selected = bool(picking_vRGBcolor_Aselected.a);\n  return selected ? picking_uHighlightColor : color;\n}\n\n/*\n * Returns picking color if picking enabled else unmodified argument.\n */\nvec4 picking_filterPickingColor(vec4 color) {\n  vec3 pickingColor = picking_vRGBcolor_Aselected.rgb;\n  return picking_uActive ? vec4(pickingColor, 1.0) : color;\n}\n`;\n\nexport default {\n  name: 'picking',\n  vs,\n  fs,\n  getUniforms\n};\n"]}