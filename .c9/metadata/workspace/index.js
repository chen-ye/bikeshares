{"changed":true,"filter":false,"title":"index.js","tooltip":"/index.js","value":"/* global L */\n/* global d3 */\n/* global firebase */\n/* global $ */\n/* global async */\n\n// Initialize Leaflet + Mapzen\nconst mapzenKey = 'mapzen-i83ssVS';\n// L.Mapzen.apiKey = 'mapzen-i83ssVS';\nL.mapbox.accessToken = 'pk.eyJ1IjoiYmxhc3Rlcm50IiwiYSI6ImlwalZmdUkifQ.TJCtxxyNmRhvH-17afmGng';\n//var map = L.Mapzen.map('map');\n\nconst map = L.mapbox.map('map').addLayer(L.mapbox.styleLayer(\"mapbox://styles/blasternt/cja1nhmg1akmg2rnvadioj22c\"));\n\nconst networkId = \"hubway\";\n\n// Initialize Firebase\nvar config = {\n  apiKey: \"AIzaSyAbu-hEkqh2PyaK1c078EUF-cuQ5VwBPnQ\",\n  authDomain: \"bikeshares-37de2.firebaseapp.com\",\n  databaseURL: \"https://bikeshares-37de2.firebaseio.com\",\n  projectId: \"bikeshares-37de2\",\n  storageBucket: \"bikeshares-37de2.appspot.com\",\n  messagingSenderId: \"538370144257\"\n};\nfirebase.initializeApp(config);\nconst db = firebase.firestore();\n\nconst hubwayStationMap = {\"3\":\"c039b478f4cd30b69758596ddcfd5cf5\",\"4\":\"923c9498bf653bce81b9f5bf06f9c499\",\"5\":\"0ebfbd58421465842f99d4e20c0188a8\",\"6\":\"3e84baca09333cd2d2bce4f9234ea380\",\"7\":\"94e2b48b7d791cb4edceb257f77d0553\",\"8\":\"1c69a2302d6c2221cd6057a3f97fc548\",\"9\":\"8cd611d2cc9bd7b7440c4723ce1d3eb6\",\"10\":\"a5edb12b9f8d171ae1165a9a2ae1f644\",\"11\":\"eb276799b6ebc22ee82f33566eb778b7\",\"12\":\"2b46609efdfe9b6d300bad1e817e1efd\",\"14\":\"d0ff6538806a4e5c46aa7e95f3fa47ce\",\"15\":\"ea09e29b591e36435fb8b78918651709\",\"16\":\"3c1cde4f3197b2599cc6140dc1ea4a80\",\"17\":\"904b7113d7e610919a5336c1167674e2\",\"19\":\"97a624904d68d950bc3c5016b4d4b28e\",\"20\":\"9c85a06bb914c9897dda64fc412498c4\",\"21\":\"c1ae903b130ca84ef5cb84caa16234db\",\"22\":\"68dd25824f76cc3063f5120e674bfed9\",\"23\":\"fe8d0aa13fd9937b7d09e4e26d5f0a8d\",\"24\":\"5bf7e1226592f7ed603ce0690fa6a566\",\"25\":\"a45aabe9b54b087818818dc78372bc43\",\"26\":\"e56b6d877c8dfe81cafd06ca3a7eff71\",\"27\":\"045fd5ea449046d51d40934e65b46bb5\",\"29\":\"9153d52f686a63bde64a0bd74574e4e2\",\"30\":\"96a2904d35d1297555d1d66c435ab29a\",\"31\":\"a19e611442a8933b8f82774ce3966ace\",\"32\":\"7d2aefcd5d8b2583ca9814b4fe51928b\",\"33\":\"da1dc98bb8c74306eca078f7dac261a7\",\"35\":\"fde40e6fbdcdcff8f513f82fbcadec3e\",\"36\":\"a7216c0e6bf1375d25b6f104a714d44c\",\"37\":\"fa4feed48aece06cb19271e25dd799f3\",\"39\":\"05f50b281104f880804e0111662fecf8\",\"40\":\"d27a92570184af7220c3130dace0e347\",\"41\":\"43b6ca106693a73e04b23890e713ea24\",\"42\":\"de54898148c9f009cd25a7a3ae4219b6\",\"43\":\"2cce02b482530e0086ad9f529fe48c2b\",\"44\":\"60ef31e770a3ea5dd7f350fc8877b5d3\",\"46\":\"95fed99e3a4c8fd726a808cfe4bb2587\",\"47\":\"4bf16679e6286a5cb72c1ae4526a3107\",\"48\":\"feec0fa4c8ef432dd873e53115aaa7e9\",\"49\":\"1714951f74f4b116e42fc312dffa3be9\",\"51\":\"9f87f7c7336c31701521ddc50d39be0a\",\"54\":\"0670eb9d5937bfea133bd73ff534c764\",\"56\":\"ecd52be381f64f509517b6a0e4d7f6e7\",\"57\":\"24a3f0ab2a83ab70ebe4bf0110cc890f\",\"58\":\"56d2eb86c21c57692225ee5f13e31818\",\"59\":\"2e4406867a3574184b0d6be7ede11d38\",\"60\":\"9604a32e1c960659f85f1e22f44ce8a0\",\"63\":\"f835af662d1afc1ee1ae8ccfbab70aee\",\"65\":\"fbe59f14d93321aa504adc16f1081148\",\"66\":\"338bbc5f3f1adf47da56ad7518bbb48e\",\"67\":\"c91bc9b7e63c282da005f7eac27f8d96\",\"68\":\"575e04966344a392bbbf9eccf09f029d\",\"69\":\"f5cd79c9dd25baf7099ff87f1837686a\",\"70\":\"6eeb219ec20094deafc039019160b33f\",\"71\":\"6dbd6e946d3f4a22eda526eae1877257\",\"72\":\"d8071846cc7cb01f669554ddebf02b65\",\"73\":\"4f0217ba3cf7bea5a7e4d07e58ec259b\",\"74\":\"559f6c10954fbe02c18f04cc0c2f7ddd\",\"75\":\"295b9c9707dfc5ad38f5a26740a06b48\",\"76\":\"39595521b8d76cff6372dc8355b1190c\",\"77\":\"fc9d0d6dab0b0ccbb300289b4b2e92df\",\"78\":\"669dfa375fcd4c6eead89ea6b89f6199\",\"79\":\"0559164ae244ded879b0a74d8c122a77\",\"80\":\"d14fddb02c64c81c4c9febd44968d294\",\"81\":\"a35b80134814b7fd4592404b8ddb2a24\",\"82\":\"5bcb4f7aa8bd4230cea068527529fd99\",\"84\":\"34c6c5aae93dc743e4ef6dd633ee02bc\",\"85\":\"6914c1962c64ca2a1c5f7bba047d9788\",\"87\":\"e7bf3cb1dd05da389680f35f83927905\",\"88\":\"0e48c04cc3047674d07fd003b5135dfe\",\"89\":\"d0d13765d45b5bdf356acd9b859b7b99\",\"90\":\"75568350ac15d1840f7f00b79913b6ee\",\"91\":\"fce261dec8cf0d2593b65a7e8f726597\",\"92\":\"db674ff3758d0911cdadd98f6f39f1a0\",\"93\":\"9f6fae7b1b3a673377b452474ca2bcf1\",\"94\":\"1e356b3d262d3819ace481af4e2d4135\",\"95\":\"582f82ed392b7b5c072a7bbe40a40dfb\",\"96\":\"8386693bdc273780efffd5d5eb9aed7c\",\"97\":\"b01bba5bea3e1f63d6319d1f18a21271\",\"98\":\"a0fa77069d080a45d5e9290af54e9f46\",\"99\":\"600ca9bf59409d83f15862a1c0dfe4b0\",\"100\":\"8826fb6a8e69e2fd45f22d8ee1c1a8de\",\"102\":\"ad43939d620ef225d35eafdb9ef9a29d\",\"103\":\"2b13bff9013c2beaf86e5f4544274345\",\"104\":\"ad81792b682543ed97bf3188819c0b81\",\"105\":\"94ce3435b4ade8bcc9585e0887771ef5\",\"107\":\"d5d8f74a35cbfb15b544ff984c9f2307\",\"108\":\"066efb58cb770f3d708a4f83a11fb374\",\"109\":\"9e6a8c665def7b9475f618f73bf16e2e\",\"110\":\"c3a13f2adb7762587acf15eec38bd91f\",\"111\":\"f011b03ae269733cd81eb2058feeafe6\",\"112\":\"3f002b9808de30c28132f3cde02667be\",\"114\":\"6f7189e1db7479b6f143e990b6a2f79d\",\"115\":\"272d2ed6d42ae8921f98b33d030519b6\",\"116\":\"119f3ccd51ee15db7ff6f41bd497c601\",\"117\":\"59599891ac2365b5fa23d5f61ecf17c4\",\"118\":\"6cf4bfc8093794c40451d865b74e695e\",\"119\":\"8414286d3232109891e1a2dfe396a59e\",\"121\":\"0085d07859b67a2f60c8e7dad5f70f1a\",\"124\":\"de412fd4ed57348bf9ec6bd7339b04f6\",\"125\":\"f98ba2c9b1fb1563296760c08521dfcb\",\"126\":\"f5577b56bb543db5cb15ae25621fe732\",\"130\":\"709c9f1c1c7910bf3b94968d85630562\",\"131\":\"24e99d91d84351d3e224e3d7ef2c7799\",\"133\":\"68fc84a359655b54175ddc443e79003b\",\"135\":\"997d209a53d13471372a1145c32d663a\",\"136\":\"b03546e29d60dde109fa231ff93c88b5\",\"137\":\"51ae4b12dfa3be5bf1cfd5ec621b2c3b\",\"138\":\"af050e8bab271eeebf49b5407a09d415\",\"139\":\"3831590999fc4a7f52d08952a6bd045d\",\"140\":\"73935d28a37369a3e00400aacfb755f7\",\"141\":\"d797b3a092f9f889b1cf181ec17e1ae2\",\"142\":\"2b4e2a73580c8b3d22be6ea6480f0f30\",\"143\":\"e05d253ccb22c56ee8624c467c8d81f6\",\"145\":\"c199d7ad26651f605e7bb8778852a5e4\",\"146\":\"0b0ef90ed68e023d65ed3b1c57eb6d36\",\"149\":\"ded434853a62ec9703f2484cca685c20\",\"150\":\"77b48a5112ce801c139722ae4d0edad7\",\"151\":\"0f6de24ee3d6995945a685ecb9fe5771\",\"152\":\"0d0f6b413915f118e0c8c7e0ea107ffa\",\"157\":\"3eda44ce546b2d45a468cf7e2d0300a1\",\"159\":\"a9af3ba18dec64bdfb9c2b644956243f\",\"160\":\"3dc7433790fc03a6749498c3208a4e96\",\"161\":\"be6410ffefa71e9a6282fa1fdef1bf72\",\"162\":\"fa1b93d10ff350bd1e7469a1db231aa1\",\"163\":\"f0683fe3086af95afeae07cc0357fd52\",\"169\":\"f10d6a600af972c6b5d7953c49d5c654\",\"170\":\"3d5ed4d9f089974d5d0f0fc19ad17d9c\",\"171\":\"feba1b6e8c43b983bf48479cbacec840\",\"173\":\"52f7c777f0850cb03ceb546289c74649\",\"174\":\"66d0f515f619b404c689211df256024f\",\"175\":\"b0f4189efee3fe8e880bfffcabfff93c\",\"176\":\"352815b0fd48c554845e499609a51347\",\"177\":\"2073f8fbb163ff4e693cfad00f0dd64f\",\"178\":\"0e29fe31b281f3b6ca6f7c06c8eb7aa4\",\"179\":\"943a5046e94d9462496182d9e38da371\",\"180\":\"8482b3ad353c1e6e9e317296f41eb064\",\"181\":\"1eeeb634d10232efadcbb8396fee8b88\",\"182\":\"bf75e5d4343945db9675efcc60d1bf12\",\"183\":\"246f58e0ae4db954e8dae72d11e19a81\",\"184\":\"1f822fdb6173d31544d095e4fd981415\",\"185\":\"bbdda846f9d9d1b155d4a3614ed7ecfe\",\"186\":\"036ab7e3f20a35bce54f4497aa2470b9\",\"189\":\"69c98e683921460eecdb85a49a0f7b77\",\"190\":\"2601ac8e4decf87d75d824fa7e47b9a5\",\"192\":\"4d51f6d4dc4b79326311d888ba73a86d\",\"193\":\"171d66dfe7c34a2348eb9514d653fb1a\",\"194\":\"7834292992b37578067b345232346bad\",\"195\":\"7bd2d765ef465e66ae4ad4623daf4917\",\"196\":\"ea3c9ae5995449b37ad7db1727bd6dee\",\"197\":\"3ef6b015b6284b4731db6b9e02a3d1cb\",\"200\":\"294242dbc29d86a80477f22608479bc8\",\"201\":\"e1eb05d342c7993b9628a687211b04ea\",\"202\":\"bb5087ad1912ee66a53a0245ce50eef4\",\"203\":\"c2561905a4f6fad8c8bee1043bde9a6c\",\"205\":\"aa2cadce93985cabcc8c1701a5c8be20\",\"207\":\"3f57cfe0f525ea8ba9c2d07a1ce63a06\",\"208\":\"9780cd14bba5099819fcd16c8bd8d897\",\"209\":\"bbabf30a0df284668fd7594ab1218a56\",\"210\":\"7944872d3021ca28cdaca8c32f9d0c7f\",\"211\":\"66576a901b33431b167da0141c293dc5\",\"212\":\"93542dcbf21f5411569adb92cd7cc199\",\"213\":\"d9c7ef5dbda4ed944d1bf51fe540acb6\",\"214\":\"63980598720f0bf1e318817f1be29afb\",\"215\":\"8ece5437df6558cd259deb3b2af0e25e\",\"217\":\"553ed0300d38108b4f21a6bafa3db70c\",\"218\":\"2893854c4c64eb00b7cbac5381c3e6c5\",\"219\":\"2743ef861ea179516fce8114a16965ec\",\"221\":\"8d970bd1cdb480aeebc10da260449e02\",\"222\":\"f0fc21e8403480413d2d2ac1d601d493\",\"224\":\"c55f98cd397c770914c28a590e3ab90a\",\"225\":\"1b7f50a75403e1f818b0b1dd81c09e9f\",\"226\":\"e00981ae2721bdc7339d4ee00759f650\",\"228\":\"eb7a7c91c78b8fb7982c1310d52be566\"};\n\nconst initializeDb = () => {\n  this.fetch(`https://api.citybik.es/v2/networks`).then((response) => {\n    return response.json()\n  }).then((json) => {\n  \tconsole.log(\"networks\", json);\n    json[\"networks\"].forEach((network) => {\n      const networkDoc = db.collection(\"networks\").doc(network.id);\n      networkDoc.set(network, { merge: true }).then(() => {\n        // initalizeNetwork(network.id, networkDoc);\n      });\n    });\n  });\n}\n\nconst initializeNetwork = (networkId, networkDoc) => {\n\tthis.fetch(`https://api.citybik.es/v2/networks/${networkId}`).then((response) => {\n    return response.json()\n  }).then((json) => {\n  \tconsole.log(\"stations\", json);\n    json[\"network\"][\"stations\"].forEach((station) => {\n      console.log(`Added ${station.id}`)\n      networkDoc.collection(\"stations\").doc(station.id).set(station, { merge: true });\n    });\n  })\n}\n\nconst updateNetwork = (networkId, networkDoc, activityCallback) => {\n  this.fetch(`https://api.citybik.es/v2/networks/${networkId}?fields=stations`).then((response) => {\n    return response.json()\n  }).then((json) => {\n    json[\"network\"][\"stations\"].forEach((station) => {\n    \tconst stationDoc = networkDoc.collection(\"stations\").doc(station.id);\n      stationDoc.get().then((doc) => {\n      \tif(doc.exists) {\n        \tconst oldStation = doc.data();\n          if (oldStation.timestamp != station.timestamp) {\n            let newRentals = station.extra.renting;\n            let newReturns = station.extra.returning;\n\n            if (!newRentals || !newReturns) {\n              const deltaBikes = station.free_bikes - oldStation.free_bikes;\n              newRentals = deltaBikes < 0 ? Math.abs(deltaBikes) : 0;\n              newReturns = deltaBikes > 0 ? Math.abs(deltaBikes) : 0;\n              station.extra.renting = newRentals;\n              station.extra.returning = newReturns;\n            }\n\n            if (newRentals > 0 && activityCallback) {\n              activityCallback(station, newRentals, newReturns);\n            }\n\n            stationDoc.set(station, { merge: true });\n          }\n        }\n      });\n    });\n  })\n}\n\n// const progressBar = $(\"#trip-progress-bar\");\n// const progressText = document.getElementById(\"trip-progress-text\");\n// progressBar.progress();\n\n// const updateProgress = (text, progress) => {\n// \tprogressText.textContent = text;\n//   progressBar.progress({\n//   \tvalue: progress.addedTrips,\n//     total: progress.totalTrips,\n//   })\n// }\n\nconst addFrequencies = (networkId, csv) => {\n\treturn new Promise((resolve, reject) => {\n  \tconst stationsRef = db.collection(\"networks\").doc(networkId).collection(\"stations\");\n  \tconst routesRef = db.collection(\"networks\").doc(networkId).collection(\"routes\");\n    const batch = db.batch();\n\n    const frequenciesData = d3.csvParse(csv);\n    frequenciesData.forEach((path, i) => {\n      const startDbId = hubwayStationMap[path[\"start station id\"]];\n      const endDbId = hubwayStationMap[path[\"end station id\"]];\n      if(startDbId && endDbId) {\n        const routeRef = routesRef.doc(`${startDbId} - ${endDbId}`);\n        console.info(`Writing ${startDbId} - ${endDbId}: ${path[\"num trips\"]}`)\n        batch.set(routeRef, {\n          startId: startDbId,\n          endId: endDbId,\n          frequency: parseInt(path[\"num trips\"]),\n      }, { merge: true });\n      }\n    })\n    batch.commit().then(() => {\n    \tconsole.log('Batch frequency success.')\n      resolve();\n    }).catch((error) => {\n      reject(error);\n    });\n  });\n}\n\nconst handleFrequencyFile = (evt) => {\n  const fileList = evt.target.files;\n  for (let i = 0; i < fileList.length; i++) {\n  \tconst csvFile = evt.target.files[i];\n    if(csvFile && csvFile.type == \"text/csv\") {\n      const csvReader = new FileReader();\n      csvReader.addEventListener(\"load\", (evt) => {\n        const csvText = event.target.result;\n        const csvMeta = addFrequencies(networkId, csvText);\n      });\n      csvReader.readAsText(csvFile);\n    }\n  }\n}\n\n\nconst routerOptions = {\n  costing: 'bicycle',\n  costing_options: {\n  \tbicycle: {\n    \tbicycle_type: \"city\",\n      cycling_speed: 16,\n      use_hills: .4,\n    }\n  }\n};\n\nconst routeTrip = function (startStation, endStation, networkId) {\n\treturn new Promise((resolve) => {\n  \tconst stationsRef = db.collection(\"networks\").doc(networkId).collection(\"stations\");\n    const routeRef = stationsRef.doc(startStation.id).collection(\"routes\").doc(endStation.id);\n    routeRef.get().then((routeDoc) => {\n      if (!routeDoc.exists) {\n        const routeOptions = Object.assign({\n          locations: [\n            { lat: startStation.latitude, lon: startStation.longitude },\n            { lat: endStation.latitude, lon: endStation.longitude },\n          ],\n        }, routerOptions);\n        const route = this.fetch(`https://valhalla.mapzen.com/route?json=${JSON.stringify(routeOptions)}&api_key=${mapzenKey}`).then((response) => {\n          if(response.ok) {\n          \tconsole.log(\"fetched route\");\n            return response.json();\n          }\n          throw new Error(response.statusText);\n        }).then((json) => {\n          if(json.trip.status == 0) {\n            routeRef.set(json.trip.legs[0]);\n          }\n          resolve();\n        }).catch((error) => {\n          console.error(error);\n          resolve();\n        });\n      } else {\n      \tresolve();\n      }\n    });\n  });\n}\n\nconst routeTrips = (networkId) => {\n\tconst networkRef = db.collection(\"networks\").doc(networkId);\n\tconst tripsRef = networkRef.collection(\"trips\").limit(5000);\n\tconst stationsRef = networkRef.collection(\"stations\");\n  \n  tripsRef.get().then((querySnapshot) => {\n  \tasync.eachLimit(querySnapshot.docs, 2, async function (doc) {\n      return new Promise((resolve) => {\n        const trip = doc.data();\n        console.log(trip);\n        stationsRef.where(\"extra.uid\", \"==\", trip[\"start station id\"]).limit(1).get().then((querySnapshot) => {\n          if(querySnapshot.docs.length < 1) {\n            console.error(`station id ${trip[\"start station id\"]} not found`);\n            resolve();\n          } else {\n            const startStation = querySnapshot.docs[0].data();\n            stationsRef.where(\"extra.uid\", \"==\", trip[\"end station id\"]).limit(1).get().then((querySnapshot) => {\n              if(querySnapshot.docs.length < 1) {\n                console.error(`station id ${trip[\"end station id\"]} not found`);\n                resolve();\n              } else {\n                const endStation = querySnapshot.docs[0].data();\n                routeTrip(startStation, endStation, networkId).then(() => {\n                \tresolve();\n\t\t\t\t\t\t\t\t});\n              }\n            })\n          }\n        })\n      });\n    })\n  \t\n  })\n}\n\nconst routeRoute = (stationsRef, routesRef, routeId, route) => {\n  return new Promise((resolve, reject) => {\n    console.log(routeId, route);\n    \n    if (!route.shape) {\n      stationsRef.doc(route.startId).get().then((startRef) => {\n        if(startRef.exists) {\n          const startStation = startRef.data();\n          stationsRef.doc(route.endId).get().then((endRef) => {\n            if(endRef.exists) {\n              const endStation = endRef.data();\n              const routeOptions = Object.assign({\n                locations: [\n                  { lat: startStation.latitude, lon: startStation.longitude },\n                  { lat: endStation.latitude, lon: endStation.longitude },\n                ],\n              }, routerOptions);\n              const route = this.fetch(`https://valhalla.mapzen.com/route?json=${JSON.stringify(routeOptions)}&api_key=${mapzenKey}`).then((response) => {\n                if(response.ok) {\n                \tconsole.log(\"fetched route\");\n                  return response.json();\n                } else {\n                  if(response.status === 400) {\n                    setTimeout(() => {\n                      resolve();\n                    }, 200);\n                  } else {\n                    throw new Error(response.statusText);\n                  }\n                }\n              }).then((json) => {\n                if(json && json.trip.status == 0) {\n                  routesRef.doc(routeId).set(json.trip.legs[0], {merge: true});\n                }\n                setTimeout(() => {\n                  resolve();\n                }, 200);\n              }).catch((error) => {\n                console.error(error);\n                reject(error);\n              });\n            } else {\n              console.error(`Station ${route.endId} does not exist`);\n              resolve();\n            }\n          })\n        } else {\n          console.error(`Station ${route.startId} does not exist`);\n          resolve();\n        }\n      })\n    } else {\n      resolve();\n    }\n  });\n}\n\nconst routeRoutes = (networkId) => {\n  const networkRef = db.collection(\"networks\").doc(networkId);\n  const stationsRef = networkRef.collection(\"stations\");\n  const routesRef = networkRef.collection(\"routes\");\n  \n  routesRef.orderBy(\"frequency\", \"desc\").get().then((querySnapshot) => {\n    async.eachLimit(querySnapshot.docs, 1, async (doc) => {\n      return new Promise((resolve) => {\n        const route = doc.data();\n        routeRoute(stationsRef, routesRef, doc.id, route).then(() => {\n          resolve();\n        });\n      });\n    })\n  })\n}\n\nconst renderStations = (networkId) => {\n\tconst networkDocRef = db.collection(\"networks\").doc(networkId);\n  networkDocRef.get().then((doc) => {\n  \tconst network = doc.data();\n    // map.setView([network.location.latitude, network.location.longitude], 12);\n  });\n  const stationsLayer = L.featureGroup().addTo(map);\n  const stationsMarkers = new Map();\n  const stationsRef = networkDocRef.collection(\"stations\");\n  stationsRef.onSnapshot((querySnapshot) => {\n  \tquerySnapshot.docChanges.forEach((change) => {\n    \tconst station = change.doc.data();\n    \tif (change.type === \"added\") {\n        stationsMarkers.set(`${networkId}-${station.id}`, L.marker([station.latitude, station.longitude], {\n          icon: L.divIcon({\n            className: `station-icon ${networkId}-${station.id}`,\n            html: '',\n            iconSize: [8,8],\n          })\n        })\n        .bindPopup(JSON.stringify(station))\n        .addTo(stationsLayer));\n      }\n      if (change.type === \"modified\") {\n      \tconst marker = stationsMarkers.get(`${networkId}-${station.id}`);\n        marker.setOpacity(.5);\n        //TODO\n      }\n    })\n    map.fitBounds(stationsLayer.getBounds(), {\n    \tpadding: [32, 32]\n    });\n  })\n}\n\nconst renderRoutes = (networkId) => {\n  const networkDocRef = db.collection(\"networks\").doc(networkId);\n  const routesRef = networkDocRef.collection(\"routes\");\n  \n  const routesLayer = L.featureGroup().addTo(map);\n  \n  routesRef.orderBy(\"frequency\", \"desc\").limit(1).get().then((querySnapshot) => {\n    const maxFrequency = querySnapshot.docs[0].data().frequency;\n    \n    routesRef.onSnapshot((querySnapshot) => {\n      querySnapshot.docChanges.forEach((change) => {\n        const route = change.doc.data();\n        if (change.type === \"added\") {\n          console.log(`Path for ${change.doc.id} added`);\n          if (route.shape) {\n          \tconst routeCoordinates = polylineDecode(route.shape);\n        \t\tconst routePolyline = L.polyline(routeCoordinates, {\n        \t\t  className: change.doc.id,\n        \t\t  color: \"#177EA3\", \n        \t\t  opacity: route.frequency / maxFrequency * .5,\n        \t\t}).addTo(routesLayer);\n          }\n        }\n      })\n    })\n  });\n  \n}\n\nconst polylineDecode = function(str, precision) {\n    var index = 0,\n        lat = 0,\n        lng = 0,\n        coordinates = [],\n        shift = 0,\n        result = 0,\n        byte = null,\n        latitude_change,\n        longitude_change,\n        factor = Math.pow(10, precision || 6);\n\n    // Coordinates have variable length when encoded, so just keep\n    // track of whether we've hit the end of the string. In each\n    // loop iteration, a single coordinate is decoded.\n    while (index < str.length) {\n\n        // Reset shift, result, and byte\n        byte = null;\n        shift = 0;\n        result = 0;\n\n        do {\n            byte = str.charCodeAt(index++) - 63;\n            result |= (byte & 0x1f) << shift;\n            shift += 5;\n        } while (byte >= 0x20);\n\n        latitude_change = ((result & 1) ? ~(result >> 1) : (result >> 1));\n\n        shift = result = 0;\n\n        do {\n            byte = str.charCodeAt(index++) - 63;\n            result |= (byte & 0x1f) << shift;\n            shift += 5;\n        } while (byte >= 0x20);\n\n        longitude_change = ((result & 1) ? ~(result >> 1) : (result >> 1));\n\n        lat += latitude_change;\n        lng += longitude_change;\n\n        coordinates.push([lat / factor, lng / factor]);\n    }\n\n    return coordinates;\n};\n\n// Render Hubway\ninitializeDb();\nupdateNetwork(networkId, db.collection(\"networks\").doc(networkId), (station, newRentals, newReturns) => {\n\t//console.log(station, newRentals, newReturns);\n});\nrenderStations(networkId);\nrenderRoutes(networkId);\n\ndocument.getElementById(\"initialize-button\").addEventListener(\"click\", () => {\n\tinitializeNetwork(networkId, db.collection(\"networks\").doc(networkId));\n}, false);\n\ndocument.getElementById(\"pathfind-button\").addEventListener(\"click\", () => {\n\trouteRoutes(networkId);\n}, false);\n\nconst frequencyFileElement = document.getElementById(\"frequency-file\");\nfrequencyFileElement.addEventListener(\"change\", handleFrequencyFile, false);","undoManager":{"mark":100,"position":100,"stack":[[{"start":{"row":353,"column":26},"end":{"row":353,"column":27},"action":"insert","lines":["."],"id":2286}],[{"start":{"row":353,"column":27},"end":{"row":353,"column":28},"action":"insert","lines":["f"],"id":2287}],[{"start":{"row":353,"column":28},"end":{"row":353,"column":29},"action":"insert","lines":["r"],"id":2288}],[{"start":{"row":353,"column":29},"end":{"row":353,"column":30},"action":"insert","lines":["e"],"id":2289}],[{"start":{"row":353,"column":30},"end":{"row":353,"column":31},"action":"insert","lines":["q"],"id":2290}],[{"start":{"row":353,"column":31},"end":{"row":353,"column":32},"action":"insert","lines":["u"],"id":2291}],[{"start":{"row":353,"column":32},"end":{"row":353,"column":33},"action":"insert","lines":["e"],"id":2292}],[{"start":{"row":353,"column":33},"end":{"row":353,"column":34},"action":"insert","lines":["n"],"id":2293}],[{"start":{"row":353,"column":34},"end":{"row":353,"column":35},"action":"insert","lines":["c"],"id":2294}],[{"start":{"row":353,"column":35},"end":{"row":353,"column":36},"action":"insert","lines":["y"],"id":2295}],[{"start":{"row":353,"column":36},"end":{"row":353,"column":37},"action":"insert","lines":[" "],"id":2296}],[{"start":{"row":353,"column":37},"end":{"row":353,"column":38},"action":"insert","lines":["/"],"id":2297}],[{"start":{"row":353,"column":38},"end":{"row":353,"column":39},"action":"insert","lines":[" "],"id":2298}],[{"start":{"row":353,"column":39},"end":{"row":353,"column":40},"action":"insert","lines":["m"],"id":2299}],[{"start":{"row":353,"column":40},"end":{"row":353,"column":41},"action":"insert","lines":["a"],"id":2300}],[{"start":{"row":353,"column":41},"end":{"row":353,"column":42},"action":"insert","lines":["x"],"id":2301}],[{"start":{"row":353,"column":42},"end":{"row":353,"column":43},"action":"insert","lines":["F"],"id":2302}],[{"start":{"row":353,"column":43},"end":{"row":353,"column":44},"action":"insert","lines":["r"],"id":2303}],[{"start":{"row":353,"column":44},"end":{"row":353,"column":45},"action":"insert","lines":["e"],"id":2304}],[{"start":{"row":353,"column":45},"end":{"row":353,"column":46},"action":"insert","lines":["q"],"id":2305}],[{"start":{"row":353,"column":46},"end":{"row":353,"column":47},"action":"insert","lines":["u"],"id":2306}],[{"start":{"row":353,"column":47},"end":{"row":353,"column":48},"action":"insert","lines":["e"],"id":2307}],[{"start":{"row":353,"column":48},"end":{"row":353,"column":49},"action":"insert","lines":["n"],"id":2308}],[{"start":{"row":353,"column":49},"end":{"row":353,"column":50},"action":"insert","lines":["c"],"id":2309}],[{"start":{"row":353,"column":50},"end":{"row":353,"column":51},"action":"insert","lines":["y"],"id":2310}],[{"start":{"row":347,"column":38},"end":{"row":348,"column":0},"action":"insert","lines":["",""],"id":2311},{"start":{"row":348,"column":0},"end":{"row":348,"column":10},"action":"insert","lines":["          "]}],[{"start":{"row":348,"column":10},"end":{"row":348,"column":11},"action":"insert","lines":["c"],"id":2312}],[{"start":{"row":348,"column":11},"end":{"row":348,"column":12},"action":"insert","lines":["o"],"id":2313}],[{"start":{"row":348,"column":12},"end":{"row":348,"column":13},"action":"insert","lines":["n"],"id":2314}],[{"start":{"row":348,"column":13},"end":{"row":348,"column":14},"action":"insert","lines":["s"],"id":2315}],[{"start":{"row":348,"column":14},"end":{"row":348,"column":15},"action":"insert","lines":["l"],"id":2316}],[{"start":{"row":348,"column":15},"end":{"row":348,"column":16},"action":"insert","lines":["o"],"id":2317}],[{"start":{"row":348,"column":16},"end":{"row":348,"column":17},"action":"insert","lines":["e"],"id":2318}],[{"start":{"row":348,"column":17},"end":{"row":348,"column":18},"action":"insert","lines":["."],"id":2319}],[{"start":{"row":348,"column":17},"end":{"row":348,"column":18},"action":"remove","lines":["."],"id":2320}],[{"start":{"row":348,"column":16},"end":{"row":348,"column":17},"action":"remove","lines":["e"],"id":2321}],[{"start":{"row":348,"column":15},"end":{"row":348,"column":16},"action":"remove","lines":["o"],"id":2322}],[{"start":{"row":348,"column":14},"end":{"row":348,"column":15},"action":"remove","lines":["l"],"id":2323}],[{"start":{"row":348,"column":13},"end":{"row":348,"column":14},"action":"remove","lines":["s"],"id":2324}],[{"start":{"row":348,"column":13},"end":{"row":348,"column":14},"action":"insert","lines":["s"],"id":2325}],[{"start":{"row":348,"column":14},"end":{"row":348,"column":15},"action":"insert","lines":["o"],"id":2326}],[{"start":{"row":348,"column":15},"end":{"row":348,"column":16},"action":"insert","lines":["l"],"id":2327}],[{"start":{"row":348,"column":16},"end":{"row":348,"column":17},"action":"insert","lines":["e"],"id":2328}],[{"start":{"row":348,"column":17},"end":{"row":348,"column":18},"action":"insert","lines":["."],"id":2329}],[{"start":{"row":348,"column":18},"end":{"row":348,"column":19},"action":"insert","lines":["l"],"id":2330}],[{"start":{"row":348,"column":19},"end":{"row":348,"column":20},"action":"insert","lines":["o"],"id":2331}],[{"start":{"row":348,"column":20},"end":{"row":348,"column":21},"action":"insert","lines":["g"],"id":2332}],[{"start":{"row":348,"column":21},"end":{"row":348,"column":23},"action":"insert","lines":["()"],"id":2333}],[{"start":{"row":348,"column":22},"end":{"row":348,"column":23},"action":"insert","lines":["c"],"id":2334}],[{"start":{"row":348,"column":23},"end":{"row":348,"column":24},"action":"insert","lines":["h"],"id":2335}],[{"start":{"row":348,"column":24},"end":{"row":348,"column":25},"action":"insert","lines":["a"],"id":2336}],[{"start":{"row":348,"column":25},"end":{"row":348,"column":26},"action":"insert","lines":["n"],"id":2337}],[{"start":{"row":348,"column":26},"end":{"row":348,"column":27},"action":"insert","lines":["g"],"id":2338}],[{"start":{"row":348,"column":27},"end":{"row":348,"column":28},"action":"insert","lines":["e"],"id":2339}],[{"start":{"row":348,"column":28},"end":{"row":348,"column":29},"action":"insert","lines":["."],"id":2340}],[{"start":{"row":348,"column":29},"end":{"row":348,"column":30},"action":"insert","lines":["i"],"id":2341}],[{"start":{"row":348,"column":30},"end":{"row":348,"column":31},"action":"insert","lines":["d"],"id":2342}],[{"start":{"row":348,"column":30},"end":{"row":348,"column":31},"action":"remove","lines":["d"],"id":2343}],[{"start":{"row":348,"column":29},"end":{"row":348,"column":30},"action":"remove","lines":["i"],"id":2344}],[{"start":{"row":348,"column":29},"end":{"row":348,"column":30},"action":"insert","lines":["d"],"id":2345}],[{"start":{"row":348,"column":30},"end":{"row":348,"column":31},"action":"insert","lines":["o"],"id":2346}],[{"start":{"row":348,"column":31},"end":{"row":348,"column":32},"action":"insert","lines":["c"],"id":2347}],[{"start":{"row":348,"column":32},"end":{"row":348,"column":33},"action":"insert","lines":["."],"id":2348}],[{"start":{"row":348,"column":33},"end":{"row":348,"column":34},"action":"insert","lines":["i"],"id":2349}],[{"start":{"row":348,"column":34},"end":{"row":348,"column":35},"action":"insert","lines":["d"],"id":2350}],[{"start":{"row":348,"column":22},"end":{"row":348,"column":23},"action":"insert","lines":["`"],"id":2351}],[{"start":{"row":348,"column":36},"end":{"row":348,"column":37},"action":"insert","lines":["`"],"id":2352}],[{"start":{"row":348,"column":36},"end":{"row":348,"column":37},"action":"insert","lines":[" "],"id":2353}],[{"start":{"row":348,"column":37},"end":{"row":348,"column":38},"action":"insert","lines":["$"],"id":2354}],[{"start":{"row":348,"column":38},"end":{"row":348,"column":39},"action":"insert","lines":["{"],"id":2355}],[{"start":{"row":348,"column":38},"end":{"row":348,"column":39},"action":"remove","lines":["{"],"id":2356}],[{"start":{"row":348,"column":37},"end":{"row":348,"column":38},"action":"remove","lines":["$"],"id":2357}],[{"start":{"row":348,"column":36},"end":{"row":348,"column":37},"action":"remove","lines":[" "],"id":2358}],[{"start":{"row":348,"column":23},"end":{"row":348,"column":24},"action":"insert","lines":["$"],"id":2359}],[{"start":{"row":348,"column":24},"end":{"row":348,"column":25},"action":"insert","lines":["“"],"id":2360}],[{"start":{"row":348,"column":24},"end":{"row":348,"column":25},"action":"remove","lines":["“"],"id":2361}],[{"start":{"row":348,"column":24},"end":{"row":348,"column":25},"action":"insert","lines":["{"],"id":2362}],[{"start":{"row":348,"column":38},"end":{"row":348,"column":39},"action":"insert","lines":["}"],"id":2363}],[{"start":{"row":348,"column":23},"end":{"row":348,"column":24},"action":"insert","lines":["P"],"id":2364}],[{"start":{"row":348,"column":24},"end":{"row":348,"column":25},"action":"insert","lines":["a"],"id":2365}],[{"start":{"row":348,"column":25},"end":{"row":348,"column":26},"action":"insert","lines":["t"],"id":2366}],[{"start":{"row":348,"column":26},"end":{"row":348,"column":27},"action":"insert","lines":["h"],"id":2367}],[{"start":{"row":348,"column":27},"end":{"row":348,"column":28},"action":"insert","lines":[" "],"id":2368}],[{"start":{"row":348,"column":28},"end":{"row":348,"column":29},"action":"insert","lines":["f"],"id":2369}],[{"start":{"row":348,"column":29},"end":{"row":348,"column":30},"action":"insert","lines":["o"],"id":2370}],[{"start":{"row":348,"column":30},"end":{"row":348,"column":31},"action":"insert","lines":["r"],"id":2371}],[{"start":{"row":348,"column":31},"end":{"row":348,"column":32},"action":"insert","lines":[" "],"id":2372}],[{"start":{"row":348,"column":48},"end":{"row":348,"column":49},"action":"insert","lines":[" "],"id":2373}],[{"start":{"row":348,"column":49},"end":{"row":348,"column":50},"action":"insert","lines":["a"],"id":2374}],[{"start":{"row":348,"column":50},"end":{"row":348,"column":51},"action":"insert","lines":["d"],"id":2375}],[{"start":{"row":348,"column":51},"end":{"row":348,"column":52},"action":"insert","lines":["d"],"id":2376}],[{"start":{"row":348,"column":52},"end":{"row":348,"column":53},"action":"insert","lines":["e"],"id":2377}],[{"start":{"row":348,"column":53},"end":{"row":348,"column":54},"action":"insert","lines":["d"],"id":2378}],[{"start":{"row":348,"column":56},"end":{"row":348,"column":57},"action":"insert","lines":[";"],"id":2379}],[{"start":{"row":354,"column":51},"end":{"row":354,"column":52},"action":"insert","lines":[" "],"id":2380}],[{"start":{"row":354,"column":52},"end":{"row":354,"column":53},"action":"insert","lines":["*"],"id":2381}],[{"start":{"row":354,"column":53},"end":{"row":354,"column":54},"action":"insert","lines":[" "],"id":2382}],[{"start":{"row":354,"column":54},"end":{"row":354,"column":55},"action":"insert","lines":["."],"id":2383}],[{"start":{"row":354,"column":55},"end":{"row":354,"column":56},"action":"insert","lines":["2"],"id":2384}],[{"start":{"row":354,"column":55},"end":{"row":354,"column":56},"action":"remove","lines":["2"],"id":2385}],[{"start":{"row":354,"column":55},"end":{"row":354,"column":56},"action":"insert","lines":["5"],"id":2386}]]},"ace":{"folds":[],"scrolltop":4790,"scrollleft":0,"selection":{"start":{"row":407,"column":55},"end":{"row":407,"column":55},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":367,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1512514946188}